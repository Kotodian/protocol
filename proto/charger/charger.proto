/**
  充电站与后台通信协议 protocol buffer源文件，适用于protoc 3
  消息及数据类型定义

  版本记录
  V1.0.2 2018-3-28 mooney_yuan@qq.com
  1. 增加MessageID，ID_HeartbeatReq和ID_HeartbeatConf用于充电站和服务器对时

  V1.0.1 2018-3-13 mooney_yuan@qq.com
  1. 修改计费模版价格分辨率为0.1分，并去掉timescale字段
  2. 修改消息名SystemTelemetryReq为TelemetryReq

  V1.0.0 2018-3-1 mooney_yuan@qq.com
*/
syntax = "proto3";
package Goiot.Protocol.Charger;
option go_package = "github.com/Kotodian/protocol/golang/hardware/charger";
option optimize_for = LITE_RUNTIME;
/**
 MessageID
 消息代码定义
 所有的消息（请求和应答）都定义了消息代码。请求消息的消息代码小于0x80；
 消息代码加上0x80就是对应消息的应答消息代码；错误应答消息代码为0xff。
*/
enum MessageID
{
    ID_None = 0;
    ID_BootNotificationReq = 0x01;               //启动通知.请求
    ID_HeartbeatReq = 0x02;                      //心跳.请求
    ID_ChangeConfigurationReq = 0x03;            //远程设置参数.请求
    ID_GetConfigurationReq = 0x04;               //获取设备参数.请求
    ID_RemoteControlReq = 0x05;                  //远程控制.请求
    ID_UpdateFirmwareReq = 0x06;                 //远程升级.请求
    ID_FirmwareStatusNotificationReq = 0x07;     //远程升级状态通知.请求
    ID_GetDiagnosticsReq = 0x08;                 //获取设备诊断日志.请求
    ID_DiagnosticsStatusNotificationReq = 0x09;  //诊断日志状态通知.请求
    ID_DeviceRegistrationReq = 0x0A;			 //注册请求
    ID_GetReportReq = 0x0B;
    ID_GetVariablesReq = 0x0C;
    ID_SignCertificateReq = 0x0D; // 签发证书
    ID_ChangeAvailabilityReq = 0x0E;
    ID_CustomerInformationReq = 0x0F;

    ID_RemoteStartTransactionReq = 0x10;         //远程启动充电.请求
    ID_RemoteStopTransactionReq = 0x11;          //远程停止充电.请求
    ID_StartTransactionReq = 0x12;               //充电开始通知.请求
    ID_StopTransactionReq = 0x13;                //充电结束通知.请求
    ID_AuthorizeReq = 0x14;                      //鉴权.请求
    ID_ReserveNowReq = 0x15;                     //预约充电.请求
    ID_CancelReservationReq = 0x16;              //取消预约.请求
    ID_UpdateIdCardCacheReq = 0x1A;              //更新用户卡桩端缓存.请求
    ID_StatusNotificationReq = 0x1B;               //枪状态.请求
    ID_TelemetryReq = 0x21;                      //遥测.请求
    ID_MeterValuesReq = 0x22;
    ID_ChargingInfoReq = 0x23;                   //充电过程信息.请求
    ID_TriggerMessageReq = 0x24;                 //触发消息重发.请求
    ID_GetTransactionsReq = 0x30;                //获取离线订单 .请求
    ID_TransactionReq = 0x31;                    //上报离线订单 .请求
    ID_GetWarningReq = 0x32;                     //获取告警记录.请求
    ID_WarningReq = 0x33;                        //上报告警记录.请求
    ID_SetTariffReq = 0x34;                      //设置计费模版.请求
    ID_GetBaseReportReq = 0x35;                  //获取报告.请求
    ID_NotifyReportReq = 0x36;                   //上报报告.请求
    ID_SetVariablesReq = 0x37;                   //设置变量.请求
    ID_GetLogReq = 0x38;                         //获取日志.请求
    ID_LogStatusNotificationReq = 0x39;          //日志上报状态.请求
    ID_SendLocalAuthorizationListReq = 0x40;     //设置本地授权列表.请求
    ID_DataTransferReq = 0x41;                   //数据传输.请求
    ID_SetChargingProfileReq = 0x42;
    ID_ClearChargingProfileReq = 0x43;
    ID_GetChargingProfileReq = 0x44;
    ID_ReportChargingProfileReq = 0x45;
    ID_ReservationStatusUpdateReq = 0x46;
    ID_InstallCertificateReq = 0x47;
    ID_ClearCacheReq = 0x48;
    ID_SetPriceSchemeReq = 0x49;

    ID_BootNotificationConf = 0x81;              //启动通知.应答
    ID_HeartbeatConf = 0x82;                     //心跳.应答
    ID_ChangeConfigurationConf = 0x83;           //远程设置参数.应答
    ID_GetConfigurationConf = 0x84;              //获取设备参数.应答
    ID_RemoteControlConf = 0x85;                 //远程控制.应答
    ID_UpdateFirmwareConf = 0x86;                //升级固件.应答
    ID_FirmwareStatusNotificationConf = 0x87;    //远程升级状态通知.应答
    ID_GetDiagnosticsConf = 0x88;                //获取设备诊断日志.应答
    ID_DeviceRegistrationConf = 0x8A;			       //注册请求.应答
    ID_GetReportConf = 0x8B; //
    ID_GetVariablesConf = 0x8C;
    ID_SignCertificateConf= 0x8D;
    ID_ChangeAvailabilityConf = 0x8E;
    ID_CustomerInformationConf = 0x8F;

    ID_RemoteStartTransactionConf = 0x90;         //远程启动充电.应答
    ID_RemoteStopTransactionConf = 0x91;          //远程停止充电.应答
    ID_StartTransactionConf = 0x92;               //充电开始通知.应答
    ID_StopTransactionConf = 0x93;                //充电结束通知.应答
    ID_AuthorizeConf = 0x94;                      //鉴权.应答
    ID_ReserveNowConf = 0x95;                     //预约充电.应答
    ID_CancelReservationConf = 0x96;              //取消预约.应答
    ID_UpdateIdCardCacheConf = 0x9A;              //更新用户卡桩端缓存.应答
    ID_StatusNotificationConf = 0x9B;             //枪状态.应答
    ID_TriggerMessageConf = 0xA4;
    ID_GetTransactionsConf = 0xB0;                //获取离线订单 .应答
    ID_TransactionConf = 0xB1;                    //上报离线订单 .应答
    ID_GetWarningConf = 0xB2;                     //获取告警记录.应答
    ID_WarningConf = 0xB3;                        //上报告警记录.应答
    ID_SetTariffConf = 0xB4;                      //设置计费模版.应答
    ID_GetBaseReportConf = 0xB5;                  //获取报告.应答
    ID_NotifyReportConf = 0xB6;                   //上报报告.应答
    ID_SetVariablesConf = 0xB7;                   //设置变量.应答
    ID_GetLogConf = 0xB8;                         //获取日志.应答
    ID_LogStatusNotificationConf = 0xB9;          //日志上报状态.应答
    ID_SendLocalAuthorizationListConf = 0xBA;     //设置本地鉴权列表.应答
    ID_DataTransferConf = 0xBB;                   //数据传输.应答
    ID_SetChargingProfileConf = 0xBC;            //
    ID_ClearChargingProfileConf = 0xBD;
    ID_GetChargingProfileConf = 0xBE;
    ID_ReportChargingProfileConf = 0xBF;
    ID_ReservationStatusUpdateConf = 0xC6;
    ID_InstallCertificateConf = 0xC7;
    ID_ClearCacheConf = 0xC8;
    ID_SetPriceSchemeConf = 0xC9;

    ID_MessageError = 0xFF;                       //错误
}

/**
APDU
消息报文定义
*/
message APDU
{
    int32 timestamp = 1;        //消息unix时间戳
    uint64 sequenceId = 2;       //定义消息的唯一ID，应答报文中此字段必须与请求报文中的一致，用来匹配请求和应答
    MessageID messageId = 3;    //消息代码,参考 MessageID 定义
    bytes payload = 4;          //消息经protocol buffer序列化后的数据，实际的消息内容
    bool no_need_reply = 5;     //不需要回复
    bool sync = 6;
}

/**
ErrorCode
定义错误消息错误代码
*/
enum ErrorCode
{
    EC_GenericError = 0;        //其它错误
    EC_NotSupported = 1;        //不支持该请求
    EC_InternalError = 2;       //处理请求时，发生内部错误
    EC_ProtocolError = 3;       //解析消息payload错误
    EC_TypeViolation = 4;       //解析消息成功，但有域数据类型不对
}

/**
MessageError
错误消息定义
*/
message MessageError
{
    ErrorCode error = 1;        //充电桩或者中心平台向对方发送APDU，
    //如果对方无法正确解析及回应APDU内的消息，返回错误消息。返回ErrorCode类型错误原因
    string  Description = 2;    //返回错误描述。
}

/**
BootNotificationReq
启动通知请求消息定义
*/
message BootNotificationReq
{
    string partNumber = 1;      //设备型号
    string serialNumber = 2;    //设备序列号
    string vendorId = 3;        //供应商代码
    string firmwareVersion = 4; //固件版本号
    string protocolVersion = 5; //协议版本
    int32 connectorNumber = 6;  //充电接口数量，已废弃，在设备注册时候会上传connectorNumber
    string deviceCode = 8;      //中心平台分配的设备识别码
    string ICCID = 9;           //SIM卡识别号(ICCID (21Bytes)/ TMSI 16(Bytes))
    bool is_timeout_stop_remote_start = 10; //是否支持超时停止充电
    string productID = 11;      //产品代码
    uint32 keepalive = 12;      //保活时间
    uint64 ComponentBits = 13; // 功能开关, 以比特位的形式进行传输，0表示基本功能（功能支持，见goiot协议）
    string protocol = 14;       //使用的协议
    string controllee =15;      // 目前连接在哪个pod上
    string remote_address = 16; // 远程ip地址
    string reason = 17;
    string imei = 18;
}

/**
BootNotificationConf
启动通知应答消息定义
*/
message BootNotificationConf
{
    int32 currentTime = 1;      //服务器当前时间
    int32 interval = 2;         //心跳时间间隔（秒）
    int32 status = 3;          //返回中心平台登录状态
    repeated string qrcodes = 4;  //二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
    string baseURL = 19; // 日志地址
}

/**
KeyValue
“获取设备参数”，参数和参数值信息定义
*/
message KeyValue
{
    string key = 1;             //参数名
    bool readonly = 2;          //只读。若等于1，表明参数不能改写。
    string value  = 3;          //参数值
}

/**
ConfigurationStatus
“远程设置参数应答”，设置状态定义
*/
enum ConfigurationStatus
{
    CFS_Accepted = 0;       //参数支持，已设置
    CFS_Rejected = 1;       //参数支持，但设置失败
    CFS_RebootRequired = 2; //参数支持，已设置，但需要重启生效
    CFS_NotSupported = 3;   //参数不支持
}

/**
ChangeConfigurationReq
远程设置参数请求消息定义
*/
message ChangeConfigurationReq
{
    repeated KeyValue configurationKey  = 1; //设置参数列表
}

/**
ChangeConfigurationConf
远程设置参数应答消息定义
*/
message ChangeConfigurationConf
{

    ConfigurationStatus status = 1; //设置参数返回值
}

/**
GetConfigurationReq
获取设备参数请求消息定义
*/
message GetConfigurationReq
{
    repeated KeyValue keys  = 1;  //获取参数列表，协议标准参数通过KeyValue对象的key域指定
}

/**
GetConfigurationConf
获取设备参数请求消息定义
*/
message GetConfigurationConf
{
    repeated KeyValue values = 1; //获取参数返回值列表，当获取的参数不存在时，KeyValue对象的value域为空
}

/**
RemoteControlReq
远程控制请求消息定义
*/
message RemoteControlReq
{
    string function = 1;  //远程控制功能，协议标准功能参考远程控制功能列表
    string parameter = 2; //控制参数
}

/**
RemoteControlConf
远程控制应答消息定义
*/
message RemoteControlConf
{
    int32 status = 1; //远程控制返回状态
}

/**
DiagnosticsStatus
日志上传状态通知请求，日志上传进度状态
*/
enum DiagnosticsStatus
{
    DGS_Idle	= 0;            //未进行日志上传任务状态
    DGS_Accepted = 1;           //上传日志指令已接受
    DGS_Uploading = 2;          //正在上传日志
    DGS_Uploaded = 3;           //日志上传成功
    DGS_UploadFailed = 4;       //日志上传失败
}

/**
FirmwareStatus
固件升级状态通知请求，固件升级进度状态
*/
enum FirmwareStatus
{
    FW_Pending                   = 0;   //准备中
    FW_Downloading               = 1;   //固件下载中
    FW_DownloadPaused            = 2;  //固件暂停下载
    FW_Downloaded                = 3;  //固件已下载
    FW_InstallScheduled          = 4;  //固件安装计划中
    FW_Installing                = 5;  //固件安装中
    FW_Installed                 = 6;  //固件安装成功
    //失败的情况
    FW_DownloadFailed            = 7; //固件下载失败
    FW_InstallVerificationFailed = 8; //固件验证失败
    FW_InstallationFailed        = 9; //固件安装失败
}

/**
UpdateFirmwareReq
远程升级请求消息定义
*/
message UpdateFirmwareReq
{
    string url = 1;             //升级文件ftp服务器地址
    string checksum = 2;        //升级文件md5校验值
    int32 retries = 3;          //设备下载失败重试次数
    int32 retryDate = 4;        //执行升级的时间,时间戳类型类型
    int32 retryInterval = 5;    //重试间隔时间，单位秒
    int32 request_id = 6;       //升级ID
    repeated string urls = 7;
}

/**
 * UpdateFirmwareConf
 * 远程升级应答
 */
message UpdateFirmwareConf
{
    enum Status {
        Accepted = 0; // Accepted this firmware update request. This does not mean the firmware update is successful, the Charging Station will now start the firmware update process.
        Rejected = 1; // Firmware update request rejected.
        AcceptedCanceled = 2; // Accepted this firmware update request, but in doing this has canceled an ongoing firmware update.
        InvalidCertificate = 3; // The certificate is invalid.
        RevokedCertificate = 4; // Failure end state. The Firmware Signing certificate has been revoked.
    }
    Status status = 1;
}

/**
 * FirmwareStatusNotificationReq
 * 远程升级状态通知请求消息定义
 */
message FirmwareStatusNotificationReq
{
    FirmwareStatus status = 1;//固件升级进度状态
    int32 request_id = 2 ;//请求ID
}

/**
 * FirmwareStatusNotificationConf
 * 远程升级状态通知应答消息定义
 */
message FirmwareStatusNotificationConf
{
}


/**
GetDiagnosticsReq
获取设备诊断日志请求消息定义
*/
message GetDiagnosticsReq
{
    string url = 1;             //日志上传ftp服务器地址
    int32 retries = 2;          //日志上传失败重试次数
    int32 retryInterval = 3;    //重试间隔时间，单位秒
    int32 startTime = 4;        //日志开始时间
    int32 endTime = 5;          //日志结束时间
}

/**
GetDiagnosticsConf
获取设备诊断日志应答消息定义
*/
message GetDiagnosticsConf
{
    string filename = 1;        //上传的日志文件名
}

/**
DiagnosticsStatusNotificationReq
诊断日志状态通知请求消息定义
*/
message DiagnosticsStatusNotificationReq
{
    DiagnosticsStatus status = 1;//日志上传进度状态
}

/**
注册请求
*/
message DeviceRegistrationReq
{
    string partNumber = 1;      //设备型号（用于区分不同类型的桩）
    string serialNumber = 2;    //设备序列号（由工厂生产时烧录）
    string vendorId = 3;        //供应商代码
    string registrationCode = 4;//注册码（由运营后台生成，分配给工厂，烧录到设备中）
    bool needToEncodeEvseID = 5;//是否需要转码设备ID
    string topic_prefix = 6;    //topic的前缀
    string productID = 7;       //产品型号
    repeated int32 connectorNumber = 8;  //充电接口数量
    repeated int32 connectorType = 9;  //充电接口类型列表，列表第1项为接口1类型，第2项为接口2类型，依次类推
    string remote_address = 10; // 桩的ip
    string iccid = 11;
    string imei = 12;
    string firmwareVersion = 13;
    string reason = 14;
}

/**
注册应答
*/
message DeviceRegistrationConf
{
    int32 status = 1;           //返回中心平台注册状态
    string deviceCode = 2;      //中心平台分配的设备识别码
    string mqttUsername = 3;    //mqtt的用户名
    string mqttPassword = 4;    //mqtt的密码
    string qrcode_host = 5;     //QRcode host
    repeated string qrcodes = 6;  //二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
    string reason = 7;
    string baseURL = 8;
}

/**
TriggerMessageReq
触发消息重发请求
*/
message TriggerMessageReq
{
    MessageID request = 1;      //请求重发的消息代码
    string connectorId = 2;      //指定充电接口
}

message TriggerMessageConf
{
    enum Status {
        Accepted = 0;
        Rejected = 1;
    }
    Status status = 1;
}

/*
计费模版相关
  分功率段按时长充电计费模版
*/
message TariffTime{
    int32 powerstart = 1;       //分段费率起始功率，分辨率W
    int32 powerend = 2;         //分段费率结束功率，分辨率W
    int32 timestart = 3;        //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
    int32 timeend = 4;          //分段费率结束时间，以24小时内分钟数表示。例如480表示此费率到8:00（480/60）结束
    int32 price = 5;            //按小时服务费价格，分辨率RMB 0.1分。
    // int32 unitprice = 6;        //计费单价，分辨率RMB 0.1分。// 移动到外部,每一个分段都使用同样的最小计费
}

/*
计费模版相关
  分时段按电价计费充电计费模版
*/
message TariffCharge{
    int32 timestart = 1;        //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
    int32 timeend = 2;          //分段费率结束时间，同上
    string tag = 3;             //分段标签，比如"尖"，"峰"，"平"，"谷"
    int32 elecprice = 4;        //按度电价，分辨率RMB0.1分
    int32 serviceprice = 5;     //按度服务费价格，分辨率RMB0.1分
    int32 occupyprice = 6;      //按小时占用费用, 分辨率RMB0.1分
}
/*
计费模版相关
 分时段计时停车费
*/
message TariffParking{
    int32 timestart = 1;        //开始时间，从停车开始计时时间段，分辨率分钟。例如30表示此费率从停车30分钟后开始
    int32 price = 2;            //按小时停车费，分辨率RMB0.1分
}


/**
Cost
计费模版相关，充电消费账单消息定义
*/
message CostBill{
    int32 timestart = 1;        //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
    int32 timeend = 2;          //分段费率结束时间，同上
    string tag = 3;             //分段标签，比如"尖"，"峰"，"平"，"谷"
    int32 electric = 4;         //该分段所消耗电量
    int32 electriccost = 5;     //该分段所消费电量电费,单位分
    int32 servicecost = 6;      //该分段所消费服务费,单位分
    int32 occupycost = 7;       //按分段所消费停车费,单位分
}

message Cost
{
    repeated CostBill bills = 1;//消费清单
    uint64 tariffid = 2;         //计费模版id
    int32 totalcost = 6;        //总消费
    int32 tariffpower = 7;      //计费功率
    int32 totalelec = 8;        //计费总电量
    int32 conflict_total_cost = 9; //费用冲突，一般用于核算费用，核算分段计费与总消费不一致的情况，如果一致则此字段为默认值0
}

message TariffChannel
{
    map<string, int32> elec = 1;      //电费
    map<string, int32> service = 2;   //服务费
    uint64 tariffid = 3; //计费模版id号
}

/**
SetTariffReq
 设置计费模版
*/
message SetTariffReq
{
//    message OccupyTariff {
//        int32 free_time = 1;                    //免费时间
//        int32 max_fee = 2;                      //最高/封顶费用，分辨率RMB 0.1分
//        int32 unit_fee = 3;                     //每分钟的费用，分辨率RMB 0.1分
//    }
    uint64 tariffid = 1;                        //计费模版id号
    string description = 2;                     //描述
    repeated TariffCharge chargetariffs = 3;    //按电量充电费用
    repeated TariffTime timetariffs = 4;        //按时长充电费用
    repeated TariffParking parkingtariffs = 5;  //停车费
    bool test = 6;                              //测试下，是否通过校验，并不真正下发
    int32 unitprice = 7;                        //计费单价，分辨率RMB 0.1分。
    int32 free_charger_time = 8;                //免费充电时间
    map<string, TariffChannel> channels = 9;    //渠道对应的费率集合
    string channel_key = 10;                    //渠道费率的键值
//    OccupyTariff occupy_tariff = 11;            //占桩费
}

/**
SetTariffConf
 设置计费模版应答
*/
message SetTariffConf{
    int32 status = 1;           //充电桩返回状态
}

/**
身份类型
*/
enum IdType
{
    ID_DEFAULT      = 0;        //默认
    ID_Timing       = 1;              // 定时启动
    ID_AUTH_CARD    = 10;       //充电卡用户
    ID_WALLET_CARD  = 11;       //离线钱包卡
}

/**
鉴权卡细分卡类型定义
*/
enum CardType {
    CARD_DEFAULT = 0;       //默认，未指定类型
    CARD_BALANCE = 1;       //余额卡
    CARD_TIME = 2;          //时效卡（月卡／年卡）
    CARD_COUNT = 3;         //次数卡
}

/**
“鉴权应答”消息鉴权结果
**/
enum AuthorizationStatus
{
    AS_Accepted = 0;        //鉴权通过，允许用户充电
    AS_Blocked = 1;         //鉴权被挡住，不允许充电
    AS_Expired = 2;         //账户过期，不允许充电
    AS_Invalid = 3;         //账户无法识别，无效，不允许充电
    AS_ConcurrentTx	= 4;    //账户有未结算的订单，不能同时开启多个订单，不允许充电
    AS_Insufficient	= 5;    //账户余额不足，不允许充电
    AS_PasswordError = 6;   //用户密码错误
    AS_SystemError = 7;    //系统错误
    AS_NoCredit = 8; // 信用额度不足
    AS_NotAllowedTypeEVSE = 9; // 不可在此设备充电，Identifier is valid, but not allowed to charge at this type of EVSE.
    AS_NotAtThisLocation = 10; // 不可在此站充电
    AS_NotAtThisTime = 11; // 不可在此时充电
    AS_Unknown = 99; // 未知
}

/**用户身份鉴权信息*/
message IdToken
{
    string id = 1;          //Id的卡号
    IdType id_type = 2;     //用户类型
    string brand = 3;       //卡的品牌，比如goiot或某地的公交卡
    string password = 4;    //IdToken的密码
    string customer = 5;    //运营商
    int32 expiryDate = 6;   //用户账户失效时间,时间戳类型
    int32 balance = 7;      //用户账户余额。单位分
    AuthorizationStatus status = 8;//中心平台鉴权结果。用户账户是否通过中心平台鉴权。
    CardType type = 9;      //用户卡类型
    int32 chargecount = 10; //剩余充电次数
    AuthorizationMode mode = 11;
    message Additional {
        string idToken = 1;
        AuthorizationMode mode = 2;
    }
    repeated Additional additionalIdToken = 12;

}

/**
AuthorizeReq
鉴权请求
*/
message AuthorizeReq
{
    IdToken IdData = 1;    //用户身份识别号
    string password = 2;   //用户密码
    int32 payment	= 3;   //用户请求扣费金额
    AuthorizationMode authorization_mode = 4; //鉴权类型
}

/**
AuthorizeConf
鉴权应答
*/
message AuthorizeConf
{
    IdToken idInfo = 1;             //中心平台返回鉴权结果
    SetTariffReq priceScheme = 2;   //价格模版
    string transactionId = 3;       //中心平台返回订单号
}

/**
UpdateIdCardCacheReq
后台更新充电站用户卡信息
*/
message UpdateIdCardCacheReq
{
    repeated IdToken cardinfo = 1;
}

/**
*授权启动充电方式
**/
enum AuthorizationMode
{   
    AM_LocalPlug = 0;           //本地即插即充启动
    AM_LocalAdmin = 1;          //本地管理员启动
    AM_LocalIdentityCard = 2;   //鉴权卡刷卡本地鉴权启动
    AM_OnlineIdentityCard = 3;  //鉴权卡刷卡在线鉴权启动
    AM_LocalWalletCard = 4;     //本地钱包卡刷卡启动
    AM_LocalVIN = 5;            //车辆VIN本地鉴权启动
    AM_OnlineVIN = 6;           //车辆VIN在线鉴权启动
    AM_Bluetooth = 7;          //本地通过蓝牙启动
    AM_MAC = 8;                //本地通过输入校验码启动
    AM_RemoteAdmin = 9;        //远程管理员启动
    AM_RemoteUser = 10;         //远程用户启动
    AM_Intellect = 11;          // 智能充电启动
}

/**
ServiceMode
充电桩服务模式
*/
enum ServiceMode
{
    SM_AutoCharge = 0;      //自动充满模式
    SM_ChargeByElec = 1;    //预设电量充电模式
    SM_ChargeByTime = 2;    //预设时间充电模式
    SM_ChargeByMoney = 3;   //预设金额充电模式
    SM_DischargeByElec = 4; //按电量放电
    SM_AutoDischarge = 5;   //自动放电
}

/**
 * HeartbeatReq
 * 心跳回复
 */
message HeartbeatReq {
    int64 currentTime = 1; // 桩的时间
    string connectorId = 2; // 枪号
    string remoteAddress = 3; // 远程地址
}

/**
 * HeartbeatResp
 * 心跳回复
 */
message HeartbeatResp {
    string connectorId = 1; // 枪号
}

/**
RemoteStartTransactionReq
远程启动充电请求消息定义
*/
message RemoteStartTransactionReq
{
    string connectorId = 1;      //充电接口号，必须大于0。若充电桩只有一个接口，可以不填
    IdToken IdData = 2;         //用户身份识别号
    string transactionId = 3;   //中心平台生成的订单号
    string pin = 4;             //充电桩pin码
    string evseId = 5;
    ServiceMode serviceMode = 6;//充电／放电服务模式。按电量充电，按金额充电，按时间充电，自动充满 ，按电量放电，自动放电
    int32 timingStart = 7;      //定时启动时间。充电将在设定的时间启动。如果为0或者未填，立即启动充电
    int32 allowedMinute = 8;    //按时间充电时，最大允许充电时间，单位秒
    int32 allowedKwh = 9;       //按电量充电时，最大允许充电电量，分辨率0.01kwh
    int32 allowedRMB = 10;      //按金额充电时，最大允许充电金额，单位分
    SetTariffReq priceScheme = 11;    //价格模版。对于某些针对特定用户启用特定计费模版
    string schedule_time = 12;          // 定时充电时间戳(秒), 0表示即时充电
    string remoteStartId = 13;
    ChargingProfile chargingProfile = 14;
    int32 allowedSOC = 15;
}

/**
RemoteStartTransactionConf
远程启动充电应答消息定义
*/
message RemoteStartTransactionConf
{
    int32 status = 1;           // 充电请求，充电桩返回状态
    StopReason reason = 2;      // 充电结束原因。
    string reason_desc = 3;       //停止理由描述
    string record_id = 4; // 设备流水号
}


/**
RemoteStopTransactionReq
远程停止充电请求消息定义
*/
message RemoteStopTransactionReq
{
    string connectorID = 1;
    string transactionId = 2;  // 充电交易的订单号
    StopReason reason = 3;     // 充电结束原因。
}

/**
RemoteStopTransactionConf
远程停止充电应答消息定义
*/
message RemoteStopTransactionConf
{
    int32 status = 1; //充电桩返回状态
}

/**
StartTransactionReq
充电开始通知请求消息定义
*/
message StartTransactionReq
{
    string recordId = 1;               //充电桩充电记录号
    string evseId = 17;
    string connectorId = 2;             //充电接口号，必须大于0。若充电桩只有一个接口，可以不填
    IdToken IdData = 3;                //用户身份识别号
    AuthorizationMode mode = 4;        //授权启动充电方式，用户远程启动，本地刷卡启动，本地蓝牙启动等
    ServiceMode serviceMode = 5;       //充电服务模式。按电量充电，按金额充电，按时间充电，自动充满等
    double meterStart = 6;              //充电开始时电表度数，分辨率0.01kwh
    int32 timestamp = 7;               //充电开始时间,时间戳
    int32 reservationId = 8;          //预约ID
    string transactionId = 9;          //平台中心生成的订单号。此订单号是从“远程启动充电”请求消息获取的
    string pin = 10;                   //充电桩校验码。当充电桩离线时，可以通过在充电桩屏幕输入pin码结束充电
    uint64 tariffId = 11;              //计费模版ID。此订单将使用对应的计费模版计费
    int32 serviceAmount =12;           //充电量/钱/时间。对应充电服务模式中的按电量充电，按金额充电，按时间充电，自动充满进行赋值
    string transparent = 13;           //透传字段，会在 confi报文里传回来 transparent
    uint32 soc = 14;                   //启动电量的SOC
    bool is_reserved = 15;             //是否预约中
    int32 remoteStartId = 18;
    int32 created_at = 16;             //订单创建时间，用于解决部分协议在充电中不上报启动充电时间的bug（启动充电时间会用于协助寻找是否已存在的订单）
    ChargerStatus connectorChargingState = 19;
    bool offline = 20; // 是否是离线订单
    double voltageA = 21;
    double voltageB = 22;
    double voltageC = 23;
    double currentA = 24;
    double currentB = 25;
    double currentC = 26;
    double power = 27;
    Tariff tariff = 28;
    CurrentChargingProfile profile = 29;
    int32 intellectId = 30; // 智能充电id
    int32 batteryTemp = 31;
}

/**
StartTransactionConf
充电开始通知应答消息定义
*/
message StartTransactionConf
{
    string transactionId = 1;      //平台中心生成的订单号,如果“充电开始通知”请求没有transactionId。
    //中心平台应答时，生成订单号回复充电桩。
    IdToken idInfo = 2;        //中心平台返回鉴权结果
    string recordID = 3;       //充电桩充电记录号
    string transparent = 4;    // req传过来的， 要透传回去
    string connectorId = 5;
}

/**
StopReason
“充电结束通知”请求消息充电停止原因定义
*/
enum StopReason
{
    SR_Normal = 0;                   // 按照服务类型（按电量充电，按时长充电，按金额充电,
    SR_LocalCard = 1;                // 用户本地刷卡停止充电
    SR_LocalPIN = 2;                 // 用户本地输入校验码停止充电
    SR_RemoteUser = 3;               // 用户远程结束
    SR_RemoteAdmin = 4;              // 管理员远程结束
    SR_EmergencyStop = 5;            // 急停按下，停止充电
    SR_EVDisconnected = 6;           // 检测到枪头断开，停止充电
    SR_Reboot = 7;                   // 系统重启停止充电
    SR_OffLine = 8;                  // 充电桩断线，停止充电（对于不允许离线充电的充电桩）
    SR_PowerLoss =9;                 // 充电桩掉电，停止充电
    SR_SystemFault = 10;             // 充电桩故障，停止充电
    SR_BMSFault = 11;                // 电动车故障，停止充电
    SR_Other = 12;                   // 其它原因，停止充电
    SR_MeterFault = 13;              // 电表故障
    SR_SocFull   = 16;               // soc充满停止
    SR_NotEnoughMoney = 17;          // 余额不足
    SR_OverLoad = 18;                // 过载停止
    SR_OverVoltage = 19;             // 过压停止
    SR_UnderVoltage = 20;            // 欠压停止
    SR_NetTimeout = 21;              // 网络同步超时停止充电
    SR_OverTime = 22;                // 超过设置时间
    SR_OverMeter = 23;               // 超过设置电量
    SR_OverSOC = 24;                 // 超过设置SOC
    SR_CPError = 25;                 // CP错误
    SR_Leakage = 26;                 // 漏电故障

    // 100以内的停止理由留给我们自己的固件扩展
    SR_FullOfSelfStop = 101;          // 充满自停(原22)
    SR_AdminForceStop = 102;          // 管理员强制结束(原23)
    SR_EVOccupy = 103;                // 接口已被占用(原24)
    SR_NoTariff = 104;                // 没有计费模版(原25)
    SR_ConnectorFault = 105;          // 充电枪故障(原26)
    SR_CC1NoConnect = 106;            // 充电枪未连接(充电中车辆控制引导异常/CC1连接异常)(原27)
    SR_Deauthorized = 107;            // 取消授权
    SR_EVConnectTimeout = 108;        // 连接超时
    SR_Server_Error = 999;       // 平台错误
}

/**
StopTransactionReq
充电结束通知请求消息定义
*/
message StopTransactionReq
{
    string recordId = 1;                // 充电桩充电记录号
    string transactionId = 2;           // 平台中心生成的订单号。此订单号是从“远程启动充电”请求消息获取的
    IdToken IdData = 3;                 // 用户身份识别号
    StopReason reason = 4;              // 充电结束原因。用户远程结束，本地结束，异常结束等
    double meterStop = 5;                // 充电结束时电表度数，分辨率0.01kwh
    int32 timestamp = 6;                // 充电结束时间,时间戳，精度：秒
    Cost cost = 7;                      // 充电订单计费信息
    string evseId = 8;
    int32 deduction = 9;                // 本地扣款金额。单位分
    string TAC = 10;                    // 本地卡片扣款校验数据
    bytes elecData = 11;                // 充电过程电量信息, 每5分钟间隔电量，每个点的电量一个字节表示
    string reason_desc = 12;            // 停止理由描述
    bool is_disabled_time_start = 13;   // 是否禁用开始时间来找订单记录，如有的设备在启动通知报文中没有启动时间，这一项就要设置成true，如盛宏、优力特的设备
    uint32 soc = 14;                    // 停止的SOC
    bool calc_cost_by_backend = 15;     // 后台计费
    int32 reservationId = 16;          //预约ID
    string connectorId = 17;
    double currentA = 18;
    double currentB = 19;
    double currentC = 20;
    double voltageA = 21;
    double voltageB = 22;
    double voltageC = 23;
    double power = 24;
    Tariff tariff = 25;
    CurrentChargingProfile profile = 26;
    int32 seq = 27;
    int32 batteryTemp = 28;
}

/**
StopTransactionConf
充电结束通知应答消息定义
*/
message StopTransactionConf
{
    int32 balance = 1;          //用户账户余额
    int32 totalCost = 2;        //中心平台返回的总费用
    bool  charged = 3;          //是否已扣费
    string transactionId = 4;
    string connectorId = 5;
}

/**
电池类型定义，枚举类型
*/
enum BatteryType
{
    BAT_Unkown = 0;
    BAT_LeadAcid = 1;//铅酸电池
    BAT_NiMH = 2;    //镍氢电池
    BAT_LFP = 3;     //磷酸铁锂电池
    BAT_LMO = 4;     //锰酸锂电池
    BAT_LCO = 5;     //钴酸锂电池
    BAT_NCM = 6;     //三元材料电池
    BAT_LIB = 7;     //聚合物锂离子电池
    BAT_LTO = 8;     //钛酸锂电池
    BAT_Other = 9;   //其它电池
}

// 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
message BMSHandshakeInfo
{
    string BMSVersion = 1;     //BMS通信协议版本号
    int32 allowedVoltage = 2;  //BMS最高允许充电电压
    BatteryType batType = 3;   //电池类型
    int32 ratedCapacity = 4;   //整车动力蓄电池系统额定容量
    int32 ratedVoltage = 5;    //整车动力蓄电池系统额定总电压
    string vendor = 6;         //电池生产厂商
    string serialNumber = 7;   //电池组序号
    int32 productionDate = 8;  //电池组生产日期,时间戳，精度：秒
    int32 cycles = 9;          //电池组充电次数
    int32 property = 10;       //电池组产权标识。0-租赁，1-车自有
    string VIN = 11;           //车辆识别码
    string FWVersion = 12;     //BMS软件版本号
}

// 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
message BMSConfigInfo
{
    int32 allowedCellVol = 1;  //单体动力蓄电池最高允许充电电压
    int32 allowedCurrent = 2;  //最高允许充电电流
    int32 nominalEnergy = 3;   //动力蓄电池标称总能量
    int32 alowedVoltage = 4;   //最高允许充电总电压
    int32 alowedTemp = 5;      //最高允许温度
    int32 soc = 6;             //整车动力蓄电池荷电状态
    int32 voltage = 7;         //整车动力蓄电池当前电池电压
}
/**
BMSChargingType
BMS充电模式
*/
enum BMSChargingType
{
    BMS_None            = 0;//
    BMS_ConstantVoltage = 1;//恒压充电
    BMS_ConstantCurrent = 2;//恒流充电
}

/**
BMS测量值状态
*/
enum BMSMeasureStatus
{
    BMSM_Normal = 0;        //测量值正常
    BMSM_OverLevel = 1;     //过高
    BMSM_UnderLevel = 2;    //过低或者不可信
}

/**
BMS开关值状态
*/

/**
BMSTelesignallingStatus
动力蓄电池绝缘状态
*/
enum BMSTelesignalStatus
{
    BMST_Normal = 0;   //正常
    BMST_Abnormal = 1; //异常
    BMST_Unknown = 2;  //不可信
}

/**
BMSChargingInfo
充电中信息定义
*/
message BMSChargingInfo
{
    // 电压单位V 精度0.01
    // 电流单位A 精度0.01
    int32 requestVoltage = 1;                   // 电压需求
    int32 requestCurrent = 2;                   // 电流需求
    BMSChargingType chargeMode = 3;             // 充电模式
    int32 voltage = 4;	                        // 充电电压测量值
    int32 current = 5;	                        // 充电电流测量值
    int32 soc = 6;	                            // 当前荷电状态	数据范围：0~100
    int32 remainingTime = 7;	                // 估算剩余充电时间 单位秒
    Cell highestVoltage = 8; 	                // 最高动力蓄电池电压及编号
    Cell highestTemp = 9;	                    // 最高动力蓄电池温度及编号
    Cell lowestTemp = 10;                       // 最低动力蓄电池温度及编号
    BMSMeasureStatus cellVoltageStatus = 11 ;   // 单体动力蓄电池电压告警
    BMSMeasureStatus socStatus = 12;            // 整车动力蓄电池荷电状态告警
    BMSMeasureStatus currentStatus = 13;        // 动力蓄电池充电电流
    BMSMeasureStatus temperatureStatus = 14 ;   // 动力蓄电池温度告警
    BMSTelesignalStatus insulationStatus = 15;  // 动力蓄电池绝缘状态
    BMSTelesignalStatus contactorStatus = 16 ;  // 动力蓄电池组输出继电器连接状态
    repeated Cell cellVoltage = 17;             // 单体蓄电池电压列表
    repeated Cell cellTemperature = 18;         // 单体蓄电池温度列表


    string BMSVersion = 19;     // BMS通信协议版本号
    int32 allowedVoltage = 20;  // BMS最高允许充电电压
    BatteryType batType = 21;   // 电池类型
    int32 ratedCapacity = 22;   // 整车动力蓄电池系统额定容量
    int32 ratedVoltage = 23;    // 整车动力蓄电池系统额定总电压
    string vendor = 24;         // 电池生产厂商
    string serialNumber = 25;   // 电池组序号
    int32 productionDate = 26;  // 电池组生产日期,时间戳，精度：秒
    int32 cycles = 27;          // 电池组充电次数
    int32 property = 28;       // 电池组产权标识。0-租赁，1-车自有
    string VIN = 29;           // 车辆识别码
    string FWVersion = 30;     // BMS软件版本号

    string  bmsCode = 31;               // BMS编码	<=50字符
	int32    allowedCurrent = 32;        // 最高允许充电电流	单位:A 精度0.01
	int32    callAlowedVoltage = 33;     // 单体最高允许电压	单位:V 精度0.01
	int32   alowedTemp = 34;            // 最高允许温度	单位：℃
    int32   allowedCellVol = 35;         // 单体动力蓄电池最高允许充电电压
    int32   nominalEnergy = 36;          // 动力蓄电池标称总能量
    int32   alowedVoltage = 37;          // 最高允许充电总电压
}
/**
BMSChargedInfo 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
充电完成信息定义
*/
message BMSChargedInfo
{
    int32 soc = 1;             //中止荷电状态
    int32 lowestVoltage = 2;   //动力蓄电池单体最低电压
    int32 highestVoltage = 3;  //动力蓄电池单体最高电压
    int32 lowestTemp = 4;      //动力蓄电池最低温度
    int32 highestTemp = 5;     //动力蓄电池最高温度
}

/**
Cell
单体电池定义
*/
message Cell
{
    int32 number = 1;  //单体电池编号
    int32 value = 2;   //采集值，电压或者温度
}

/**
ChargerStatus
充电接口工作状态定义
*/
enum ChargerStatus
{
    CHS_Idle = 0;      //已连接，未开启充电会话
    CHS_EVConnected = 1;
    CHS_Charging = 2;       //充电中
    CHS_SuspendedEV = 3;    //充电已开启，电动汽车还未充电
    CHS_SuspendedEVSE = 4;  //充电已开启，但充电桩还未输出
}

/**
ChargingInfoReq
充电过程信息请求
*/
message ChargingInfoReq
{
    string recordId = 1;                //充电桩充电记录号
    string connectorId = 2;             //指定充电接口
    string evseId = 3;
    double currentA = 4;
    double currentB = 5;
    double currentC = 6;
    double voltageA = 7;
    double voltageB = 8;
    double voltageC = 9;
    int32 consumedTime = 10;            //已充充电时间
    int32 consumedElectric = 11;        //已充电电量
    Cost cost = 12;                    //消费金额
    double power = 13;                  //充电功率
    int32 remainingTime = 14;          //剩余充电时间，精度：秒
    ChargerStatus status = 15;          // 充电状态
    bool offline = 16;
    uint64 chargingProfileID = 17;
    int32 limit = 18;
    ChargingRateUnit unit = 19;
    int32 timestamp = 20;
    double electricity = 21;
    Tariff tariff = 22;
    IdToken idData = 23;
    CurrentChargingProfile profile = 24;
    int64 reservationId = 25;
    uint32 soc = 26;
    int32 batteryTemp = 27;
}

/**
Transaction
“上报离线订单请求”消息上报充电记录定义
*/
message TransactionReq
{
    string recordId = 1;         //充电桩充电记录号，每多增一条充电记录，recordId增1。
    string transactionId = 2;   //中心平台生成的充电交易号
    string connectorId = 3;      //充电接口号
    IdToken IdData	= 4;        //用户身份识别号
    AuthorizationMode mode = 5; //授权启动充电方式
    ServiceMode service = 6;    //充电服务模式
    double meterStart = 7;       //充电开始时电表度数，分辨率0.01kwh
    double meterStop = 8;        //充电结束时电表度数，分辨率0.01kwh
    int32 timeStart = 9;        //充电订单开始时间，时间戳，精度：秒
    int32 timeStop = 10;        //充电订单结束时间，时间戳，精度：秒
    string pin = 11;            //充电校验码
    StopReason reason = 12;     //充电结束原因。用户远程结束，本地结束，异常结束等。
    Cost cost = 13;             //计费账单信息
    int32 deduction = 14;       //本地扣款金额。单位分
    string TAC = 16;            //本地卡片扣款校验数据
    bool charged = 17;          //订单是否已经支付
    bool confirmed = 18;        //该订单是否经过后台确认
    bytes elecData = 19;        //充电过程电量信息
    int32 chargeStartTime = 22; //真正充电开始时间，时间戳，精度：秒
    int32 chargeStopTime = 23;  //充电结束时间，时间戳，精度：秒
    string reason_desc = 24;    //停止理由描述
    bool is_disabled_time_start = 25;   // 是否禁用开始时间来找订单记录，如有的设备在启动通知报文中没有启动时间，这一项就要设置成true，如盛宏、优力特的设备
    uint32 start_soc = 26; //启动soc
    uint32 stop_soc = 27; //结束soc
    bool calc_cost_by_backend = 28;     // 后台计费
    int32 reservationId = 29;          //预约ID
    int32 remoteStartId = 30;
    string evseId = 31;
    double currentA = 32;
    double currentB = 33;
    double currentC = 34;
    double voltageA = 35;
    double voltageB = 36;
    double voltageC = 37;
    double power = 38;
    Tariff tariff = 39;
    CurrentChargingProfile profile = 40;
    int32 batteryTemp = 41;
}

/**
TransactionConf
离线记录上送回复
*/
message TransactionConf
{
    int32 status = 1;    //状态
    string recordId = 2;   //回复的设备订单号
    string connectorId = 5;
}


/**
Components
告警和遥测信息，设备组件定义
*/
enum Components
{
    CP_None = 0;        //未分类
    CP_System = 1;      //系统
    CP_TCU	= 2;        //计费控制单元
    CP_CCM = 3;         //充电控制单元
    CP_BMS = 4;         //电动汽车BMS
    CP_PKL = 5;         //智能车位锁
    CP_PKD = 6;         //智能车位探测
    CP_Meter = 7;       //电表
    CP_LCD = 8;         //显示屏
    CP_CardReader = 9;  //读卡器
    CP_Fan = 10;        //系统风扇
    CP_Connector = 11;  //充电接口
    CP_PSM = 12;        //电源模块
}

/**
SampledValue
“系统信息遥测”，遥测量定义。
*/
message SampledValue
{
    enum Phase {
       L1 = 0;
       L2 = 1;
       L3 = 2;
    }
    int32 measurand = 1;           // 遥测变量代码
    string vendorEx = 2;           // 供应商扩展遥测变量名
    double value = 3;               // 遥测值
    int32 rate = 4;                // 倍率(默认值是1)
    Phase phase = 5;  // 相位
}

/**
TelemetryReq
数据收集
*/
message TelemetryReq
{
    Components component = 1;  //组件
    string connectorId = 2;     //充电接口，若测量组件属于某个充电接口，如某个接口的电表，填对应的充电接口号
    string evseId = 3;          // 设备
    repeated SampledValue values = 5;   //遥测值集合
    uint64 warningBitmap = 6;  //故障告警位表，此组件当前所有告警位标志
    string recordId = 7;        //跟订单相关的遥测信息，才有recordId相关联充电订单号
}

/**
WarningLevel
Warning类告警等级定义
*/
enum WarningLevel
{
    WL_Critical = 0;//系统严重故障，系统不能工作了
    WL_Alert = 1;   //故障，需要立即中止本次充电，不影响下次充电
    WL_Warning = 2; //系统警告，不影响充电
    WL_Notice = 3;  //事件通知
    WL_Info = 4; //信息
    WL_Hardware = 100; //硬件故障
    WL_SYSTEM = 101; //系统故障
}

/**
 * WarningReq
 * 上报离线订单请求”消息上报充电记录定义
*/
message WarningReq
{
    //WarningCode code = 1;    //告警代码
    int32 code = 1;            //告警代码
    string vendorEx = 2;       //供应商扩展告警代码
    WarningLevel level = 3;    //指定告警等级
    Components component = 4;  //告警所属的组件，组件包括系统，计费控制单元，充电控制单元，电源模块，BMS等
    string recordId = 5;        //告警所关联的充电会话记录号
    string info = 6;           //告警信息。对于供应商自定义的告警，可以在此填充告警相关信息。
    string connectorId = 8;     //充电接口号
    int32 componentId = 9;     //组件号
    int32 ttl = 10;            // -1 永远存储; 0  删除告警; >0 存储告警时长(秒),超过自动解除告警
    uint64 event_id = 11;      //事件ID
    int32 time = 12;           //告警时间
    bool clean = 13;
    string remote_address = 14;
}

/**
 * WarningConf
 */
message WarningConf
{

}

/**
GetTransactionsReq
获取离线订单请求
*/
message GetTransactionsReq
{
    string connectorId = 1; //指定充电接口
    // 0-所有接口（此字段未指定时默认）
    // 非0-指定接口
    int32 level = 2;       //指定已结算或未结算离线订单记录
    // 0-当前订单(此字段未指定时默认)
    // 1-离线未结算订单
    // 2-所有订单
    int32 startTime = 4;   //指定记录开始时间,时间戳，精度：秒
    int32 endTime = 5;     //指定记录结束时间,时间戳，精度：秒
}

/**
GetTransactionsConf
获取离线订单应答
*/
message GetTransactionsConf
{
    int32 totalCount = 1;//总记录数。充电桩返回中心平台通过“获取离线订单请求”将获取的记录总数。
}

/**
GetWarningReq
获取告警记录请求
*/
message GetWarningReq
{
    WarningLevel level = 1;  //指定要获取的告警记录的告警等级
    int32 startTime = 4;     //指定告警开始时间,时间戳，精度：秒
    int32 endTime = 5;       //指定告警结束时间,时间戳，精度：秒
}

/**
GetWarningConf
获取告警记录应答
*/
message GetWarningConf
{
    int32 totalCount = 1;//总记录数
}

/**
 * GetBaseReportConf
 * 获取基本报告.应答
 */
message GetBaseReportConf
{
    int32 status = 1; //状态,0：接受，1：拒绝，2：请求项目不支持，3：请求项目不存在
}

/**
 * GetBaseReportReq
 * 获取基本报告.请求
 */
message GetBaseReportReq
{
    int32 request_id = 1; //请求ID
    enum ReportBaseEnumType
    {
        ConfigurationInventory = 0;
        FullInventory = 1;
        SummaryInventory = 2;
    }
    ReportBaseEnumType type = 2;
}


/**
 * NotifyReportReq
 * 报告上报.请求
 */
message NotifyReportReq
{
    int32 request_id = 1; //请求ID
    int32 generate_at = 2; //生成时间
    bool tbc = 3; //是否还有没传完的报文
    int32 seq = 4; //传输序列，第一帧是0
    repeated ReportDataType reportData = 5; //上报的数据
}

message ReportDataType
{
    ComponentType component = 1;//组件
    VariableType variable = 2;//变量
    repeated VariableAttributeType variableAttribute = 3;//变量属性
}

message ComponentType{
    string name = 1; //名称，比如风扇
    string instance = 2; //可选，实例名称，比如风扇1、风扇2等
    string evse_id = 3; //可选，默认为0，0代表是设备
    string connector_id = 4;
}

message VariableType{
    string name = 1; //名称，比如转速、电流
    string instance = 2; //可选,实例名称，比如风扇1、风扇2等
}

message VariableAttributeType{
    string type = 1; //变量类型
    string value = 2; //变量的值
    string mutability = 3; //变量权限
}

/**
 * NotifyReportConf
 * 上报回复
 */
message NotifyReportConf {
    string connectorId = 1;
}

/**
 * SetVariablesReq
 * 设置变量.请求
 */
message SetVariablesReq {
    message SetVariableData {
        string attributeType = 1;  //类型, Target,MinSet,MaxSet,Actual(Default)
        string attributeValue = 2; //值
        ComponentType component = 3; //组件
        VariableType variable = 4; //变量
    }
    repeated SetVariableData setVariableData = 1;//变量
}

/**
 * SetVariablesConf
 * 设置变量.应答
 */
message SetVariablesConf {
   SetVariablesResult status = 1; 
}

enum SetVariablesResult {
    Accpeted = 0;
    Rejected = 1;
}

/**
 * GetLogReq
 * 获取日志.请求
 */
message GetLogReq {
    enum LogType
    {
        DiagnosticsLog = 0; // This contains the field definition of a diagnostics log file
        SecurityLog = 1; // Sent by the CSMS to the Charging Station to request that the Charging Station uploads the security log.
    }
    LogType logType = 1;
    int32 request_id = 2; //请求ID
    int32 retries = 3;  //重试次数
    int32 retry_interval = 4; //重试间隔
    message LogParametersType {
        string remote_location = 1; //地址
        int64 start = 7;            // 起始时间
        int64 end = 8;              //  结束时间
    }
    LogParametersType log = 5; //日志请求参数
}


/**
 * GetLogResp
 * 获取日志.应答
 */
message GetLogConf {
    enum LogStatusEnumType {
        Accepted = 0;
        Rejected = 1;
        AcceptedCanceled= 2; // 接受此日志上传，但这样做将取消正在进行的日志文件上传。
    }
    LogStatusEnumType status = 1;
    string fileName = 2;
}

/**
 * LogStatusNotificationReq
 * 日志状态通知.请求
 */
message LogStatusNotificationReq {
    enum UploadLogStatusEnumType {
        Idle = 0;
        Uploading = 1;
        Uploaded = 2;
        UploadFailure = 3;
    }
    UploadLogStatusEnumType status = 1; //状态
    int32 request_id = 2;//请求id
}

/**
 * LogStatusNotificationConf
 * 日志状态通知.应答
 */
message LogStatusNotificationConf
{
}

/**
 * GetLocalListVersionRequest
 * 获取本地授权列表版本.请求
 */
message GetLocalListVersionReq
{
    int32 version_number = 1;    //版本号
}

/**
 * GetLocalListVersionConf
 * 获取本地授权列表版本.应答
 */
message GetLocalListVersionConf
{
    int32 version_number = 1;  //版本号
}

enum IdTokenEnumType {
    Central = 0; // A centrally, in the CSMS (or other server) generated id (for example used for a remotely started transaction that is activated by SMS). No format defined, might be a UUID.
    eMAID = 1; // Electro-mobility account id as defined in ISO 15118
    ISO14443 = 2; // ISO 14443 UID of RFID card. It is represented as an array of 4 or 7 bytes in hexadecimal representation.
    ISO15693 = 3; // ISO 15693 UID of RFID card. It is represented as an array of 8 bytes in hexadecimal representation.
    KeyCode = 4; // User use a private key-code to authorize a charging transaction. For example: Pin-code.
    Local = 5; // A locally generated id (e.g. internal id created by the Charging Station). No format defined, might be a UUID
    MacAddress = 6;
    NoAuthorization = 7; // Transaction is started and no authorization possible. Charging Station only has a start button or mechanical key etc. IdToken field SHALL be left empty.
}


message IdTokenInfoType {
    AuthorizationStatus status = 1;
}

//IdTokenType 身份信息，OCPP以及新版本用
message IdTokenType {
    string id_token = 1;
    IdTokenEnumType type = 2;
    message Additional {
        string id_token = 1;
        IdTokenEnumType type = 2;
    }
   repeated Additional additionalIdToken = 3;
}

//AuthorizationData 授权信息
message AuthorizationData {
    IdToken idToken = 1;
}


/**
 * SendLocalAuthorizationListReq
 * 发送本地授权.请求
 */
message SendLocalAuthorizationListReq
{
    int32 version_number = 1;    //版本号
    enum UpdateEnumType {
        Differential = 0; //更新不一致的
        Full = 1; //更新全部
    }
    UpdateEnumType update_type = 2; //更新类型
    repeated AuthorizationData local_authorization_list = 3; //授权列表
}

/**
 * SendLocalAuthorizationListConf
 * 发送本地授权.应答
 */
message SendLocalAuthorizationListConf
{
    enum Status {
        Accepted = 0;
        Rejected = 1;
    }
    Status status = 1;
}

/**
 * ReserveNowReq
 * 预约充电.请求
 */
message ReserveNowReq
{
    uint64 id = 1; //预约ID
    int64 expiry_date_time = 2; //过期时间
    string connector_id = 3; //枪ID
    IdToken idToken = 4; //客户信息
    string evse_id = 5;
}

/**
 * ReserveNowConf
 * 预约充电.响应
 */
message ReserveNowConf
{
    enum Status
    {
        Accepted = 0; //接受
        Faulted = 1; //未预约成功，枪故障
        Occupied = 2; //未预约成功，枪被占用
        Rejected = 3; //未预约成功，设备不支持预约功能
        Unavailable = 4; //未预约成功，枪不可用
    }
    Status status = 1; //状态
}

/**
 * CancelReservationReq
 * 取消预约充电.请求
 */
message CancelReservationReq
{
    int64 id = 1; //预约ID
}


/**
 * CancelReservationConf
 * 取消预约充电.响应
 */
message CancelReservationConf
{
    enum Status
    {
        Accepted = 0; //接受
        Rejected = 1; //未取消预约成功
    }
    Status status = 1; //状态
}

/**
 * DataTransferReq
 * 数据传输,请求
*/
message DataTransferReq {
    string vendor_id = 1; // 生产商 默认Joysonquin
    string message_id = 2; // 消息id 形如公司代号_功能名称_两位递增序列
    string data = 3;
}

message RemoteDiagnosisReq {
    string diagType = 1; // 22-read_data_by_identifier 2E-write_data_by_identifier 31-routine_control 14-clear_diagnostic_information 4-vehicle_passthrough
    string sendCanID = 2; // send canID
    string sendLength = 3;  // send data byte length
    string sendData = 4; // send data
    string recvCanID = 5; // receive canID
}

message RemoteDiagnosisResp {
    string canID = 1;
    string canLength = 2;
    string canData = 3;
}

message ReserveStopTransactionReq {
    int32 id = 1;
    int64 evseId = 2;
    int32 stopTime = 3;
    string expiryDateTime = 4;
    Token idToken = 5;
}
message Token {
    string idToken = 1;
    string type = 2;
}

/**
 * DataTransferConf
 * 数据传输,应答
*/
message DataTransferConf {
   enum Status {
       Accepted = 0;
       Rejected = 1;
   }
   Status status = 1;
   string response = 2;
}

message CancelReserveStopTransactionReq {
   int32 reservationId = 1;
}

message StatusNotificationReq {
    // 设备id 记住跟杨总的不一样
    string evseId = 1;
    // 枪id
    string connectorId = 2;
    // 枪状态
    int32 connectorState = 3;
}

message StatusNotificationConf {
    string connectorId = 1;
}

message GetReportReq {
    repeated ComponentType component = 1;
}



message GetReportConf {

}

message GetVariablesReq {
    repeated GetVariablesData getVariablesData = 1;
}

message GetVariablesData {
    ComponentType component = 1;
    VariableType variable = 2;
}


message GetVariablesConf {
    repeated GetVariablesResult getVariablesResult = 1;
}

message GetVariablesResult {
    GetVariablesResultStatus Status = 1;
    ComponentType component = 2;
    VariableType variable = 3;
    string  attributeValue = 4;
}

enum GetVariablesResultStatus {
    GetVariablesResultStatus_Accepted = 0;
    GetVariablesResultStatus_Rejected = 1;
}

message SetChargingProfileReq {
    string evseId = 1;
    string connectorId= 2;
    ChargingProfile chargingProfile = 3;
}

message ChargingProfile {
    enum Purpose {
        ChargingStationExternalConstraints = 0;
        ChargingStationMaxProfile = 1;
        TxDefaultProfile = 2;
        TxProfile = 3;
    }
    enum Status {
        Accepted = 0;
        Rejected = 1;
    }
    uint64 id = 1;
    string validFrom = 3;
    string validTo = 4;
    string transactionID = 5;
    string startTime = 6;
    repeated ChargingSchedule chargingSchedule = 7;
}

message ChargingSchedule {
    message PeriodType {
        int32 from = 1;
        int32 limit = 2;
        int32 to = 3;
    }
    ChargingRateUnit chargingRateUnit = 1;
    repeated PeriodType chargingSchedulePeriod = 2;
}

message SalesTariff {
    message Entry {
        uint32 ePriceLevel = 1;
        int32 start = 2; // 现在的时间 精确到秒
        int32 duration = 3;
        repeated ConsumptionCost consumptionCost = 4;
    }
    message ConsumptionCost {
       double startValue = 1;
       message Cost {
           enum Kind {
               CarbonDioxideEmission = 0;
               RelativePricePercentage = 1;
               RenewableGenerationPercentage = 2;
           }
           Kind kind = 1;
           int32 amount = 2;
           int32 amountMultiplier = 3;
       }
       repeated Cost cost = 2;
    }
    uint64 id = 1;
    string salesTariffDescription = 2;
    int32 numEPriceLevels = 3;
    repeated Entry entry = 4;
}

enum ChargingRateUnit {
    W = 0;
    A = 1;
    KW = 2;
}

message SetChargingProfileConf {
    ChargingProfile.Status status = 1;
}

message ClearChargingProfileReq {
    uint64 id = 1;
    ClearChargingProfile clearChargingProfile = 2;
}

message ClearChargingProfile {
    enum Status {
        Accepted = 0;
        Rejected = 1;
    }
    ChargingProfile.Purpose purpose = 1;
    int32 stackLevel = 2;
}

message ClearChargingProfileConf {
    ClearChargingProfile.Status status = 1;
}

message GetChargingProfilesReq {
    uint64 requestId = 1;
    ChargingProfilesCriterion criterion = 2;
}

message GetChargingProfilesConf {
    GetChargingProfilesStatus status = 1;
}

enum GetChargingProfilesStatus {
    Accepted = 0;
    Unknown = 1;
}

message ChargingProfilesCriterion {
    repeated uint64 id = 1;
}


message ReportChargingProfilesReq {
    bool tbc = 1;
    repeated ChargingProfile chargingProfile = 2;
}

message ReportChargingProfilesConf {

}

message MeterValuesReq {
    string evseId = 1;
    string connectorId = 2;
    string transactionId = 3;
    int64 timestamp = 4;
    double electricity = 5;
    double currentA = 6;
    double currentB = 7;
    double currentC = 8;
    double voltageA = 9;
    double voltageB = 10;
    double voltageC = 11;
    double power = 12;
    double tempEvse = 13;
    double tempBattery = 14;
    uint32 soc = 15;
}

message ReservationStatusUpdateReq {
   uint64 id = 1;
   ReservationStatusUpdate status = 2;
}

enum ReservationStatusUpdate {
    Expired = 0;
    Removed = 1;
}

message ReservationStatusUpdateConf {

}

message SignCertificateReq {
   string csr = 1;
}

message SignCertificateConf {
    enum Status {
        Accepted = 0;
        Rejected = 1;
    }
    Status status = 1;
}

message ChangeAvailabilityReq {
    bool enabled = 1;
    string evseId = 2;
    string connectorId = 3;
}

message ChangeAvailabilityConf {
    enum Status {
        Accepted = 0;
        Rejected = 1;
    }
    Status status = 1;
}

//message CustomerInformationReq {
//    uint64 requestId = 1;
//    uint64 customerId = 2;
//    IdToken idToken = 3;
//}
//
//message CustomerInformationConf {
//    enum Status {
//        Accepted = 0;
//        Rejected = 1;
//        Invalid = 2;
//    }
//    Status status = 1;
//}

message InstallCertificateReq {
    string certificate = 1;
}

message InstallCertificateConf {
    enum Status {
        Accepted = 0;
        Rejected = 1;
        Failed = 2;
    }
    Status status = 1;
}


message Tariff {
    int64 id = 1; // 计费模版id
   double sharp = 2; // 尖
   double peak = 3; //  峰
   double flat = 4; // 平
   double valley = 5; // 谷
}

message CurrentChargingProfile {
    int64 id = 1;
    int32 limit = 2;
    ChargingRateUnit unit = 3;
}

message ClearCacheReq {

}

message ClearCacheConf {
    enum Status {
        Accepted = 0;
        Rejected = 1;
    }
    Status status = 1;
}

message SetPriceSchemeReq {

}

message SetPriceSchemeConf {
    int64 tariffId = 1;
    int64 baseTime = 2;
    repeated ChargeTariff chargeTariffs = 3;
}

message ChargeTariff {
    int32 timeStart = 1;
    int32 tag = 2;
}