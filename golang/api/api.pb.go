// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: api.proto

// api 对外接口定义
// requestid 和 callerid 通过ctx传过来

package api

import (
	context "context"
	common "github.com/Kotodian/protocol/golang/common"
	coregw "github.com/Kotodian/protocol/golang/coregw"
	customer "github.com/Kotodian/protocol/golang/customer"
	charger "github.com/Kotodian/protocol/golang/hardware/charger"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of charger/charger.proto.

type MessageID = charger.MessageID

const MessageID_ID_None = charger.MessageID_ID_None
const MessageID_ID_BootNotificationReq = charger.MessageID_ID_BootNotificationReq
const MessageID_ID_HeartbeatReq = charger.MessageID_ID_HeartbeatReq
const MessageID_ID_ChangeConfigurationReq = charger.MessageID_ID_ChangeConfigurationReq
const MessageID_ID_GetConfigurationReq = charger.MessageID_ID_GetConfigurationReq
const MessageID_ID_RemoteControlReq = charger.MessageID_ID_RemoteControlReq
const MessageID_ID_UpdateFirmwareReq = charger.MessageID_ID_UpdateFirmwareReq
const MessageID_ID_FirmwareStatusNotificationReq = charger.MessageID_ID_FirmwareStatusNotificationReq
const MessageID_ID_GetDiagnosticsReq = charger.MessageID_ID_GetDiagnosticsReq
const MessageID_ID_DiagnosticsStatusNotificationReq = charger.MessageID_ID_DiagnosticsStatusNotificationReq
const MessageID_ID_DeviceRegistrationReq = charger.MessageID_ID_DeviceRegistrationReq
const MessageID_ID_GetReportReq = charger.MessageID_ID_GetReportReq
const MessageID_ID_GetVariablesReq = charger.MessageID_ID_GetVariablesReq
const MessageID_ID_RemoteStartTransactionReq = charger.MessageID_ID_RemoteStartTransactionReq
const MessageID_ID_RemoteStopTransactionReq = charger.MessageID_ID_RemoteStopTransactionReq
const MessageID_ID_StartTransactionReq = charger.MessageID_ID_StartTransactionReq
const MessageID_ID_StopTransactionReq = charger.MessageID_ID_StopTransactionReq
const MessageID_ID_AuthorizeReq = charger.MessageID_ID_AuthorizeReq
const MessageID_ID_ReserveNowReq = charger.MessageID_ID_ReserveNowReq
const MessageID_ID_CancelReservationReq = charger.MessageID_ID_CancelReservationReq
const MessageID_ID_UpdateIdCardCacheReq = charger.MessageID_ID_UpdateIdCardCacheReq
const MessageID_ID_StatusNotificationReq = charger.MessageID_ID_StatusNotificationReq
const MessageID_ID_TelemetryReq = charger.MessageID_ID_TelemetryReq
const MessageID_ID_ChargingInfoReq = charger.MessageID_ID_ChargingInfoReq
const MessageID_ID_TriggerMessageReq = charger.MessageID_ID_TriggerMessageReq
const MessageID_ID_GetTransactionsReq = charger.MessageID_ID_GetTransactionsReq
const MessageID_ID_TransactionReq = charger.MessageID_ID_TransactionReq
const MessageID_ID_GetWarningReq = charger.MessageID_ID_GetWarningReq
const MessageID_ID_WarningReq = charger.MessageID_ID_WarningReq
const MessageID_ID_SetTariffReq = charger.MessageID_ID_SetTariffReq
const MessageID_ID_GetBaseReportReq = charger.MessageID_ID_GetBaseReportReq
const MessageID_ID_NotifyReportReq = charger.MessageID_ID_NotifyReportReq
const MessageID_ID_SetVariablesReq = charger.MessageID_ID_SetVariablesReq
const MessageID_ID_GetLogReq = charger.MessageID_ID_GetLogReq
const MessageID_ID_LogStatusNotificationReq = charger.MessageID_ID_LogStatusNotificationReq
const MessageID_ID_SendLocalAuthorizationListReq = charger.MessageID_ID_SendLocalAuthorizationListReq
const MessageID_ID_DataTransferReq = charger.MessageID_ID_DataTransferReq
const MessageID_ID_BootNotificationConf = charger.MessageID_ID_BootNotificationConf
const MessageID_ID_HeartbeatConf = charger.MessageID_ID_HeartbeatConf
const MessageID_ID_ChangeConfigurationConf = charger.MessageID_ID_ChangeConfigurationConf
const MessageID_ID_GetConfigurationConf = charger.MessageID_ID_GetConfigurationConf
const MessageID_ID_RemoteControlConf = charger.MessageID_ID_RemoteControlConf
const MessageID_ID_UpdateFirmwareConf = charger.MessageID_ID_UpdateFirmwareConf
const MessageID_ID_FirmwareStatusNotificationConf = charger.MessageID_ID_FirmwareStatusNotificationConf
const MessageID_ID_GetDiagnosticsConf = charger.MessageID_ID_GetDiagnosticsConf
const MessageID_ID_DeviceRegistrationConf = charger.MessageID_ID_DeviceRegistrationConf
const MessageID_ID_GetReportConf = charger.MessageID_ID_GetReportConf
const MessageID_ID_GetVariablesConf = charger.MessageID_ID_GetVariablesConf
const MessageID_ID_RemoteStartTransactionConf = charger.MessageID_ID_RemoteStartTransactionConf
const MessageID_ID_RemoteStopTransactionConf = charger.MessageID_ID_RemoteStopTransactionConf
const MessageID_ID_StartTransactionConf = charger.MessageID_ID_StartTransactionConf
const MessageID_ID_StopTransactionConf = charger.MessageID_ID_StopTransactionConf
const MessageID_ID_AuthorizeConf = charger.MessageID_ID_AuthorizeConf
const MessageID_ID_ReserveNowConf = charger.MessageID_ID_ReserveNowConf
const MessageID_ID_CancelReservationConf = charger.MessageID_ID_CancelReservationConf
const MessageID_ID_UpdateIdCardCacheConf = charger.MessageID_ID_UpdateIdCardCacheConf
const MessageID_ID_GetTransactionsConf = charger.MessageID_ID_GetTransactionsConf
const MessageID_ID_TransactionConf = charger.MessageID_ID_TransactionConf
const MessageID_ID_GetWarningConf = charger.MessageID_ID_GetWarningConf
const MessageID_ID_WarningConf = charger.MessageID_ID_WarningConf
const MessageID_ID_SetTariffConf = charger.MessageID_ID_SetTariffConf
const MessageID_ID_GetBaseReportConf = charger.MessageID_ID_GetBaseReportConf
const MessageID_ID_NotifyReportConf = charger.MessageID_ID_NotifyReportConf
const MessageID_ID_SetVariablesConf = charger.MessageID_ID_SetVariablesConf
const MessageID_ID_GetLogConf = charger.MessageID_ID_GetLogConf
const MessageID_ID_LogStatusNotificationConf = charger.MessageID_ID_LogStatusNotificationConf
const MessageID_ID_SendLocalAuthorizationListConf = charger.MessageID_ID_SendLocalAuthorizationListConf
const MessageID_ID_DataTransferConf = charger.MessageID_ID_DataTransferConf
const MessageID_ID_MessageError = charger.MessageID_ID_MessageError

var MessageID_name = charger.MessageID_name
var MessageID_value = charger.MessageID_value

type ErrorCode = charger.ErrorCode

const ErrorCode_EC_GenericError = charger.ErrorCode_EC_GenericError
const ErrorCode_EC_NotSupported = charger.ErrorCode_EC_NotSupported
const ErrorCode_EC_InternalError = charger.ErrorCode_EC_InternalError
const ErrorCode_EC_ProtocolError = charger.ErrorCode_EC_ProtocolError
const ErrorCode_EC_TypeViolation = charger.ErrorCode_EC_TypeViolation

var ErrorCode_name = charger.ErrorCode_name
var ErrorCode_value = charger.ErrorCode_value

type ConfigurationStatus = charger.ConfigurationStatus

const ConfigurationStatus_CFS_Accepted = charger.ConfigurationStatus_CFS_Accepted
const ConfigurationStatus_CFS_Rejected = charger.ConfigurationStatus_CFS_Rejected
const ConfigurationStatus_CFS_RebootRequired = charger.ConfigurationStatus_CFS_RebootRequired
const ConfigurationStatus_CFS_NotSupported = charger.ConfigurationStatus_CFS_NotSupported

var ConfigurationStatus_name = charger.ConfigurationStatus_name
var ConfigurationStatus_value = charger.ConfigurationStatus_value

type DiagnosticsStatus = charger.DiagnosticsStatus

const DiagnosticsStatus_DGS_Idle = charger.DiagnosticsStatus_DGS_Idle
const DiagnosticsStatus_DGS_Accepted = charger.DiagnosticsStatus_DGS_Accepted
const DiagnosticsStatus_DGS_Uploading = charger.DiagnosticsStatus_DGS_Uploading
const DiagnosticsStatus_DGS_Uploaded = charger.DiagnosticsStatus_DGS_Uploaded
const DiagnosticsStatus_DGS_UploadFailed = charger.DiagnosticsStatus_DGS_UploadFailed

var DiagnosticsStatus_name = charger.DiagnosticsStatus_name
var DiagnosticsStatus_value = charger.DiagnosticsStatus_value

type FirmwareStatus = charger.FirmwareStatus

const FirmwareStatus_FW_Idle = charger.FirmwareStatus_FW_Idle
const FirmwareStatus_FW_Pending = charger.FirmwareStatus_FW_Pending
const FirmwareStatus_FW_DownloadScheduled = charger.FirmwareStatus_FW_DownloadScheduled
const FirmwareStatus_FW_Downloading = charger.FirmwareStatus_FW_Downloading
const FirmwareStatus_FW_DownloadPaused = charger.FirmwareStatus_FW_DownloadPaused
const FirmwareStatus_FW_Downloaded = charger.FirmwareStatus_FW_Downloaded
const FirmwareStatus_FW_SignatureVerified = charger.FirmwareStatus_FW_SignatureVerified
const FirmwareStatus_FW_InstallScheduled = charger.FirmwareStatus_FW_InstallScheduled
const FirmwareStatus_FW_Installing = charger.FirmwareStatus_FW_Installing
const FirmwareStatus_FW_Installed = charger.FirmwareStatus_FW_Installed
const FirmwareStatus_FW_InstallRebooting = charger.FirmwareStatus_FW_InstallRebooting
const FirmwareStatus_FW_InstallationFailed = charger.FirmwareStatus_FW_InstallationFailed
const FirmwareStatus_FW_InstallVerificationFailed = charger.FirmwareStatus_FW_InstallVerificationFailed
const FirmwareStatus_FW_InvalidSignature = charger.FirmwareStatus_FW_InvalidSignature
const FirmwareStatus_FW_DownloadFailed = charger.FirmwareStatus_FW_DownloadFailed

var FirmwareStatus_name = charger.FirmwareStatus_name
var FirmwareStatus_value = charger.FirmwareStatus_value

type IdType = charger.IdType

const IdType_ID_DEFAULT = charger.IdType_ID_DEFAULT
const IdType_ID_AUTH_CARD = charger.IdType_ID_AUTH_CARD
const IdType_ID_WALLET_CARD = charger.IdType_ID_WALLET_CARD

var IdType_name = charger.IdType_name
var IdType_value = charger.IdType_value

type CardType = charger.CardType

const CardType_CARD_DEFAULT = charger.CardType_CARD_DEFAULT
const CardType_CARD_BALANCE = charger.CardType_CARD_BALANCE
const CardType_CARD_TIME = charger.CardType_CARD_TIME
const CardType_CARD_COUNT = charger.CardType_CARD_COUNT

var CardType_name = charger.CardType_name
var CardType_value = charger.CardType_value

type AuthorizationStatus = charger.AuthorizationStatus

const AuthorizationStatus_AS_Accepted = charger.AuthorizationStatus_AS_Accepted
const AuthorizationStatus_AS_Blocked = charger.AuthorizationStatus_AS_Blocked
const AuthorizationStatus_AS_Expired = charger.AuthorizationStatus_AS_Expired
const AuthorizationStatus_AS_Invalid = charger.AuthorizationStatus_AS_Invalid
const AuthorizationStatus_AS_ConcurrentTx = charger.AuthorizationStatus_AS_ConcurrentTx
const AuthorizationStatus_AS_Insufficient = charger.AuthorizationStatus_AS_Insufficient
const AuthorizationStatus_AS_PasswordError = charger.AuthorizationStatus_AS_PasswordError
const AuthorizationStatus_AS_SystemError = charger.AuthorizationStatus_AS_SystemError
const AuthorizationStatus_AS_NoCredit = charger.AuthorizationStatus_AS_NoCredit
const AuthorizationStatus_AS_NotAllowedTypeEVSE = charger.AuthorizationStatus_AS_NotAllowedTypeEVSE
const AuthorizationStatus_AS_NotAtThisLocation = charger.AuthorizationStatus_AS_NotAtThisLocation
const AuthorizationStatus_AS_NotAtThisTime = charger.AuthorizationStatus_AS_NotAtThisTime
const AuthorizationStatus_AS_Unknown = charger.AuthorizationStatus_AS_Unknown

var AuthorizationStatus_name = charger.AuthorizationStatus_name
var AuthorizationStatus_value = charger.AuthorizationStatus_value

type AuthorizationMode = charger.AuthorizationMode

const AuthorizationMode_AM_LocalPlug = charger.AuthorizationMode_AM_LocalPlug
const AuthorizationMode_AM_LocalAdmin = charger.AuthorizationMode_AM_LocalAdmin
const AuthorizationMode_AM_LocalIdentityCard = charger.AuthorizationMode_AM_LocalIdentityCard
const AuthorizationMode_AM_OnlineIdentityCard = charger.AuthorizationMode_AM_OnlineIdentityCard
const AuthorizationMode_AM_LocalWalletCard = charger.AuthorizationMode_AM_LocalWalletCard
const AuthorizationMode_AM_LocalVIN = charger.AuthorizationMode_AM_LocalVIN
const AuthorizationMode_AM_OnlineVIN = charger.AuthorizationMode_AM_OnlineVIN
const AuthorizationMode_AM_Bluetooth = charger.AuthorizationMode_AM_Bluetooth
const AuthorizationMode_AM_MAC = charger.AuthorizationMode_AM_MAC
const AuthorizationMode_AM_RemoteAdmin = charger.AuthorizationMode_AM_RemoteAdmin
const AuthorizationMode_AM_RemoteUser = charger.AuthorizationMode_AM_RemoteUser

var AuthorizationMode_name = charger.AuthorizationMode_name
var AuthorizationMode_value = charger.AuthorizationMode_value

type ServiceMode = charger.ServiceMode

const ServiceMode_SM_AutoCharge = charger.ServiceMode_SM_AutoCharge
const ServiceMode_SM_ChargeByElec = charger.ServiceMode_SM_ChargeByElec
const ServiceMode_SM_ChargeByTime = charger.ServiceMode_SM_ChargeByTime
const ServiceMode_SM_ChargeByMoney = charger.ServiceMode_SM_ChargeByMoney
const ServiceMode_SM_DischargeByElec = charger.ServiceMode_SM_DischargeByElec
const ServiceMode_SM_AutoDischarge = charger.ServiceMode_SM_AutoDischarge

var ServiceMode_name = charger.ServiceMode_name
var ServiceMode_value = charger.ServiceMode_value

type StopReason = charger.StopReason

const StopReason_SR_Normal = charger.StopReason_SR_Normal
const StopReason_SR_LocalCard = charger.StopReason_SR_LocalCard
const StopReason_SR_LocalPIN = charger.StopReason_SR_LocalPIN
const StopReason_SR_RemoteUser = charger.StopReason_SR_RemoteUser
const StopReason_SR_RemoteAdmin = charger.StopReason_SR_RemoteAdmin
const StopReason_SR_EmergencyStop = charger.StopReason_SR_EmergencyStop
const StopReason_SR_EVDisconnected = charger.StopReason_SR_EVDisconnected
const StopReason_SR_Reboot = charger.StopReason_SR_Reboot
const StopReason_SR_OffLine = charger.StopReason_SR_OffLine
const StopReason_SR_PowerLoss = charger.StopReason_SR_PowerLoss
const StopReason_SR_SystemFault = charger.StopReason_SR_SystemFault
const StopReason_SR_BMSFault = charger.StopReason_SR_BMSFault
const StopReason_SR_Other = charger.StopReason_SR_Other
const StopReason_SR_MeterFault = charger.StopReason_SR_MeterFault
const StopReason_SR_SocFull = charger.StopReason_SR_SocFull
const StopReason_SR_NotEnoughMoney = charger.StopReason_SR_NotEnoughMoney
const StopReason_SR_OverLoad = charger.StopReason_SR_OverLoad
const StopReason_SR_OverVoltage = charger.StopReason_SR_OverVoltage
const StopReason_SR_UnderVoltage = charger.StopReason_SR_UnderVoltage
const StopReason_SR_NetTimeout = charger.StopReason_SR_NetTimeout
const StopReason_SR_OverTime = charger.StopReason_SR_OverTime
const StopReason_SR_OverMeter = charger.StopReason_SR_OverMeter
const StopReason_SR_OverSOC = charger.StopReason_SR_OverSOC
const StopReason_SR_CPError = charger.StopReason_SR_CPError
const StopReason_SR_Leakage = charger.StopReason_SR_Leakage
const StopReason_SR_FullOfSelfStop = charger.StopReason_SR_FullOfSelfStop
const StopReason_SR_AdminForceStop = charger.StopReason_SR_AdminForceStop
const StopReason_SR_EVOccupy = charger.StopReason_SR_EVOccupy
const StopReason_SR_NoTariff = charger.StopReason_SR_NoTariff
const StopReason_SR_ConnectorFault = charger.StopReason_SR_ConnectorFault
const StopReason_SR_CC1NoConnect = charger.StopReason_SR_CC1NoConnect
const StopReason_SR_Deauthorized = charger.StopReason_SR_Deauthorized
const StopReason_SR_EVConnectTimeout = charger.StopReason_SR_EVConnectTimeout
const StopReason_SR_Server_Error = charger.StopReason_SR_Server_Error

var StopReason_name = charger.StopReason_name
var StopReason_value = charger.StopReason_value

type BatteryType = charger.BatteryType

const BatteryType_BAT_Unkown = charger.BatteryType_BAT_Unkown
const BatteryType_BAT_LeadAcid = charger.BatteryType_BAT_LeadAcid
const BatteryType_BAT_NiMH = charger.BatteryType_BAT_NiMH
const BatteryType_BAT_LFP = charger.BatteryType_BAT_LFP
const BatteryType_BAT_LMO = charger.BatteryType_BAT_LMO
const BatteryType_BAT_LCO = charger.BatteryType_BAT_LCO
const BatteryType_BAT_NCM = charger.BatteryType_BAT_NCM
const BatteryType_BAT_LIB = charger.BatteryType_BAT_LIB
const BatteryType_BAT_LTO = charger.BatteryType_BAT_LTO
const BatteryType_BAT_Other = charger.BatteryType_BAT_Other

var BatteryType_name = charger.BatteryType_name
var BatteryType_value = charger.BatteryType_value

type BMSChargingType = charger.BMSChargingType

const BMSChargingType_BMS_None = charger.BMSChargingType_BMS_None
const BMSChargingType_BMS_ConstantVoltage = charger.BMSChargingType_BMS_ConstantVoltage
const BMSChargingType_BMS_ConstantCurrent = charger.BMSChargingType_BMS_ConstantCurrent

var BMSChargingType_name = charger.BMSChargingType_name
var BMSChargingType_value = charger.BMSChargingType_value

type BMSMeasureStatus = charger.BMSMeasureStatus

const BMSMeasureStatus_BMSM_Normal = charger.BMSMeasureStatus_BMSM_Normal
const BMSMeasureStatus_BMSM_OverLevel = charger.BMSMeasureStatus_BMSM_OverLevel
const BMSMeasureStatus_BMSM_UnderLevel = charger.BMSMeasureStatus_BMSM_UnderLevel

var BMSMeasureStatus_name = charger.BMSMeasureStatus_name
var BMSMeasureStatus_value = charger.BMSMeasureStatus_value

type BMSTelesignalStatus = charger.BMSTelesignalStatus

const BMSTelesignalStatus_BMST_Normal = charger.BMSTelesignalStatus_BMST_Normal
const BMSTelesignalStatus_BMST_Abnormal = charger.BMSTelesignalStatus_BMST_Abnormal
const BMSTelesignalStatus_BMST_Unknown = charger.BMSTelesignalStatus_BMST_Unknown

var BMSTelesignalStatus_name = charger.BMSTelesignalStatus_name
var BMSTelesignalStatus_value = charger.BMSTelesignalStatus_value

type ChargerStatus = charger.ChargerStatus

const ChargerStatus_CHS_Idle = charger.ChargerStatus_CHS_Idle
const ChargerStatus_CHS_EVConnected = charger.ChargerStatus_CHS_EVConnected
const ChargerStatus_CHS_Charging = charger.ChargerStatus_CHS_Charging
const ChargerStatus_CHS_SuspendedEV = charger.ChargerStatus_CHS_SuspendedEV
const ChargerStatus_CHS_SuspendedEVSE = charger.ChargerStatus_CHS_SuspendedEVSE

var ChargerStatus_name = charger.ChargerStatus_name
var ChargerStatus_value = charger.ChargerStatus_value

type Components = charger.Components

const Components_CP_None = charger.Components_CP_None
const Components_CP_System = charger.Components_CP_System
const Components_CP_TCU = charger.Components_CP_TCU
const Components_CP_CCM = charger.Components_CP_CCM
const Components_CP_BMS = charger.Components_CP_BMS
const Components_CP_PKL = charger.Components_CP_PKL
const Components_CP_PKD = charger.Components_CP_PKD
const Components_CP_Meter = charger.Components_CP_Meter
const Components_CP_LCD = charger.Components_CP_LCD
const Components_CP_CardReader = charger.Components_CP_CardReader
const Components_CP_Fan = charger.Components_CP_Fan
const Components_CP_Connector = charger.Components_CP_Connector
const Components_CP_PSM = charger.Components_CP_PSM

var Components_name = charger.Components_name
var Components_value = charger.Components_value

type WarningLevel = charger.WarningLevel

const WarningLevel_WL_Critical = charger.WarningLevel_WL_Critical
const WarningLevel_WL_Alert = charger.WarningLevel_WL_Alert
const WarningLevel_WL_Warning = charger.WarningLevel_WL_Warning
const WarningLevel_WL_Notice = charger.WarningLevel_WL_Notice
const WarningLevel_WL_Info = charger.WarningLevel_WL_Info
const WarningLevel_WL_Hardware = charger.WarningLevel_WL_Hardware
const WarningLevel_WL_SYSTEM = charger.WarningLevel_WL_SYSTEM

var WarningLevel_name = charger.WarningLevel_name
var WarningLevel_value = charger.WarningLevel_value

type IdTokenEnumType = charger.IdTokenEnumType

const IdTokenEnumType_ITE_Central = charger.IdTokenEnumType_ITE_Central
const IdTokenEnumType_ITE_eMAID = charger.IdTokenEnumType_ITE_eMAID
const IdTokenEnumType_ITE_ISO14443 = charger.IdTokenEnumType_ITE_ISO14443
const IdTokenEnumType_ITE_ISO15693 = charger.IdTokenEnumType_ITE_ISO15693
const IdTokenEnumType_ITE_KeyCode = charger.IdTokenEnumType_ITE_KeyCode
const IdTokenEnumType_ITE_Local = charger.IdTokenEnumType_ITE_Local
const IdTokenEnumType_ITE_MacAddress = charger.IdTokenEnumType_ITE_MacAddress
const IdTokenEnumType_ITE_NoAuthorization = charger.IdTokenEnumType_ITE_NoAuthorization

var IdTokenEnumType_name = charger.IdTokenEnumType_name
var IdTokenEnumType_value = charger.IdTokenEnumType_value

type UpdateFirmwareConf_Status = charger.UpdateFirmwareConf_Status

const UpdateFirmwareConf_Accepted = charger.UpdateFirmwareConf_Accepted
const UpdateFirmwareConf_Rejected = charger.UpdateFirmwareConf_Rejected
const UpdateFirmwareConf_AcceptedCanceled = charger.UpdateFirmwareConf_AcceptedCanceled
const UpdateFirmwareConf_InvalidCertificate = charger.UpdateFirmwareConf_InvalidCertificate
const UpdateFirmwareConf_RevokedCertificate = charger.UpdateFirmwareConf_RevokedCertificate

var UpdateFirmwareConf_Status_name = charger.UpdateFirmwareConf_Status_name
var UpdateFirmwareConf_Status_value = charger.UpdateFirmwareConf_Status_value

type GetBaseReportReq_ReportBaseEnumType = charger.GetBaseReportReq_ReportBaseEnumType

const GetBaseReportReq_ConfigurationInventory = charger.GetBaseReportReq_ConfigurationInventory
const GetBaseReportReq_FullInventory = charger.GetBaseReportReq_FullInventory
const GetBaseReportReq_SummaryInventory = charger.GetBaseReportReq_SummaryInventory

var GetBaseReportReq_ReportBaseEnumType_name = charger.GetBaseReportReq_ReportBaseEnumType_name
var GetBaseReportReq_ReportBaseEnumType_value = charger.GetBaseReportReq_ReportBaseEnumType_value

type GetLogReq_LogType = charger.GetLogReq_LogType

const GetLogReq_DiagnosticsLog = charger.GetLogReq_DiagnosticsLog
const GetLogReq_SecurityLog = charger.GetLogReq_SecurityLog

var GetLogReq_LogType_name = charger.GetLogReq_LogType_name
var GetLogReq_LogType_value = charger.GetLogReq_LogType_value

type GetLogConf_LogStatusEnumType = charger.GetLogConf_LogStatusEnumType

const GetLogConf_Accepted = charger.GetLogConf_Accepted
const GetLogConf_Rejected = charger.GetLogConf_Rejected
const GetLogConf_AcceptedCanceled = charger.GetLogConf_AcceptedCanceled

var GetLogConf_LogStatusEnumType_name = charger.GetLogConf_LogStatusEnumType_name
var GetLogConf_LogStatusEnumType_value = charger.GetLogConf_LogStatusEnumType_value

type LogStatusNotificationReq_UploadLogStatusEnumType = charger.LogStatusNotificationReq_UploadLogStatusEnumType

const LogStatusNotificationReq_BadMessage = charger.LogStatusNotificationReq_BadMessage
const LogStatusNotificationReq_Idle = charger.LogStatusNotificationReq_Idle
const LogStatusNotificationReq_NotSupportedOperation = charger.LogStatusNotificationReq_NotSupportedOperation
const LogStatusNotificationReq_PermissionDenied = charger.LogStatusNotificationReq_PermissionDenied
const LogStatusNotificationReq_Uploaded = charger.LogStatusNotificationReq_Uploaded
const LogStatusNotificationReq_UploadFailure = charger.LogStatusNotificationReq_UploadFailure
const LogStatusNotificationReq_Uploading = charger.LogStatusNotificationReq_Uploading
const LogStatusNotificationReq_AcceptedCanceled = charger.LogStatusNotificationReq_AcceptedCanceled

var LogStatusNotificationReq_UploadLogStatusEnumType_name = charger.LogStatusNotificationReq_UploadLogStatusEnumType_name
var LogStatusNotificationReq_UploadLogStatusEnumType_value = charger.LogStatusNotificationReq_UploadLogStatusEnumType_value

type SendLocalAuthorizationListReq_UpdateEnumType = charger.SendLocalAuthorizationListReq_UpdateEnumType

const SendLocalAuthorizationListReq_Differential = charger.SendLocalAuthorizationListReq_Differential
const SendLocalAuthorizationListReq_Full = charger.SendLocalAuthorizationListReq_Full

var SendLocalAuthorizationListReq_UpdateEnumType_name = charger.SendLocalAuthorizationListReq_UpdateEnumType_name
var SendLocalAuthorizationListReq_UpdateEnumType_value = charger.SendLocalAuthorizationListReq_UpdateEnumType_value

type ReserveNowConf_Status = charger.ReserveNowConf_Status

const ReserveNowConf_Accepted = charger.ReserveNowConf_Accepted
const ReserveNowConf_Faulted = charger.ReserveNowConf_Faulted
const ReserveNowConf_Occupied = charger.ReserveNowConf_Occupied
const ReserveNowConf_Rejected = charger.ReserveNowConf_Rejected
const ReserveNowConf_Unavailable = charger.ReserveNowConf_Unavailable

var ReserveNowConf_Status_name = charger.ReserveNowConf_Status_name
var ReserveNowConf_Status_value = charger.ReserveNowConf_Status_value

type CancelReservationConf_Status = charger.CancelReservationConf_Status

const CancelReservationConf_Accepted = charger.CancelReservationConf_Accepted
const CancelReservationConf_Rejected = charger.CancelReservationConf_Rejected

var CancelReservationConf_Status_name = charger.CancelReservationConf_Status_name
var CancelReservationConf_Status_value = charger.CancelReservationConf_Status_value

type APDU = charger.APDU
type MessageError = charger.MessageError
type BootNotificationReq = charger.BootNotificationReq
type BootNotificationConf = charger.BootNotificationConf
type KeyValue = charger.KeyValue
type ChangeConfigurationReq = charger.ChangeConfigurationReq
type ChangeConfigurationConf = charger.ChangeConfigurationConf
type GetConfigurationReq = charger.GetConfigurationReq
type GetConfigurationConf = charger.GetConfigurationConf
type RemoteControlReq = charger.RemoteControlReq
type RemoteControlConf = charger.RemoteControlConf
type UpdateFirmwareReq = charger.UpdateFirmwareReq
type UpdateFirmwareConf = charger.UpdateFirmwareConf
type FirmwareStatusNotificationReq = charger.FirmwareStatusNotificationReq
type FirmwareStatusNotificationConf = charger.FirmwareStatusNotificationConf
type GetDiagnosticsReq = charger.GetDiagnosticsReq
type GetDiagnosticsConf = charger.GetDiagnosticsConf
type DiagnosticsStatusNotificationReq = charger.DiagnosticsStatusNotificationReq
type DeviceRegistrationReq = charger.DeviceRegistrationReq
type DeviceRegistrationConf = charger.DeviceRegistrationConf
type TriggerMessageReq = charger.TriggerMessageReq
type TariffTime = charger.TariffTime
type TariffCharge = charger.TariffCharge
type TariffParking = charger.TariffParking
type CostBill = charger.CostBill
type Cost = charger.Cost
type TariffChannel = charger.TariffChannel
type SetTariffReq = charger.SetTariffReq
type SetTariffConf = charger.SetTariffConf
type IdToken = charger.IdToken
type AuthorizeReq = charger.AuthorizeReq
type AuthorizeConf = charger.AuthorizeConf
type UpdateIdCardCacheReq = charger.UpdateIdCardCacheReq
type HeartbeatReq = charger.HeartbeatReq
type HeartbeatResp = charger.HeartbeatResp
type RemoteStartTransactionReq = charger.RemoteStartTransactionReq
type RemoteStartTransactionConf = charger.RemoteStartTransactionConf
type RemoteStopTransactionReq = charger.RemoteStopTransactionReq
type RemoteStopTransactionConf = charger.RemoteStopTransactionConf
type StartTransactionReq = charger.StartTransactionReq
type StartTransactionConf = charger.StartTransactionConf
type StopTransactionReq = charger.StopTransactionReq
type StopTransactionConf = charger.StopTransactionConf
type BMSHandshakeInfo = charger.BMSHandshakeInfo
type BMSConfigInfo = charger.BMSConfigInfo
type BMSChargingInfo = charger.BMSChargingInfo
type BMSChargedInfo = charger.BMSChargedInfo
type Cell = charger.Cell
type ChargingInfoReq = charger.ChargingInfoReq
type TransactionReq = charger.TransactionReq
type TransactionConf = charger.TransactionConf
type SampledValue = charger.SampledValue
type TelemetryReq = charger.TelemetryReq
type WarningReq = charger.WarningReq
type WarningConf = charger.WarningConf
type GetTransactionsReq = charger.GetTransactionsReq
type GetTransactionsConf = charger.GetTransactionsConf
type GetWarningReq = charger.GetWarningReq
type GetWarningConf = charger.GetWarningConf
type GetBaseReportConf = charger.GetBaseReportConf
type GetBaseReportReq = charger.GetBaseReportReq
type NotifyReportReq = charger.NotifyReportReq
type ReportDataType = charger.ReportDataType
type ComponentType = charger.ComponentType
type VariableType = charger.VariableType
type VariableAttributeType = charger.VariableAttributeType
type NotifyReportConf = charger.NotifyReportConf
type SetVariablesReq = charger.SetVariablesReq
type SetVariablesConf = charger.SetVariablesConf
type GetLogReq = charger.GetLogReq
type GetLogConf = charger.GetLogConf
type LogStatusNotificationReq = charger.LogStatusNotificationReq
type LogStatusNotificationConf = charger.LogStatusNotificationConf
type GetLocalListVersionReq = charger.GetLocalListVersionReq
type GetLocalListVersionConf = charger.GetLocalListVersionConf
type IdTokenInfoType = charger.IdTokenInfoType
type IdTokenType = charger.IdTokenType
type AuthorizationData = charger.AuthorizationData
type SendLocalAuthorizationListReq = charger.SendLocalAuthorizationListReq
type SendLocalAuthorizationListConf = charger.SendLocalAuthorizationListConf
type ReserveNowReq = charger.ReserveNowReq
type ReserveNowConf = charger.ReserveNowConf
type CancelReservationReq = charger.CancelReservationReq
type CancelReservationConf = charger.CancelReservationConf
type DataTransferReq = charger.DataTransferReq
type RemoteDiagnosisReq = charger.RemoteDiagnosisReq
type RemoteDiagnosisResp = charger.RemoteDiagnosisResp
type ReserveStopTransactionReq = charger.ReserveStopTransactionReq
type Token = charger.Token
type DataTransferConf = charger.DataTransferConf
type CancelReserveStopTransactionReq = charger.CancelReserveStopTransactionReq
type StatusNotificationReq = charger.StatusNotificationReq
type GetReportReq = charger.GetReportReq
type GetReportConf = charger.GetReportConf
type GetVariablesReq = charger.GetVariablesReq
type GetVariablesData = charger.GetVariablesData
type GetVariablesConf = charger.GetVariablesConf
type GetVariablesResult = charger.GetVariablesResult
type SetVariablesReq_SetVariableData = charger.SetVariablesReq_SetVariableData
type GetLogReq_LogParametersType = charger.GetLogReq_LogParametersType

type BannerType int32

const (
	BannerType_BannerTypeLink BannerType = 0 // 跳转详情
)

// Enum value maps for BannerType.
var (
	BannerType_name = map[int32]string{
		0: "BannerTypeLink",
	}
	BannerType_value = map[string]int32{
		"BannerTypeLink": 0,
	}
)

func (x BannerType) Enum() *BannerType {
	p := new(BannerType)
	*p = x
	return p
}

func (x BannerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BannerType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (BannerType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x BannerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BannerType.Descriptor instead.
func (BannerType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type BannerLoc int32

const (
	BannerLoc_BannerLocHome     BannerLoc = 0 // 首页，
	BannerLoc_BannerLocCharging BannerLoc = 1 // 充电中，
	BannerLoc_BannerLocEvse     BannerLoc = 2 // 桩详情
)

// Enum value maps for BannerLoc.
var (
	BannerLoc_name = map[int32]string{
		0: "BannerLocHome",
		1: "BannerLocCharging",
		2: "BannerLocEvse",
	}
	BannerLoc_value = map[string]int32{
		"BannerLocHome":     0,
		"BannerLocCharging": 1,
		"BannerLocEvse":     2,
	}
)

func (x BannerLoc) Enum() *BannerLoc {
	p := new(BannerLoc)
	*p = x
	return p
}

func (x BannerLoc) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BannerLoc) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[1].Descriptor()
}

func (BannerLoc) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[1]
}

func (x BannerLoc) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BannerLoc.Descriptor instead.
func (BannerLoc) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

type CouponType int32

const (
	CouponType_CT_Unknown        CouponType = 0
	CouponType_CT_WhiteList      CouponType = 1 // 白名单
	CouponType_CT_DiscountCoupon CouponType = 2 // 折扣卷
	CouponType_CT_CashCoupon     CouponType = 3 // 现金卷
)

// Enum value maps for CouponType.
var (
	CouponType_name = map[int32]string{
		0: "CT_Unknown",
		1: "CT_WhiteList",
		2: "CT_DiscountCoupon",
		3: "CT_CashCoupon",
	}
	CouponType_value = map[string]int32{
		"CT_Unknown":        0,
		"CT_WhiteList":      1,
		"CT_DiscountCoupon": 2,
		"CT_CashCoupon":     3,
	}
)

func (x CouponType) Enum() *CouponType {
	p := new(CouponType)
	*p = x
	return p
}

func (x CouponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[2].Descriptor()
}

func (CouponType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[2]
}

func (x CouponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponType.Descriptor instead.
func (CouponType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

type EvseSupportTypePos int32

const (
	EvseSupportTypePos_ESTP_WhiteList            EvseSupportTypePos = 0 // 白名单
	EvseSupportTypePos_ESTP_GroupPay             EvseSupportTypePos = 1 // 集团支付启动充电
	EvseSupportTypePos_ESTP_ScheduleTimeCharging EvseSupportTypePos = 2 // 定时充电
)

// Enum value maps for EvseSupportTypePos.
var (
	EvseSupportTypePos_name = map[int32]string{
		0: "ESTP_WhiteList",
		1: "ESTP_GroupPay",
		2: "ESTP_ScheduleTimeCharging",
	}
	EvseSupportTypePos_value = map[string]int32{
		"ESTP_WhiteList":            0,
		"ESTP_GroupPay":             1,
		"ESTP_ScheduleTimeCharging": 2,
	}
)

func (x EvseSupportTypePos) Enum() *EvseSupportTypePos {
	p := new(EvseSupportTypePos)
	*p = x
	return p
}

func (x EvseSupportTypePos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseSupportTypePos) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[3].Descriptor()
}

func (EvseSupportTypePos) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[3]
}

func (x EvseSupportTypePos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseSupportTypePos.Descriptor instead.
func (EvseSupportTypePos) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

// 资源配额类型
type QuotaLimitationType int32

const (
	QuotaLimitationType_QLType_Operator_Cards     QuotaLimitationType = 0
	QuotaLimitationType_QLType_Station_Cards      QuotaLimitationType = 1
	QuotaLimitationType_QLType_Station_Whitelists QuotaLimitationType = 2 // 站点白名单限制
)

// Enum value maps for QuotaLimitationType.
var (
	QuotaLimitationType_name = map[int32]string{
		0: "QLType_Operator_Cards",
		1: "QLType_Station_Cards",
		2: "QLType_Station_Whitelists",
	}
	QuotaLimitationType_value = map[string]int32{
		"QLType_Operator_Cards":     0,
		"QLType_Station_Cards":      1,
		"QLType_Station_Whitelists": 2,
	}
)

func (x QuotaLimitationType) Enum() *QuotaLimitationType {
	p := new(QuotaLimitationType)
	*p = x
	return p
}

func (x QuotaLimitationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuotaLimitationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[4].Descriptor()
}

func (QuotaLimitationType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[4]
}

func (x QuotaLimitationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuotaLimitationType.Descriptor instead.
func (QuotaLimitationType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

type Station_Type int32

const (
	Station_VEHICLE_CAR     Station_Type = 0 // 电动汽车
	Station_VEHICLE_BICYCLE Station_Type = 1 // 电动自行车
)

// Enum value maps for Station_Type.
var (
	Station_Type_name = map[int32]string{
		0: "VEHICLE_CAR",
		1: "VEHICLE_BICYCLE",
	}
	Station_Type_value = map[string]int32{
		"VEHICLE_CAR":     0,
		"VEHICLE_BICYCLE": 1,
	}
)

func (x Station_Type) Enum() *Station_Type {
	p := new(Station_Type)
	*p = x
	return p
}

func (x Station_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Station_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[5].Descriptor()
}

func (Station_Type) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[5]
}

func (x Station_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Station_Type.Descriptor instead.
func (Station_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40, 0}
}

type Station_State int32

const (
	Station_STATE_UNKNOWN Station_State = 0 // 未知
	Station_STATE_FREE    Station_State = 1 // 空闲
	Station_STATE_BUSY    Station_State = 2 // 繁忙
)

// Enum value maps for Station_State.
var (
	Station_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_FREE",
		2: "STATE_BUSY",
	}
	Station_State_value = map[string]int32{
		"STATE_UNKNOWN": 0,
		"STATE_FREE":    1,
		"STATE_BUSY":    2,
	}
)

func (x Station_State) Enum() *Station_State {
	p := new(Station_State)
	*p = x
	return p
}

func (x Station_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Station_State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[6].Descriptor()
}

func (Station_State) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[6]
}

func (x Station_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Station_State.Descriptor instead.
func (Station_State) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40, 1}
}

type RemoteStartChargerAmount_RemoteStartChargerAmountType int32

const (
	RemoteStartChargerAmount_CA_CAR     RemoteStartChargerAmount_RemoteStartChargerAmountType = 0 // 电动汽车充电金额列表(交直流)
	RemoteStartChargerAmount_CA_BICYCLE RemoteStartChargerAmount_RemoteStartChargerAmountType = 1 // 电动自行车充电金额列表
)

// Enum value maps for RemoteStartChargerAmount_RemoteStartChargerAmountType.
var (
	RemoteStartChargerAmount_RemoteStartChargerAmountType_name = map[int32]string{
		0: "CA_CAR",
		1: "CA_BICYCLE",
	}
	RemoteStartChargerAmount_RemoteStartChargerAmountType_value = map[string]int32{
		"CA_CAR":     0,
		"CA_BICYCLE": 1,
	}
)

func (x RemoteStartChargerAmount_RemoteStartChargerAmountType) Enum() *RemoteStartChargerAmount_RemoteStartChargerAmountType {
	p := new(RemoteStartChargerAmount_RemoteStartChargerAmountType)
	*p = x
	return p
}

func (x RemoteStartChargerAmount_RemoteStartChargerAmountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteStartChargerAmount_RemoteStartChargerAmountType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[7].Descriptor()
}

func (RemoteStartChargerAmount_RemoteStartChargerAmountType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[7]
}

func (x RemoteStartChargerAmount_RemoteStartChargerAmountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteStartChargerAmount_RemoteStartChargerAmountType.Descriptor instead.
func (RemoteStartChargerAmount_RemoteStartChargerAmountType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41, 0}
}

type CreateOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer        *customer.CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                               // 用户信息
	ConnectorId     uint64                `protobuf:"varint,2,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`                     // 枪头id
	AuthorizeMode   int32                 `protobuf:"varint,3,opt,name=authorize_mode,json=authorizeMode,proto3" json:"authorize_mode,omitempty"`               // 授权模式(用户远程启动，刷卡启动..., 等同于charger.AuthorizationMode)
	AuthorizationId string                `protobuf:"bytes,4,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`          // 授权id(根据授权模式来定，例如：authorize_mode=用户远程启动，authorize_id=customer_id)
	PayMode         common.PayMode        `protobuf:"varint,5,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`             // 支付类型
	PayChannel      common.PayChannel     `protobuf:"varint,6,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"` // 支付渠道（一个支付类型对应多个支付渠道）
	IsPrepay        bool                  `protobuf:"varint,7,opt,name=is_prepay,json=isPrepay,proto3" json:"is_prepay,omitempty"`                              // 是否先付费
	Prepayment      float64               `protobuf:"fixed64,8,opt,name=prepayment,proto3" json:"prepayment,omitempty"`                                         // 预付充电费用(元)
	ServiceMode     int32                 `protobuf:"varint,9,opt,name=service_mode,json=serviceMode,proto3" json:"service_mode,omitempty"`                     // 启动充电的模式
	AllowedKwh      float64               `protobuf:"fixed64,10,opt,name=allowed_kwh,json=allowedKwh,proto3" json:"allowed_kwh,omitempty"`                      // 最大充电电量，最大150度电，既150.00
	AllowedMinute   int32                 `protobuf:"varint,11,opt,name=allowed_minute,json=allowedMinute,proto3" json:"allowed_minute,omitempty"`              // 最大充电时间，默认24小时，既1440分钟
	CouponType      CouponType            `protobuf:"varint,12,opt,name=coupon_type,json=couponType,proto3,enum=api.CouponType" json:"coupon_type,omitempty"`   // 优惠类型
	// uint64 coupon_id            = 13; // 优惠券id
	ScheduleTime int32 `protobuf:"varint,14,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"` // 定时充电时间戳(秒), 0表示即时充电
}

func (x *CreateOrderReq) Reset() {
	*x = CreateOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderReq) ProtoMessage() {}

func (x *CreateOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderReq.ProtoReflect.Descriptor instead.
func (*CreateOrderReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOrderReq) GetCustomer() *customer.CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CreateOrderReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *CreateOrderReq) GetAuthorizeMode() int32 {
	if x != nil {
		return x.AuthorizeMode
	}
	return 0
}

func (x *CreateOrderReq) GetAuthorizationId() string {
	if x != nil {
		return x.AuthorizationId
	}
	return ""
}

func (x *CreateOrderReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *CreateOrderReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *CreateOrderReq) GetIsPrepay() bool {
	if x != nil {
		return x.IsPrepay
	}
	return false
}

func (x *CreateOrderReq) GetPrepayment() float64 {
	if x != nil {
		return x.Prepayment
	}
	return 0
}

func (x *CreateOrderReq) GetServiceMode() int32 {
	if x != nil {
		return x.ServiceMode
	}
	return 0
}

func (x *CreateOrderReq) GetAllowedKwh() float64 {
	if x != nil {
		return x.AllowedKwh
	}
	return 0
}

func (x *CreateOrderReq) GetAllowedMinute() int32 {
	if x != nil {
		return x.AllowedMinute
	}
	return 0
}

func (x *CreateOrderReq) GetCouponType() CouponType {
	if x != nil {
		return x.CouponType
	}
	return CouponType_CT_Unknown
}

func (x *CreateOrderReq) GetScheduleTime() int32 {
	if x != nil {
		return x.ScheduleTime
	}
	return 0
}

type CreateOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order   *coregw.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`     // 订单信息
	Station *Station      `protobuf:"bytes,2,opt,name=station,proto3" json:"station,omitempty"` // 站点信息
}

func (x *CreateOrderResp) Reset() {
	*x = CreateOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResp) ProtoMessage() {}

func (x *CreateOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResp.ProtoReflect.Descriptor instead.
func (*CreateOrderResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrderResp) GetOrder() *coregw.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *CreateOrderResp) GetStation() *Station {
	if x != nil {
		return x.Station
	}
	return nil
}

type ConfirmOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //订单ID
}

func (x *ConfirmOrderReq) Reset() {
	*x = ConfirmOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmOrderReq) ProtoMessage() {}

func (x *ConfirmOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmOrderReq.ProtoReflect.Descriptor instead.
func (*ConfirmOrderReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *ConfirmOrderReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ConfirmOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` //0: 成功，非0：失败
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //失败原因描述
}

func (x *ConfirmOrderResp) Reset() {
	*x = ConfirmOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmOrderResp) ProtoMessage() {}

func (x *ConfirmOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmOrderResp.ProtoReflect.Descriptor instead.
func (*ConfirmOrderResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ConfirmOrderResp) GetCode() uint64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ConfirmOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ApplyOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer        *customer.CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                               // 用户信息
	ConnectorId     uint64                 `protobuf:"varint,2,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`                     // 枪头id
	AuthorizeMode   int32                  `protobuf:"varint,3,opt,name=authorize_mode,json=authorizeMode,proto3" json:"authorize_mode,omitempty"`               // 授权模式(用户远程启动，刷卡启动..., 等同于charger.AuthorizationMode)
	AuthorizationId string                 `protobuf:"bytes,4,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`          // 授权id(根据授权模式来定，例如：authorize_mode=用户远程启动，authorize_id=customer_id)
	PayMode         common.PayMode         `protobuf:"varint,5,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`             // 支付类型
	PayChannel      common.PayChannel      `protobuf:"varint,6,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"` // 支付渠道（一个支付类型对应多个支付渠道）
	IsPrepay        bool                   `protobuf:"varint,7,opt,name=is_prepay,json=isPrepay,proto3" json:"is_prepay,omitempty"`                              // 是否先付费
	Prepayment      float64                `protobuf:"fixed64,8,opt,name=prepayment,proto3" json:"prepayment,omitempty"`                                         // 预付充电费用(元)
	ServiceMode     int32                  `protobuf:"varint,9,opt,name=service_mode,json=serviceMode,proto3" json:"service_mode,omitempty"`                     // 启动充电的模式
	AllowedKwh      float64                `protobuf:"fixed64,10,opt,name=allowed_kwh,json=allowedKwh,proto3" json:"allowed_kwh,omitempty"`                      // 最大充电电量，最大150度电，既150.00
	AllowedMinute   int32                  `protobuf:"varint,11,opt,name=allowed_minute,json=allowedMinute,proto3" json:"allowed_minute,omitempty"`              // 最大充电时间，默认24小时，既1440分钟
	CouponType      CouponType             `protobuf:"varint,12,opt,name=coupon_type,json=couponType,proto3,enum=api.CouponType" json:"coupon_type,omitempty"`   // 优惠类型
	// uint64 coupon_id                       = 13; // 优惠券id
	ScheduleTime    int32                  `protobuf:"varint,14,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`                                        // 定时充电时间戳(秒), 0表示即时充电
	OrderId         uint64                 `protobuf:"varint,15,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                       // 订单id，为0时平台生成，默认为0, 刷卡统一下单时会使用
	CallerOrderId   string                 `protobuf:"bytes,16,opt,name=caller_order_id,json=callerOrderId,proto3" json:"caller_order_id,omitempty"`                                    // 调用方订单id，如不传将和平台订单id一致
	Check           bool                   `protobuf:"varint,17,opt,name=check,proto3" json:"check,omitempty"`                                                                          // 是否做启动充电检查，如上报的结算报文需要创建订单，就无需做检查
	AuthModeChannel common.AuthModeChannel `protobuf:"varint,18,opt,name=auth_mode_channel,json=authModeChannel,proto3,enum=common.AuthModeChannel" json:"auth_mode_channel,omitempty"` // 授权模式渠道(微信/支付宝/app等)
	NeedConfirm     bool                   `protobuf:"varint,19,opt,name=need_confirm,json=needConfirm,proto3" json:"need_confirm,omitempty"`                                           //是否需要外部系统对订单做一次确认,一般用于互联互通
	PreFrozenAmount int32                  `protobuf:"varint,20,opt,name=pre_frozen_amount,json=preFrozenAmount,proto3" json:"pre_frozen_amount,omitempty"`                             // 预冻结充电金额，单位分
}

func (x *ApplyOrderReq) Reset() {
	*x = ApplyOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrderReq) ProtoMessage() {}

func (x *ApplyOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrderReq.ProtoReflect.Descriptor instead.
func (*ApplyOrderReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyOrderReq) GetCustomer() *customer.CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *ApplyOrderReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *ApplyOrderReq) GetAuthorizeMode() int32 {
	if x != nil {
		return x.AuthorizeMode
	}
	return 0
}

func (x *ApplyOrderReq) GetAuthorizationId() string {
	if x != nil {
		return x.AuthorizationId
	}
	return ""
}

func (x *ApplyOrderReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *ApplyOrderReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *ApplyOrderReq) GetIsPrepay() bool {
	if x != nil {
		return x.IsPrepay
	}
	return false
}

func (x *ApplyOrderReq) GetPrepayment() float64 {
	if x != nil {
		return x.Prepayment
	}
	return 0
}

func (x *ApplyOrderReq) GetServiceMode() int32 {
	if x != nil {
		return x.ServiceMode
	}
	return 0
}

func (x *ApplyOrderReq) GetAllowedKwh() float64 {
	if x != nil {
		return x.AllowedKwh
	}
	return 0
}

func (x *ApplyOrderReq) GetAllowedMinute() int32 {
	if x != nil {
		return x.AllowedMinute
	}
	return 0
}

func (x *ApplyOrderReq) GetCouponType() CouponType {
	if x != nil {
		return x.CouponType
	}
	return CouponType_CT_Unknown
}

func (x *ApplyOrderReq) GetScheduleTime() int32 {
	if x != nil {
		return x.ScheduleTime
	}
	return 0
}

func (x *ApplyOrderReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ApplyOrderReq) GetCallerOrderId() string {
	if x != nil {
		return x.CallerOrderId
	}
	return ""
}

func (x *ApplyOrderReq) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

func (x *ApplyOrderReq) GetAuthModeChannel() common.AuthModeChannel {
	if x != nil {
		return x.AuthModeChannel
	}
	return common.AuthModeChannel_AMC_Unknown
}

func (x *ApplyOrderReq) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *ApplyOrderReq) GetPreFrozenAmount() int32 {
	if x != nil {
		return x.PreFrozenAmount
	}
	return 0
}

type ApplyOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order   *coregw.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`     // 订单信息
	Station *Station      `protobuf:"bytes,2,opt,name=station,proto3" json:"station,omitempty"` // 站点信息
}

func (x *ApplyOrderResp) Reset() {
	*x = ApplyOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrderResp) ProtoMessage() {}

func (x *ApplyOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrderResp.ProtoReflect.Descriptor instead.
func (*ApplyOrderResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *ApplyOrderResp) GetOrder() *coregw.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ApplyOrderResp) GetStation() *Station {
	if x != nil {
		return x.Station
	}
	return nil
}

type OrderPayCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`       // 订单id
	PayStatus int32  `protobuf:"varint,2,opt,name=pay_status,json=payStatus,proto3" json:"pay_status,omitempty"` // 支付状态 (proto/coregw.KindOrderPayState)
	PayTime   int64  `protobuf:"varint,3,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`       // 支付成功时间
}

func (x *OrderPayCallbackReq) Reset() {
	*x = OrderPayCallbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPayCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPayCallbackReq) ProtoMessage() {}

func (x *OrderPayCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPayCallbackReq.ProtoReflect.Descriptor instead.
func (*OrderPayCallbackReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *OrderPayCallbackReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderPayCallbackReq) GetPayStatus() int32 {
	if x != nil {
		return x.PayStatus
	}
	return 0
}

func (x *OrderPayCallbackReq) GetPayTime() int64 {
	if x != nil {
		return x.PayTime
	}
	return 0
}

type OrderPayCallbackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderPayCallbackResp) Reset() {
	*x = OrderPayCallbackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPayCallbackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPayCallbackResp) ProtoMessage() {}

func (x *OrderPayCallbackResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPayCallbackResp.ProtoReflect.Descriptor instead.
func (*OrderPayCallbackResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

type ApplyOrderBackPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单id
}

func (x *ApplyOrderBackPayReq) Reset() {
	*x = ApplyOrderBackPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrderBackPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrderBackPayReq) ProtoMessage() {}

func (x *ApplyOrderBackPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrderBackPayReq.ProtoReflect.Descriptor instead.
func (*ApplyOrderBackPayReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *ApplyOrderBackPayReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type ApplyOrderBackPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackPayOrderId string `protobuf:"bytes,1,opt,name=back_pay_order_id,json=backPayOrderId,proto3" json:"back_pay_order_id,omitempty"` // 订单补缴id
}

func (x *ApplyOrderBackPayResp) Reset() {
	*x = ApplyOrderBackPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrderBackPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrderBackPayResp) ProtoMessage() {}

func (x *ApplyOrderBackPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrderBackPayResp.ProtoReflect.Descriptor instead.
func (*ApplyOrderBackPayResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *ApplyOrderBackPayResp) GetBackPayOrderId() string {
	if x != nil {
		return x.BackPayOrderId
	}
	return ""
}

type OrderBackPayCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                         // 订单id
	BackPayOrderId string `protobuf:"bytes,2,opt,name=back_pay_order_id,json=backPayOrderId,proto3" json:"back_pay_order_id,omitempty"` // 订单补缴id
	// customer.PayChannel  pay_channel = 3; // 补缴支付渠道
	PayMode       common.PayMode    `protobuf:"varint,3,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`             // 支付类型
	PayChannel    common.PayChannel `protobuf:"varint,4,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"` // 支付渠道（一个支付类型对应多个支付渠道）
	BackPayStatus int32             `protobuf:"varint,5,opt,name=back_pay_status,json=backPayStatus,proto3" json:"back_pay_status,omitempty"`             // 补缴支付状态 (proto/coregw.KindOrderBackPayState)
	PayTime       int64             `protobuf:"varint,6,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`                                 // 支付成功时间
	Remark        string            `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注
}

func (x *OrderBackPayCallbackReq) Reset() {
	*x = OrderBackPayCallbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBackPayCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBackPayCallbackReq) ProtoMessage() {}

func (x *OrderBackPayCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBackPayCallbackReq.ProtoReflect.Descriptor instead.
func (*OrderBackPayCallbackReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *OrderBackPayCallbackReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderBackPayCallbackReq) GetBackPayOrderId() string {
	if x != nil {
		return x.BackPayOrderId
	}
	return ""
}

func (x *OrderBackPayCallbackReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *OrderBackPayCallbackReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *OrderBackPayCallbackReq) GetBackPayStatus() int32 {
	if x != nil {
		return x.BackPayStatus
	}
	return 0
}

func (x *OrderBackPayCallbackReq) GetPayTime() int64 {
	if x != nil {
		return x.PayTime
	}
	return 0
}

func (x *OrderBackPayCallbackReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type OrderBackPayCallbackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderBackPayCallbackResp) Reset() {
	*x = OrderBackPayCallbackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBackPayCallbackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBackPayCallbackResp) ProtoMessage() {}

func (x *OrderBackPayCallbackResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBackPayCallbackResp.ProtoReflect.Descriptor instead.
func (*OrderBackPayCallbackResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

type RefundNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId     uint64  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OutRefundNo string  `protobuf:"bytes,2,opt,name=out_refund_no,json=outRefundNo,proto3" json:"out_refund_no,omitempty"` // 退款单号
	Amount      float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`                              // 退款金额
	Balance     float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`                            // 退款后余额
	Remark      string  `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                                // 备注
}

func (x *RefundNotifyReq) Reset() {
	*x = RefundNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundNotifyReq) ProtoMessage() {}

func (x *RefundNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundNotifyReq.ProtoReflect.Descriptor instead.
func (*RefundNotifyReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *RefundNotifyReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *RefundNotifyReq) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

func (x *RefundNotifyReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RefundNotifyReq) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RefundNotifyReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type RefundNotifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefundNotifyResp) Reset() {
	*x = RefundNotifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundNotifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundNotifyResp) ProtoMessage() {}

func (x *RefundNotifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundNotifyResp.ProtoReflect.Descriptor instead.
func (*RefundNotifyResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

type GetActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type customer.ActivityType `protobuf:"varint,1,opt,name=type,proto3,enum=customer.ActivityType" json:"type,omitempty"`
}

func (x *GetActivityReq) Reset() {
	*x = GetActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityReq) ProtoMessage() {}

func (x *GetActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityReq.ProtoReflect.Descriptor instead.
func (*GetActivityReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetActivityReq) GetType() customer.ActivityType {
	if x != nil {
		return x.Type
	}
	return customer.ActivityType_ActivityType_UNKNOWN
}

type GetActivityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activitys []*customer.Activity `protobuf:"bytes,1,rep,name=activitys,proto3" json:"activitys,omitempty"`
}

func (x *GetActivityResp) Reset() {
	*x = GetActivityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityResp) ProtoMessage() {}

func (x *GetActivityResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityResp.ProtoReflect.Descriptor instead.
func (*GetActivityResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetActivityResp) GetActivitys() []*customer.Activity {
	if x != nil {
		return x.Activitys
	}
	return nil
}

type GetStationByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationId uint64 `protobuf:"varint,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"` // 站点id
}

func (x *GetStationByIDReq) Reset() {
	*x = GetStationByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStationByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStationByIDReq) ProtoMessage() {}

func (x *GetStationByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStationByIDReq.ProtoReflect.Descriptor instead.
func (*GetStationByIDReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetStationByIDReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

type SetOrderSnapshootNormalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单id
}

func (x *SetOrderSnapshootNormalReq) Reset() {
	*x = SetOrderSnapshootNormalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderSnapshootNormalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderSnapshootNormalReq) ProtoMessage() {}

func (x *SetOrderSnapshootNormalReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderSnapshootNormalReq.ProtoReflect.Descriptor instead.
func (*SetOrderSnapshootNormalReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *SetOrderSnapshootNormalReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type SetOrderSnapshootNormalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOrderSnapshootNormalResp) Reset() {
	*x = SetOrderSnapshootNormalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderSnapshootNormalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderSnapshootNormalResp) ProtoMessage() {}

func (x *SetOrderSnapshootNormalResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderSnapshootNormalResp.ProtoReflect.Descriptor instead.
func (*SetOrderSnapshootNormalResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

type GetOperatorByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID
}

func (x *GetOperatorByIDReq) Reset() {
	*x = GetOperatorByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatorByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatorByIDReq) ProtoMessage() {}

func (x *GetOperatorByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatorByIDReq.ProtoReflect.Descriptor instead.
func (*GetOperatorByIDReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetOperatorByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetByCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`     //注册码
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"` //供应商
	Model  string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`   //产品型号
}

func (x *GetByCodeReq) Reset() {
	*x = GetByCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByCodeReq) ProtoMessage() {}

func (x *GetByCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByCodeReq.ProtoReflect.Descriptor instead.
func (*GetByCodeReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *GetByCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetByCodeReq) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GetByCodeReq) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type PushAlertMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //运营商ID
	CardNo     string `protobuf:"bytes,2,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`              //卡号
	CustomerId uint64 `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"` // customer_id
	Vin        string `protobuf:"bytes,4,opt,name=vin,proto3" json:"vin,omitempty"`                                  // vin
	Title      string `protobuf:"bytes,20,opt,name=title,proto3" json:"title,omitempty"`                             //标题
	Content    string `protobuf:"bytes,21,opt,name=content,proto3" json:"content,omitempty"`                         //消息
}

func (x *PushAlertMsgReq) Reset() {
	*x = PushAlertMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushAlertMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushAlertMsgReq) ProtoMessage() {}

func (x *PushAlertMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushAlertMsgReq.ProtoReflect.Descriptor instead.
func (*PushAlertMsgReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *PushAlertMsgReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *PushAlertMsgReq) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *PushAlertMsgReq) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *PushAlertMsgReq) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *PushAlertMsgReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PushAlertMsgReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type PushAlertMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushAlertMsgResp) Reset() {
	*x = PushAlertMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushAlertMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushAlertMsgResp) ProtoMessage() {}

func (x *PushAlertMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushAlertMsgResp.ProtoReflect.Descriptor instead.
func (*PushAlertMsgResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

// 登陆
type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminAccount string `protobuf:"bytes,1,opt,name=admin_account,json=adminAccount,proto3" json:"admin_account,omitempty"` // 后台账号
	AdminPhone   string `protobuf:"bytes,2,opt,name=admin_phone,json=adminPhone,proto3" json:"admin_phone,omitempty"`       // 手机号
	Passwd       string `protobuf:"bytes,3,opt,name=passwd,proto3" json:"passwd,omitempty"`                                 // 密码
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

func (x *LoginReq) GetAdminAccount() string {
	if x != nil {
		return x.AdminAccount
	}
	return ""
}

func (x *LoginReq) GetAdminPhone() string {
	if x != nil {
		return x.AdminPhone
	}
	return ""
}

func (x *LoginReq) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator *Operator `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"` // 运营商
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

func (x *LoginResp) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

type BaseInfoByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //订单ID
}

func (x *BaseInfoByIDReq) Reset() {
	*x = BaseInfoByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseInfoByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseInfoByIDReq) ProtoMessage() {}

func (x *BaseInfoByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseInfoByIDReq.ProtoReflect.Descriptor instead.
func (*BaseInfoByIDReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *BaseInfoByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BaseInfoByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *coregw.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"` // 订单信息
}

func (x *BaseInfoByIDResp) Reset() {
	*x = BaseInfoByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseInfoByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseInfoByIDResp) ProtoMessage() {}

func (x *BaseInfoByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseInfoByIDResp.ProtoReflect.Descriptor instead.
func (*BaseInfoByIDResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{26}
}

func (x *BaseInfoByIDResp) GetOrder() *coregw.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

type OrderInfoByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //订单ID
}

func (x *OrderInfoByIDReq) Reset() {
	*x = OrderInfoByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfoByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfoByIDReq) ProtoMessage() {}

func (x *OrderInfoByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfoByIDReq.ProtoReflect.Descriptor instead.
func (*OrderInfoByIDReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{27}
}

func (x *OrderInfoByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OrderInfoByOutChargeOrderIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutChargerOrderId string `protobuf:"bytes,1,opt,name=out_charger_order_id,json=outChargerOrderId,proto3" json:"out_charger_order_id,omitempty"` // 调用方订单id
}

func (x *OrderInfoByOutChargeOrderIDReq) Reset() {
	*x = OrderInfoByOutChargeOrderIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfoByOutChargeOrderIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfoByOutChargeOrderIDReq) ProtoMessage() {}

func (x *OrderInfoByOutChargeOrderIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfoByOutChargeOrderIDReq.ProtoReflect.Descriptor instead.
func (*OrderInfoByOutChargeOrderIDReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{28}
}

func (x *OrderInfoByOutChargeOrderIDReq) GetOutChargerOrderId() string {
	if x != nil {
		return x.OutChargerOrderId
	}
	return ""
}

type OrderInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order   *coregw.Order          `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`     // 订单信息
	Station *Station               `protobuf:"bytes,3,opt,name=station,proto3" json:"station,omitempty"` // 站点信息
	Caller  *Caller                `protobuf:"bytes,4,opt,name=caller,proto3" json:"caller,omitempty"`   // 调用方
	User    *customer.CustomerInfo `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`       // 用户信息
	// repeated coregw.OrderStateTimelineData state_timeline = 6; // 订单状态时间轴
	PriceScheme *charger.SetTariffReq `protobuf:"bytes,7,opt,name=price_scheme,json=priceScheme,proto3" json:"price_scheme,omitempty"` // 计费模版
}

func (x *OrderInfoResp) Reset() {
	*x = OrderInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfoResp) ProtoMessage() {}

func (x *OrderInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfoResp.ProtoReflect.Descriptor instead.
func (*OrderInfoResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{29}
}

func (x *OrderInfoResp) GetOrder() *coregw.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderInfoResp) GetStation() *Station {
	if x != nil {
		return x.Station
	}
	return nil
}

func (x *OrderInfoResp) GetCaller() *Caller {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *OrderInfoResp) GetUser() *customer.CustomerInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *OrderInfoResp) GetPriceScheme() *charger.SetTariffReq {
	if x != nil {
		return x.PriceScheme
	}
	return nil
}

type BatchOrderInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` // 平台订单id
}

func (x *BatchOrderInfosReq) Reset() {
	*x = BatchOrderInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOrderInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOrderInfosReq) ProtoMessage() {}

func (x *BatchOrderInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOrderInfosReq.ProtoReflect.Descriptor instead.
func (*BatchOrderInfosReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{30}
}

func (x *BatchOrderInfosReq) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BatchOrderInfosResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderInfos []*OrderInfoResp `protobuf:"bytes,1,rep,name=order_infos,json=orderInfos,proto3" json:"order_infos,omitempty"`
}

func (x *BatchOrderInfosResp) Reset() {
	*x = BatchOrderInfosResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOrderInfosResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOrderInfosResp) ProtoMessage() {}

func (x *BatchOrderInfosResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOrderInfosResp.ProtoReflect.Descriptor instead.
func (*BatchOrderInfosResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{31}
}

func (x *BatchOrderInfosResp) GetOrderInfos() []*OrderInfoResp {
	if x != nil {
		return x.OrderInfos
	}
	return nil
}

type GetPriceSchemeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    uint64 station_id                   = 1; // 站点
	//    coregw.VehicleType vehicle_type     = 2; // 使用车辆类型
	Id                uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // ID
	EvseId            uint64 `protobuf:"varint,2,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`                                  //设备ID
	AuthorizationMode int32  `protobuf:"varint,3,opt,name=authorization_mode,json=authorizationMode,proto3" json:"authorization_mode,omitempty"` // 授权类型
	AuthorizationId   string `protobuf:"bytes,4,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`        // 授权ID
}

func (x *GetPriceSchemeReq) Reset() {
	*x = GetPriceSchemeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceSchemeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceSchemeReq) ProtoMessage() {}

func (x *GetPriceSchemeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceSchemeReq.ProtoReflect.Descriptor instead.
func (*GetPriceSchemeReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{32}
}

func (x *GetPriceSchemeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPriceSchemeReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *GetPriceSchemeReq) GetAuthorizationMode() int32 {
	if x != nil {
		return x.AuthorizationMode
	}
	return 0
}

func (x *GetPriceSchemeReq) GetAuthorizationId() string {
	if x != nil {
		return x.AuthorizationId
	}
	return ""
}

type GetPriceSchemeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceScheme *charger.SetTariffReq `protobuf:"bytes,1,opt,name=price_scheme,json=priceScheme,proto3" json:"price_scheme,omitempty"` // 计费模版
}

func (x *GetPriceSchemeResp) Reset() {
	*x = GetPriceSchemeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceSchemeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceSchemeResp) ProtoMessage() {}

func (x *GetPriceSchemeResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceSchemeResp.ProtoReflect.Descriptor instead.
func (*GetPriceSchemeResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetPriceSchemeResp) GetPriceScheme() *charger.SetTariffReq {
	if x != nil {
		return x.PriceScheme
	}
	return nil
}

type StationInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationId uint64 `protobuf:"varint,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"` // 站点id
}

func (x *StationInfoReq) Reset() {
	*x = StationInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StationInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StationInfoReq) ProtoMessage() {}

func (x *StationInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StationInfoReq.ProtoReflect.Descriptor instead.
func (*StationInfoReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{34}
}

func (x *StationInfoReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

type StationInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationInfo *Station `protobuf:"bytes,1,opt,name=station_info,json=stationInfo,proto3" json:"station_info,omitempty"` // 站点信息
}

func (x *StationInfoResp) Reset() {
	*x = StationInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StationInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StationInfoResp) ProtoMessage() {}

func (x *StationInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StationInfoResp.ProtoReflect.Descriptor instead.
func (*StationInfoResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{35}
}

func (x *StationInfoResp) GetStationInfo() *Station {
	if x != nil {
		return x.StationInfo
	}
	return nil
}

type CheckGroupPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationId uint64 `protobuf:"varint,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"` // 站点id
	GroupId   uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`       // 集团id
}

func (x *CheckGroupPayReq) Reset() {
	*x = CheckGroupPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGroupPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGroupPayReq) ProtoMessage() {}

func (x *CheckGroupPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGroupPayReq.ProtoReflect.Descriptor instead.
func (*CheckGroupPayReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{36}
}

func (x *CheckGroupPayReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *CheckGroupPayReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type CheckGroupPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSupport bool `protobuf:"varint,1,opt,name=is_support,json=isSupport,proto3" json:"is_support,omitempty"` // 是否支持
}

func (x *CheckGroupPayResp) Reset() {
	*x = CheckGroupPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGroupPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGroupPayResp) ProtoMessage() {}

func (x *CheckGroupPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGroupPayResp.ProtoReflect.Descriptor instead.
func (*CheckGroupPayResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{37}
}

func (x *CheckGroupPayResp) GetIsSupport() bool {
	if x != nil {
		return x.IsSupport
	}
	return false
}

type StationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`                          // 分页
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商
	Lng        float64         `protobuf:"fixed64,3,opt,name=lng,proto3" json:"lng,omitempty"`                                // 用户所在经度
	Lat        float64         `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`                                // 用户所在维度
	Radius     float64         `protobuf:"fixed64,5,opt,name=radius,proto3" json:"radius,omitempty"`                          // 查询半径 (单位:km)
}

func (x *StationListReq) Reset() {
	*x = StationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StationListReq) ProtoMessage() {}

func (x *StationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StationListReq.ProtoReflect.Descriptor instead.
func (*StationListReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{38}
}

func (x *StationListReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *StationListReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *StationListReq) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *StationListReq) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *StationListReq) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type StationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"` // 分页
	Stations []*Station       `protobuf:"bytes,2,rep,name=stations,proto3" json:"stations,omitempty"` // 站点
}

func (x *StationListResp) Reset() {
	*x = StationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StationListResp) ProtoMessage() {}

func (x *StationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StationListResp.ProtoReflect.Descriptor instead.
func (*StationListResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{39}
}

func (x *StationListResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *StationListResp) GetStations() []*Station {
	if x != nil {
		return x.Stations
	}
	return nil
}

type Station struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               // 站点ID
	Name          string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            // 站点名称
	Operator      *Operator  `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`                                    // 运营商
	AreaCode      int32      `protobuf:"varint,4,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"`                   // 行政区域编码，参考 github.com/damonchen/gb2260
	Address       string     `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`                                      // 地址
	Lng           float64    `protobuf:"fixed64,6,opt,name=lng,proto3" json:"lng,omitempty"`                                            // 经度
	Lat           float64    `protobuf:"fixed64,7,opt,name=lat,proto3" json:"lat,omitempty"`                                            // 维度
	Cover         string     `protobuf:"bytes,8,opt,name=cover,proto3" json:"cover,omitempty"`                                          // 封面图片
	ChargerNums   int32      `protobuf:"varint,9,opt,name=charger_nums,json=chargerNums,proto3" json:"charger_nums,omitempty"`          // 充电桩数量
	IsInOperation bool       `protobuf:"varint,10,opt,name=is_in_operation,json=isInOperation,proto3" json:"is_in_operation,omitempty"` // 营业中，true为营业中
	IsOpen        bool       `protobuf:"varint,11,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                        // 是否对外开放，true为对外开放，false为内部使用
	ContactName   string     `protobuf:"bytes,12,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`          // 联系人
	ContactPhone  string     `protobuf:"bytes,13,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`       // 联系人电话
	ParkingPrice  string     `protobuf:"bytes,14,opt,name=parking_price,json=parkingPrice,proto3" json:"parking_price,omitempty"`       // 停车费
	ChargePrice   string     `protobuf:"bytes,15,opt,name=charge_price,json=chargePrice,proto3" json:"charge_price,omitempty"`          // 充电费
	BusinessTime  string     `protobuf:"bytes,16,opt,name=business_time,json=businessTime,proto3" json:"business_time,omitempty"`       // 营业时间
	ParkingArea   []*Parking `protobuf:"bytes,17,rep,name=parking_area,json=parkingArea,proto3" json:"parking_area,omitempty"`          // 停车位所在区域
	// int32               pay_type                    = 18; // 支付类型
	Dist float64 `protobuf:"fixed64,19,opt,name=dist,proto3" json:"dist,omitempty"` // 和客户之间的距离，单位km
	// bool                is_support_group_pay        = 20; // 是否支持集团支付
	ManangerId                uint64                      `protobuf:"varint,21,opt,name=mananger_id,json=manangerId,proto3" json:"mananger_id,omitempty"`                                                 // 管理员ID
	ContactEmail              string                      `protobuf:"bytes,22,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`                                            // 联系人邮箱，用于告警
	IsBusy                    bool                        `protobuf:"varint,23,opt,name=is_busy,json=isBusy,proto3" json:"is_busy,omitempty"`                                                             // 是否繁忙
	CreatedAt                 int64                       `protobuf:"varint,24,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                    // 创建时间
	ManangerName              string                      `protobuf:"bytes,25,opt,name=mananger_name,json=manangerName,proto3" json:"mananger_name,omitempty"`                                            // 管理员名称
	IsDeleted                 bool                        `protobuf:"varint,26,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`                                                    // 是否已删除
	Type                      int32                       `protobuf:"varint,27,opt,name=type,proto3" json:"type,omitempty"`                                                                               // 充电站类型
	HasCoupon                 bool                        `protobuf:"varint,28,opt,name=has_coupon,json=hasCoupon,proto3" json:"has_coupon,omitempty"`                                                    // 是否有优惠活动
	State                     int32                       `protobuf:"varint,29,opt,name=state,proto3" json:"state,omitempty"`                                                                             //状态
	IdCardChargeStartLimit    uint64                      `protobuf:"varint,30,opt,name=id_card_charge_start_limit,json=idCardChargeStartLimit,proto3" json:"id_card_charge_start_limit,omitempty"`       // 刷鉴权卡启动金额的限制
	VinChargeStartLimit       uint64                      `protobuf:"varint,31,opt,name=vin_charge_start_limit,json=vinChargeStartLimit,proto3" json:"vin_charge_start_limit,omitempty"`                  // VIN启动金额的限制
	AuthorizationMode         uint32                      `protobuf:"varint,32,opt,name=authorization_mode,json=authorizationMode,proto3" json:"authorization_mode,omitempty"`                            // 支持鉴权的方式
	RemoteStartType           uint32                      `protobuf:"varint,33,opt,name=remote_start_type,json=remoteStartType,proto3" json:"remote_start_type,omitempty"`                                // 支持远程启动充电的方式(bit型)
	RemoteStartChargerAmounts []*RemoteStartChargerAmount `protobuf:"bytes,34,rep,name=remote_start_charger_amounts,json=remoteStartChargerAmounts,proto3" json:"remote_start_charger_amounts,omitempty"` // 远程启动充电金额列表, 单位元
	QrcodeConfig              string                      `protobuf:"bytes,35,opt,name=qrcode_config,json=qrcodeConfig,proto3" json:"qrcode_config,omitempty"`                                            //自定义二维码
}

func (x *Station) Reset() {
	*x = Station{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Station) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Station) ProtoMessage() {}

func (x *Station) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Station.ProtoReflect.Descriptor instead.
func (*Station) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{40}
}

func (x *Station) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Station) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Station) GetOperator() *Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *Station) GetAreaCode() int32 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *Station) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Station) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Station) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Station) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Station) GetChargerNums() int32 {
	if x != nil {
		return x.ChargerNums
	}
	return 0
}

func (x *Station) GetIsInOperation() bool {
	if x != nil {
		return x.IsInOperation
	}
	return false
}

func (x *Station) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *Station) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *Station) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *Station) GetParkingPrice() string {
	if x != nil {
		return x.ParkingPrice
	}
	return ""
}

func (x *Station) GetChargePrice() string {
	if x != nil {
		return x.ChargePrice
	}
	return ""
}

func (x *Station) GetBusinessTime() string {
	if x != nil {
		return x.BusinessTime
	}
	return ""
}

func (x *Station) GetParkingArea() []*Parking {
	if x != nil {
		return x.ParkingArea
	}
	return nil
}

func (x *Station) GetDist() float64 {
	if x != nil {
		return x.Dist
	}
	return 0
}

func (x *Station) GetManangerId() uint64 {
	if x != nil {
		return x.ManangerId
	}
	return 0
}

func (x *Station) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Station) GetIsBusy() bool {
	if x != nil {
		return x.IsBusy
	}
	return false
}

func (x *Station) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Station) GetManangerName() string {
	if x != nil {
		return x.ManangerName
	}
	return ""
}

func (x *Station) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *Station) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Station) GetHasCoupon() bool {
	if x != nil {
		return x.HasCoupon
	}
	return false
}

func (x *Station) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Station) GetIdCardChargeStartLimit() uint64 {
	if x != nil {
		return x.IdCardChargeStartLimit
	}
	return 0
}

func (x *Station) GetVinChargeStartLimit() uint64 {
	if x != nil {
		return x.VinChargeStartLimit
	}
	return 0
}

func (x *Station) GetAuthorizationMode() uint32 {
	if x != nil {
		return x.AuthorizationMode
	}
	return 0
}

func (x *Station) GetRemoteStartType() uint32 {
	if x != nil {
		return x.RemoteStartType
	}
	return 0
}

func (x *Station) GetRemoteStartChargerAmounts() []*RemoteStartChargerAmount {
	if x != nil {
		return x.RemoteStartChargerAmounts
	}
	return nil
}

func (x *Station) GetQrcodeConfig() string {
	if x != nil {
		return x.QrcodeConfig
	}
	return ""
}

type RemoteStartChargerAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32     `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`               //
	Amounts []float64 `protobuf:"fixed64,2,rep,packed,name=amounts,proto3" json:"amounts,omitempty"` // 远程启动充电金额列表, 单位元
}

func (x *RemoteStartChargerAmount) Reset() {
	*x = RemoteStartChargerAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStartChargerAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStartChargerAmount) ProtoMessage() {}

func (x *RemoteStartChargerAmount) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStartChargerAmount.ProtoReflect.Descriptor instead.
func (*RemoteStartChargerAmount) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{41}
}

func (x *RemoteStartChargerAmount) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RemoteStartChargerAmount) GetAmounts() []float64 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

type Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                          // id
	Name                     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                       // 名称
	Tel                      string    `protobuf:"bytes,3,opt,name=tel,proto3" json:"tel,omitempty"`                                                                                         // 联系电话
	Code                     string    `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`                                                                                       // 注册码
	ManagerId                uint64    `protobuf:"varint,5,opt,name=manager_id,json=managerId,proto3" json:"manager_id,omitempty"`                                                           // 管理用户ID
	ManagerName              string    `protobuf:"bytes,6,opt,name=manager_name,json=managerName,proto3" json:"manager_name,omitempty"`                                                      // 管理用户ID
	IsBlock                  bool      `protobuf:"varint,7,opt,name=is_block,json=isBlock,proto3" json:"is_block,omitempty"`                                                                 // 是否屏蔽
	Company                  string    `protobuf:"bytes,8,opt,name=company,proto3" json:"company,omitempty"`                                                                                 // 商户公司名称
	Type                     int32     `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`                                                                                      // 商户类型
	Address                  string    `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`                                                                                // 商户公司地址
	LogoUrl                  string    `protobuf:"bytes,11,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`                                                                 // 商户logo
	CreatedAt                int64     `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                          // 创建时间
	UpdatedAt                int64     `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                          // 更新时间
	IdCardChargeStartLimit   uint64    `protobuf:"varint,14,opt,name=id_card_charge_start_limit,json=idCardChargeStartLimit,proto3" json:"id_card_charge_start_limit,omitempty"`             //启动充电的金额限制
	RemoteStartType          uint32    `protobuf:"varint,15,opt,name=remote_start_type,json=remoteStartType,proto3" json:"remote_start_type,omitempty"`                                      //远程启动充电的类型，bitmap类型，具体查看 coregw.RemoteStartType
	OnlineCharge             bool      `protobuf:"varint,16,opt,name=online_charge,json=onlineCharge,proto3" json:"online_charge,omitempty"`                                                 // 是否开通充值余额功能，1：开通，0：没开通
	AuthorizationMode        uint32    `protobuf:"varint,17,opt,name=authorization_mode,json=authorizationMode,proto3" json:"authorization_mode,omitempty"`                                  //支持鉴权的类型
	QrcodeDomain             string    `protobuf:"bytes,18,opt,name=qrcode_domain,json=qrcodeDomain,proto3" json:"qrcode_domain,omitempty"`                                                  //二维码的自定义域名
	UserBalanceChargeAmounts []float64 `protobuf:"fixed64,19,rep,packed,name=user_balance_charge_amounts,json=userBalanceChargeAmounts,proto3" json:"user_balance_charge_amounts,omitempty"` // 用户余额充值金额列表, 单位元
	ApiId                    string    `protobuf:"bytes,20,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	FunctionalSwitchBit      uint64    `protobuf:"varint,21,opt,name=functional_switch_bit,json=functionalSwitchBit,proto3" json:"functional_switch_bit,omitempty"` //设备开关bit位
	QrcodeConfig             string    `protobuf:"bytes,22,opt,name=qrcode_config,json=qrcodeConfig,proto3" json:"qrcode_config,omitempty"`                         // 二维码配置
	VirtualStation           bool      `protobuf:"varint,23,opt,name=virtual_station,json=virtualStation,proto3" json:"virtual_station,omitempty"`                  //是否需要建立虚拟站点
}

func (x *Operator) Reset() {
	*x = Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operator) ProtoMessage() {}

func (x *Operator) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operator.ProtoReflect.Descriptor instead.
func (*Operator) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{42}
}

func (x *Operator) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Operator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Operator) GetTel() string {
	if x != nil {
		return x.Tel
	}
	return ""
}

func (x *Operator) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Operator) GetManagerId() uint64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *Operator) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *Operator) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

func (x *Operator) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *Operator) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Operator) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Operator) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Operator) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Operator) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Operator) GetIdCardChargeStartLimit() uint64 {
	if x != nil {
		return x.IdCardChargeStartLimit
	}
	return 0
}

func (x *Operator) GetRemoteStartType() uint32 {
	if x != nil {
		return x.RemoteStartType
	}
	return 0
}

func (x *Operator) GetOnlineCharge() bool {
	if x != nil {
		return x.OnlineCharge
	}
	return false
}

func (x *Operator) GetAuthorizationMode() uint32 {
	if x != nil {
		return x.AuthorizationMode
	}
	return 0
}

func (x *Operator) GetQrcodeDomain() string {
	if x != nil {
		return x.QrcodeDomain
	}
	return ""
}

func (x *Operator) GetUserBalanceChargeAmounts() []float64 {
	if x != nil {
		return x.UserBalanceChargeAmounts
	}
	return nil
}

func (x *Operator) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *Operator) GetFunctionalSwitchBit() uint64 {
	if x != nil {
		return x.FunctionalSwitchBit
	}
	return 0
}

func (x *Operator) GetQrcodeConfig() string {
	if x != nil {
		return x.QrcodeConfig
	}
	return ""
}

func (x *Operator) GetVirtualStation() bool {
	if x != nil {
		return x.VirtualStation
	}
	return false
}

type GetNoticeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNoticeReq) Reset() {
	*x = GetNoticeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNoticeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNoticeReq) ProtoMessage() {}

func (x *GetNoticeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNoticeReq.ProtoReflect.Descriptor instead.
func (*GetNoticeReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{43}
}

type GetNoticeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notice    string `protobuf:"bytes,1,opt,name=notice,proto3" json:"notice,omitempty"`                        // 公告
	NoticeUrl string `protobuf:"bytes,2,opt,name=notice_url,json=noticeUrl,proto3" json:"notice_url,omitempty"` // 公告url
}

func (x *GetNoticeResp) Reset() {
	*x = GetNoticeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNoticeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNoticeResp) ProtoMessage() {}

func (x *GetNoticeResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNoticeResp.ProtoReflect.Descriptor instead.
func (*GetNoticeResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{44}
}

func (x *GetNoticeResp) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *GetNoticeResp) GetNoticeUrl() string {
	if x != nil {
		return x.NoticeUrl
	}
	return ""
}

type GetBannerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loc BannerLoc `protobuf:"varint,1,opt,name=loc,proto3,enum=api.BannerLoc" json:"loc,omitempty"` // banner位置
}

func (x *GetBannerReq) Reset() {
	*x = GetBannerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannerReq) ProtoMessage() {}

func (x *GetBannerReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannerReq.ProtoReflect.Descriptor instead.
func (*GetBannerReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{45}
}

func (x *GetBannerReq) GetLoc() BannerLoc {
	if x != nil {
		return x.Loc
	}
	return BannerLoc_BannerLocHome
}

type GetBannerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Banners []*Banner `protobuf:"bytes,1,rep,name=banners,proto3" json:"banners,omitempty"`
}

func (x *GetBannerResp) Reset() {
	*x = GetBannerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBannerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBannerResp) ProtoMessage() {}

func (x *GetBannerResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBannerResp.ProtoReflect.Descriptor instead.
func (*GetBannerResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{46}
}

func (x *GetBannerResp) GetBanners() []*Banner {
	if x != nil {
		return x.Banners
	}
	return nil
}

type Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                    // 标题
	ImgUrl  string     `protobuf:"bytes,2,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`    // 横幅图片url
	LinkUrl string     `protobuf:"bytes,3,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"` // 跳转连接
	Type    BannerType `protobuf:"varint,4,opt,name=type,proto3,enum=api.BannerType" json:"type,omitempty"` // 类型
	Loc     BannerLoc  `protobuf:"varint,5,opt,name=loc,proto3,enum=api.BannerLoc" json:"loc,omitempty"`    // 位置
	Centent string     `protobuf:"bytes,6,opt,name=centent,proto3" json:"centent,omitempty"`                // 内容
}

func (x *Banner) Reset() {
	*x = Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banner) ProtoMessage() {}

func (x *Banner) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banner.ProtoReflect.Descriptor instead.
func (*Banner) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{47}
}

func (x *Banner) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Banner) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *Banner) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *Banner) GetType() BannerType {
	if x != nil {
		return x.Type
	}
	return BannerType_BannerTypeLink
}

func (x *Banner) GetLoc() BannerLoc {
	if x != nil {
		return x.Loc
	}
	return BannerLoc_BannerLocHome
}

func (x *Banner) GetCentent() string {
	if x != nil {
		return x.Centent
	}
	return ""
}

type Parking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // 名称
	IdleDcNums  int32  `protobuf:"varint,2,opt,name=idle_dc_nums,json=idleDcNums,proto3" json:"idle_dc_nums,omitempty"`    // 直流空闲数量
	TotalDcNums int32  `protobuf:"varint,3,opt,name=total_dc_nums,json=totalDcNums,proto3" json:"total_dc_nums,omitempty"` // 总数量
	IdleAcNums  int32  `protobuf:"varint,4,opt,name=idle_ac_nums,json=idleAcNums,proto3" json:"idle_ac_nums,omitempty"`    // 交流空闲数量
	TotalAcNums int32  `protobuf:"varint,5,opt,name=total_ac_nums,json=totalAcNums,proto3" json:"total_ac_nums,omitempty"` // 总交流数量
	TotalNums   int32  `protobuf:"varint,6,opt,name=total_nums,json=totalNums,proto3" json:"total_nums,omitempty"`         // 总数量
}

func (x *Parking) Reset() {
	*x = Parking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parking) ProtoMessage() {}

func (x *Parking) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parking.ProtoReflect.Descriptor instead.
func (*Parking) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{48}
}

func (x *Parking) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Parking) GetIdleDcNums() int32 {
	if x != nil {
		return x.IdleDcNums
	}
	return 0
}

func (x *Parking) GetTotalDcNums() int32 {
	if x != nil {
		return x.TotalDcNums
	}
	return 0
}

func (x *Parking) GetIdleAcNums() int32 {
	if x != nil {
		return x.IdleAcNums
	}
	return 0
}

func (x *Parking) GetTotalAcNums() int32 {
	if x != nil {
		return x.TotalAcNums
	}
	return 0
}

func (x *Parking) GetTotalNums() int32 {
	if x != nil {
		return x.TotalNums
	}
	return 0
}

type ConnectorInfoByURLReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // 枪头url
}

func (x *ConnectorInfoByURLReq) Reset() {
	*x = ConnectorInfoByURLReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorInfoByURLReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorInfoByURLReq) ProtoMessage() {}

func (x *ConnectorInfoByURLReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorInfoByURLReq.ProtoReflect.Descriptor instead.
func (*ConnectorInfoByURLReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{49}
}

func (x *ConnectorInfoByURLReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RemoteStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单ID
}

func (x *RemoteStopReq) Reset() {
	*x = RemoteStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStopReq) ProtoMessage() {}

func (x *RemoteStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStopReq.ProtoReflect.Descriptor instead.
func (*RemoteStopReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{50}
}

func (x *RemoteStopReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type RemoteStopResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *coregw.Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"` // 订单信息
	// OrderExtend extend      = 2; // 订单附带信息
	Station *Station `protobuf:"bytes,3,opt,name=station,proto3" json:"station,omitempty"` // 站点信息
}

func (x *RemoteStopResp) Reset() {
	*x = RemoteStopResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStopResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStopResp) ProtoMessage() {}

func (x *RemoteStopResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStopResp.ProtoReflect.Descriptor instead.
func (*RemoteStopResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{51}
}

func (x *RemoteStopResp) GetOrder() *coregw.Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *RemoteStopResp) GetStation() *Station {
	if x != nil {
		return x.Station
	}
	return nil
}

type ConnectorsByStationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq   *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	StationId uint64          `protobuf:"varint,2,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
}

func (x *ConnectorsByStationReq) Reset() {
	*x = ConnectorsByStationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorsByStationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorsByStationReq) ProtoMessage() {}

func (x *ConnectorsByStationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorsByStationReq.ProtoReflect.Descriptor instead.
func (*ConnectorsByStationReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{52}
}

func (x *ConnectorsByStationReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *ConnectorsByStationReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

type ConnectorsByStationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp   *common.PageResp    `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`
	Connectors []*coregw.Connector `protobuf:"bytes,2,rep,name=connectors,proto3" json:"connectors,omitempty"`
}

func (x *ConnectorsByStationResp) Reset() {
	*x = ConnectorsByStationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorsByStationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorsByStationResp) ProtoMessage() {}

func (x *ConnectorsByStationResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorsByStationResp.ProtoReflect.Descriptor instead.
func (*ConnectorsByStationResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{53}
}

func (x *ConnectorsByStationResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *ConnectorsByStationResp) GetConnectors() []*coregw.Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

type InfoByConnectorAndCustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId uint64 `protobuf:"varint,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` // 枪头id
	CustomerId  uint64 `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`    // 用户id
}

func (x *InfoByConnectorAndCustomerReq) Reset() {
	*x = InfoByConnectorAndCustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoByConnectorAndCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoByConnectorAndCustomerReq) ProtoMessage() {}

func (x *InfoByConnectorAndCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoByConnectorAndCustomerReq.ProtoReflect.Descriptor instead.
func (*InfoByConnectorAndCustomerReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{54}
}

func (x *InfoByConnectorAndCustomerReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *InfoByConnectorAndCustomerReq) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type InfoByConnectorAndCustomerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseInfo            *coregw.EvseResp `protobuf:"bytes,1,opt,name=evse_info,json=evseInfo,proto3" json:"evse_info,omitempty"`                                       // 设备信息
	BitEvseSupportTypes uint64           `protobuf:"varint,2,opt,name=bit_evse_support_types,json=bitEvseSupportTypes,proto3" json:"bit_evse_support_types,omitempty"` // 设备支持类型(每一位标示参考EvseSupportTypePos)
}

func (x *InfoByConnectorAndCustomerResp) Reset() {
	*x = InfoByConnectorAndCustomerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoByConnectorAndCustomerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoByConnectorAndCustomerResp) ProtoMessage() {}

func (x *InfoByConnectorAndCustomerResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoByConnectorAndCustomerResp.ProtoReflect.Descriptor instead.
func (*InfoByConnectorAndCustomerResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{55}
}

func (x *InfoByConnectorAndCustomerResp) GetEvseInfo() *coregw.EvseResp {
	if x != nil {
		return x.EvseInfo
	}
	return nil
}

func (x *InfoByConnectorAndCustomerResp) GetBitEvseSupportTypes() uint64 {
	if x != nil {
		return x.BitEvseSupportTypes
	}
	return 0
}

type ConnectorInfoByCustomeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId uint64 `protobuf:"varint,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` // 枪头id
	CustomerId  uint64 `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`    // 用户id
}

func (x *ConnectorInfoByCustomeReq) Reset() {
	*x = ConnectorInfoByCustomeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorInfoByCustomeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorInfoByCustomeReq) ProtoMessage() {}

func (x *ConnectorInfoByCustomeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorInfoByCustomeReq.ProtoReflect.Descriptor instead.
func (*ConnectorInfoByCustomeReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{56}
}

func (x *ConnectorInfoByCustomeReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *ConnectorInfoByCustomeReq) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type ConnectorInfoByCustomeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorInfo       *coregw.ConnectorResp `protobuf:"bytes,1,opt,name=connector_info,json=connectorInfo,proto3" json:"connector_info,omitempty"`                        // 枪头信息
	BitEvseSupportTypes uint64                `protobuf:"varint,2,opt,name=bit_evse_support_types,json=bitEvseSupportTypes,proto3" json:"bit_evse_support_types,omitempty"` // 设备支持类型(每一位标示参考EvseSupportTypePos)
}

func (x *ConnectorInfoByCustomeResp) Reset() {
	*x = ConnectorInfoByCustomeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorInfoByCustomeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorInfoByCustomeResp) ProtoMessage() {}

func (x *ConnectorInfoByCustomeResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorInfoByCustomeResp.ProtoReflect.Descriptor instead.
func (*ConnectorInfoByCustomeResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{57}
}

func (x *ConnectorInfoByCustomeResp) GetConnectorInfo() *coregw.ConnectorResp {
	if x != nil {
		return x.ConnectorInfo
	}
	return nil
}

func (x *ConnectorInfoByCustomeResp) GetBitEvseSupportTypes() uint64 {
	if x != nil {
		return x.BitEvseSupportTypes
	}
	return 0
}

// 获取调用方信息
type CallerByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallerByIDReq) Reset() {
	*x = CallerByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerByIDReq) ProtoMessage() {}

func (x *CallerByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerByIDReq.ProtoReflect.Descriptor instead.
func (*CallerByIDReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{58}
}

type CallerByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caller *Caller `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
}

func (x *CallerByIDResp) Reset() {
	*x = CallerByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerByIDResp) ProtoMessage() {}

func (x *CallerByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerByIDResp.ProtoReflect.Descriptor instead.
func (*CallerByIDResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{59}
}

func (x *CallerByIDResp) GetCaller() *Caller {
	if x != nil {
		return x.Caller
	}
	return nil
}

type Caller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                     //调用方ID
	OperatorId  uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`   //运营商ID
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                  //名称
	ApiKey      string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`                //通讯的key，生成后就不允许更改了
	CallbackUrl string `protobuf:"bytes,5,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"` //回调地址
	ApiId       string `protobuf:"bytes,6,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`                   // api id
}

func (x *Caller) Reset() {
	*x = Caller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Caller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Caller) ProtoMessage() {}

func (x *Caller) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Caller.ProtoReflect.Descriptor instead.
func (*Caller) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{60}
}

func (x *Caller) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Caller) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Caller) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Caller) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *Caller) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *Caller) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

// 同步用户信息
type SyncUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *customer.CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户基本信息
}

func (x *SyncUserInfoReq) Reset() {
	*x = SyncUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncUserInfoReq) ProtoMessage() {}

func (x *SyncUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncUserInfoReq.ProtoReflect.Descriptor instead.
func (*SyncUserInfoReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{61}
}

func (x *SyncUserInfoReq) GetCustomer() *customer.CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

type SyncUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *customer.CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 返回平台上用户的信息
}

func (x *SyncUserInfoResp) Reset() {
	*x = SyncUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncUserInfoResp) ProtoMessage() {}

func (x *SyncUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncUserInfoResp.ProtoReflect.Descriptor instead.
func (*SyncUserInfoResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{62}
}

func (x *SyncUserInfoResp) GetCustomer() *customer.CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

// 结算订单
type OrderSettlementResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderSettlementResp) Reset() {
	*x = OrderSettlementResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSettlementResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSettlementResp) ProtoMessage() {}

func (x *OrderSettlementResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSettlementResp.ProtoReflect.Descriptor instead.
func (*OrderSettlementResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{63}
}

// 获取站点的管理员
type GetStationManagersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` // 站点的管理员，含父级
}

func (x *GetStationManagersResp) Reset() {
	*x = GetStationManagersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStationManagersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStationManagersResp) ProtoMessage() {}

func (x *GetStationManagersResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStationManagersResp.ProtoReflect.Descriptor instead.
func (*GetStationManagersResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{64}
}

func (x *GetStationManagersResp) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// 资源配合
type GetQuotaLimitationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       QuotaLimitationType `protobuf:"varint,1,opt,name=type,proto3,enum=api.QuotaLimitationType" json:"type,omitempty"`  //类型
	ResourceId uint64              `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` //资源ID
}

func (x *GetQuotaLimitationReq) Reset() {
	*x = GetQuotaLimitationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuotaLimitationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaLimitationReq) ProtoMessage() {}

func (x *GetQuotaLimitationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuotaLimitationReq.ProtoReflect.Descriptor instead.
func (*GetQuotaLimitationReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{65}
}

func (x *GetQuotaLimitationReq) GetType() QuotaLimitationType {
	if x != nil {
		return x.Type
	}
	return QuotaLimitationType_QLType_Operator_Cards
}

func (x *GetQuotaLimitationReq) GetResourceId() uint64 {
	if x != nil {
		return x.ResourceId
	}
	return 0
}

type GetQuotaLimitationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"` //限制，-1为不限制
}

func (x *GetQuotaLimitationResp) Reset() {
	*x = GetQuotaLimitationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuotaLimitationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuotaLimitationResp) ProtoMessage() {}

func (x *GetQuotaLimitationResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuotaLimitationResp.ProtoReflect.Descriptor instead.
func (*GetQuotaLimitationResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{66}
}

func (x *GetQuotaLimitationResp) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 白名单
type CheckIsInWhiteListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationId     uint64 `protobuf:"varint,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`             //站点ID
	AuthorizeMode int32  `protobuf:"varint,2,opt,name=authorize_mode,json=authorizeMode,proto3" json:"authorize_mode,omitempty"` // 鉴权模式
	AuthorizeId   string `protobuf:"bytes,3,opt,name=authorize_id,json=authorizeId,proto3" json:"authorize_id,omitempty"`        //鉴权ID
}

func (x *CheckIsInWhiteListReq) Reset() {
	*x = CheckIsInWhiteListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsInWhiteListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsInWhiteListReq) ProtoMessage() {}

func (x *CheckIsInWhiteListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsInWhiteListReq.ProtoReflect.Descriptor instead.
func (*CheckIsInWhiteListReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{67}
}

func (x *CheckIsInWhiteListReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *CheckIsInWhiteListReq) GetAuthorizeMode() int32 {
	if x != nil {
		return x.AuthorizeMode
	}
	return 0
}

func (x *CheckIsInWhiteListReq) GetAuthorizeId() string {
	if x != nil {
		return x.AuthorizeId
	}
	return ""
}

type CheckIsInWhiteListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res bool `protobuf:"varint,1,opt,name=res,proto3" json:"res,omitempty"` //false: 不在, true: 在
}

func (x *CheckIsInWhiteListResp) Reset() {
	*x = CheckIsInWhiteListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIsInWhiteListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsInWhiteListResp) ProtoMessage() {}

func (x *CheckIsInWhiteListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsInWhiteListResp.ProtoReflect.Descriptor instead.
func (*CheckIsInWhiteListResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{68}
}

func (x *CheckIsInWhiteListResp) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

//告警
type WarningEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseId    uint64 `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`         // 设备ID
	State     int32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`                         // 状态
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`                              // 告警的key，方便从redis取出值来渲染到事件中
	UniqueKey string `protobuf:"bytes,5,opt,name=unique_key,json=uniqueKey,proto3" json:"unique_key,omitempty"` // 唯一的key，用于数据库排重
}

func (x *WarningEventReq) Reset() {
	*x = WarningEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningEventReq) ProtoMessage() {}

func (x *WarningEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningEventReq.ProtoReflect.Descriptor instead.
func (*WarningEventReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{69}
}

func (x *WarningEventReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *WarningEventReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *WarningEventReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WarningEventReq) GetUniqueKey() string {
	if x != nil {
		return x.UniqueKey
	}
	return ""
}

type WarningEventResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WarningEventResp) Reset() {
	*x = WarningEventResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningEventResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningEventResp) ProtoMessage() {}

func (x *WarningEventResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningEventResp.ProtoReflect.Descriptor instead.
func (*WarningEventResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{70}
}

//证书
type LicenseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 设备ID
}

func (x *LicenseReq) Reset() {
	*x = LicenseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseReq) ProtoMessage() {}

func (x *LicenseReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseReq.ProtoReflect.Descriptor instead.
func (*LicenseReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{71}
}

func (x *LicenseReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type LicenseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiredAt int32 `protobuf:"varint,1,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"` // 过期时间，如果expired_at=0，就说明是永久有效的设备
}

func (x *LicenseResp) Reset() {
	*x = LicenseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseResp) ProtoMessage() {}

func (x *LicenseResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseResp.ProtoReflect.Descriptor instead.
func (*LicenseResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{72}
}

func (x *LicenseResp) GetExpiredAt() int32 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

//ActiveReq
type ActiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                            // 设备ID
	OperatorId    uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`          //运营商ID
	Time          int32  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                        // 激活日期
	IsDc          bool   `protobuf:"varint,4,opt,name=is_dc,json=isDc,proto3" json:"is_dc,omitempty"`                            // 是否是直流
	ConnectorNums int32  `protobuf:"varint,5,opt,name=connector_nums,json=connectorNums,proto3" json:"connector_nums,omitempty"` //枪数量
	IsCar         bool   `protobuf:"varint,6,opt,name=is_car,json=isCar,proto3" json:"is_car,omitempty"`                         //是否汽车设备，true:汽车 false:电瓶车
}

func (x *ActiveReq) Reset() {
	*x = ActiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveReq) ProtoMessage() {}

func (x *ActiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveReq.ProtoReflect.Descriptor instead.
func (*ActiveReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{73}
}

func (x *ActiveReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActiveReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ActiveReq) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ActiveReq) GetIsDc() bool {
	if x != nil {
		return x.IsDc
	}
	return false
}

func (x *ActiveReq) GetConnectorNums() int32 {
	if x != nil {
		return x.ConnectorNums
	}
	return 0
}

func (x *ActiveReq) GetIsCar() bool {
	if x != nil {
		return x.IsCar
	}
	return false
}

type ActiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseId uint64 `protobuf:"varint,1,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"` //证书ID
	ExpiredAt int32  `protobuf:"varint,2,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"` //过期时间，如果expired_at=0，说明永久有效
}

func (x *ActiveResp) Reset() {
	*x = ActiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveResp) ProtoMessage() {}

func (x *ActiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveResp.ProtoReflect.Descriptor instead.
func (*ActiveResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{74}
}

func (x *ActiveResp) GetLicenseId() uint64 {
	if x != nil {
		return x.LicenseId
	}
	return 0
}

func (x *ActiveResp) GetExpiredAt() int32 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

//HardwareReq --2020/12/23 17:39
type HardwareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareId uint64 `protobuf:"varint,1,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"` //固件id
}

func (x *HardwareReq) Reset() {
	*x = HardwareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareReq) ProtoMessage() {}

func (x *HardwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareReq.ProtoReflect.Descriptor instead.
func (*HardwareReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{75}
}

func (x *HardwareReq) GetHardwareId() uint64 {
	if x != nil {
		return x.HardwareId
	}
	return 0
}

type HardwareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             //固件id
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                            //路径
	Note     string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`                          //备注
	CheckSum string `protobuf:"bytes,4,opt,name=check_sum,json=checkSum,proto3" json:"check_sum,omitempty"`  //校验md5
	IsExists bool   `protobuf:"varint,5,opt,name=is_exists,json=isExists,proto3" json:"is_exists,omitempty"` //false:不存在 true:存在
}

func (x *HardwareResp) Reset() {
	*x = HardwareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareResp) ProtoMessage() {}

func (x *HardwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareResp.ProtoReflect.Descriptor instead.
func (*HardwareResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{76}
}

func (x *HardwareResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HardwareResp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HardwareResp) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *HardwareResp) GetCheckSum() string {
	if x != nil {
		return x.CheckSum
	}
	return ""
}

func (x *HardwareResp) GetIsExists() bool {
	if x != nil {
		return x.IsExists
	}
	return false
}

//CreateStationReq
type CreateStationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint64  `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //运营商ID
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                //名称
	Lat        float32 `protobuf:"fixed32,3,opt,name=lat,proto3" json:"lat,omitempty"`                                //纬度
	Lng        float32 `protobuf:"fixed32,4,opt,name=lng,proto3" json:"lng,omitempty"`                                //经度
}

func (x *CreateStationReq) Reset() {
	*x = CreateStationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStationReq) ProtoMessage() {}

func (x *CreateStationReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStationReq.ProtoReflect.Descriptor instead.
func (*CreateStationReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{77}
}

func (x *CreateStationReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CreateStationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStationReq) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *CreateStationReq) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

//CreateStationResp
type CreateStationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //站点ID
}

func (x *CreateStationResp) Reset() {
	*x = CreateStationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStationResp) ProtoMessage() {}

func (x *CreateStationResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStationResp.ProtoReflect.Descriptor instead.
func (*CreateStationResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{78}
}

func (x *CreateStationResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

//UpdateStationLatLngReq
type UpdateStationLatLngReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    //站点ID
	Lat float32 `protobuf:"fixed32,3,opt,name=lat,proto3" json:"lat,omitempty"` //纬度
	Lng float32 `protobuf:"fixed32,4,opt,name=lng,proto3" json:"lng,omitempty"` //经度
}

func (x *UpdateStationLatLngReq) Reset() {
	*x = UpdateStationLatLngReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStationLatLngReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStationLatLngReq) ProtoMessage() {}

func (x *UpdateStationLatLngReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStationLatLngReq.ProtoReflect.Descriptor instead.
func (*UpdateStationLatLngReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateStationLatLngReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateStationLatLngReq) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *UpdateStationLatLngReq) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

//UpdateStationLatLngResp
type UpdateStationLatLngResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateStationLatLngResp) Reset() {
	*x = UpdateStationLatLngResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStationLatLngResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStationLatLngResp) ProtoMessage() {}

func (x *UpdateStationLatLngResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStationLatLngResp.ProtoReflect.Descriptor instead.
func (*UpdateStationLatLngResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{80}
}

// WarningHistoryEventReq
type WarningHistoryEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //设备ID
	StartTime int32  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间
	EndTime   int32  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间
}

func (x *WarningHistoryEventReq) Reset() {
	*x = WarningHistoryEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningHistoryEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningHistoryEventReq) ProtoMessage() {}

func (x *WarningHistoryEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningHistoryEventReq.ProtoReflect.Descriptor instead.
func (*WarningHistoryEventReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{81}
}

func (x *WarningHistoryEventReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WarningHistoryEventReq) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *WarningHistoryEventReq) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// WarningHistoryEventResp
type WarningHistoryEventResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*WarningHistoryEventResp_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` //事件
}

func (x *WarningHistoryEventResp) Reset() {
	*x = WarningHistoryEventResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningHistoryEventResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningHistoryEventResp) ProtoMessage() {}

func (x *WarningHistoryEventResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningHistoryEventResp.ProtoReflect.Descriptor instead.
func (*WarningHistoryEventResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{82}
}

func (x *WarningHistoryEventResp) GetEvents() []*WarningHistoryEventResp_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type CallerByOperatorIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *CallerByOperatorIDReq) Reset() {
	*x = CallerByOperatorIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerByOperatorIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerByOperatorIDReq) ProtoMessage() {}

func (x *CallerByOperatorIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerByOperatorIDReq.ProtoReflect.Descriptor instead.
func (*CallerByOperatorIDReq) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{83}
}

func (x *CallerByOperatorIDReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type CallerByOperatorIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caller *Caller `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
}

func (x *CallerByOperatorIDResp) Reset() {
	*x = CallerByOperatorIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerByOperatorIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerByOperatorIDResp) ProtoMessage() {}

func (x *CallerByOperatorIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerByOperatorIDResp.ProtoReflect.Descriptor instead.
func (*CallerByOperatorIDResp) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{84}
}

func (x *CallerByOperatorIDResp) GetCaller() *Caller {
	if x != nil {
		return x.Caller
	}
	return nil
}

type WarningHistoryEventResp_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime int32 `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"` //故障结束时间
	Code    int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`                      //故障代码
}

func (x *WarningHistoryEventResp_Event) Reset() {
	*x = WarningHistoryEventResp_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningHistoryEventResp_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningHistoryEventResp_Event) ProtoMessage() {}

func (x *WarningHistoryEventResp_Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningHistoryEventResp_Event.ProtoReflect.Descriptor instead.
func (*WarningHistoryEventResp_Event) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{82, 0}
}

func (x *WarningHistoryEventResp_Event) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *WarningHistoryEventResp_Event) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x98, 0x04, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6b, 0x77, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4b, 0x77, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x38, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x85, 0x06, 0x0a, 0x0d,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x6b, 0x77, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4b, 0x77, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x43, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x16,
	0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x31, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x15, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9b, 0x02,
	0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x50,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x1a, 0x0a, 0x18, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x22, 0x32, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22,
	0xae, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x12, 0x0a, 0x10, 0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x68, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x22, 0x36,
	0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x21, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x10, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x22, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x1e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x22, 0x26, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x13, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65,
	0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x6f,
	0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x2f,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x42, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x32, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x22, 0x69, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73,
	0x70, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xed, 0x09, 0x0a, 0x07,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x64, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x42, 0x75, 0x73, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x16,
	0x76, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x76, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x1c,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x45, 0x48,
	0x49, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x45,
	0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x22,
	0x3a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x22, 0x84, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x5f, 0x43, 0x41, 0x52,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x5f, 0x42, 0x49, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x10, 0x01, 0x22, 0x8b, 0x06, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x69, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x01, 0x52, 0x18, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x22, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x30, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x22, 0x36, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x07, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x03,
	0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x64, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x64, 0x6c, 0x65, 0x44, 0x63, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x64, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x63, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x6c, 0x65, 0x41, 0x63, 0x4e, 0x75, 0x6d, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x5f, 0x6e, 0x75, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63,
	0x4e, 0x75, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x73, 0x22, 0x29, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x2a,
	0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7a, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x1d, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2d, 0x0a, 0x09, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x65, 0x76, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x33, 0x0a, 0x16, 0x62, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x62, 0x69, 0x74, 0x45, 0x76, 0x73, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x73, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x62, 0x69, 0x74, 0x45, 0x76, 0x73, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x22, 0x35, 0x0a, 0x0e, 0x43, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x22, 0xa0, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x69, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x10, 0x53, 0x79,
	0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2a, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x49, 0x6e, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x64,
	0x22, 0x2a, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x49, 0x6e, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x0f,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0x12, 0x0a, 0x10, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x1c, 0x0a, 0x0a, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2c, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xa3, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x64, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x69, 0x73, 0x44, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x43, 0x61, 0x72, 0x22, 0x4a, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x2e, 0x0a, 0x0b, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x22, 0x7e, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x22, 0x6b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x22, 0x23,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6e,
	0x67, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x62, 0x0a, 0x16,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x36, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x38, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x16, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2a, 0x20, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x00, 0x2a, 0x48, 0x0a, 0x09, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x45,
	0x76, 0x73, 0x65, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x54, 0x5f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x54, 0x5f, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x54, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x10, 0x03, 0x2a,
	0x5a, 0x0a, 0x12, 0x45, 0x76, 0x73, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x53, 0x54, 0x50, 0x5f, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x54,
	0x50, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x79, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x53, 0x54, 0x50, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x13, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x4c, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x10, 0x02, 0x32, 0x82, 0x08, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x40, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x39, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x15, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0a,
	0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a,
	0x07, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e, 0x12, 0x14, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x49,
	0x4e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x09, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x56,
	0x49, 0x4e, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x6e,
	0x62, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x49, 0x4e, 0x73, 0x12,
	0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x49, 0x4e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5b, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x03, 0x50, 0x61, 0x79, 0x12, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x12, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x50, 0x75, 0x73,
	0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0xad, 0x02, 0x0a, 0x0b,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1c, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x32, 0xeb, 0x03, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x51, 0x52, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a,
	0x09, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x45, 0x76,
	0x73, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x42, 0x79, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0xb8, 0x03, 0x0a, 0x0b, 0x45, 0x76,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a, 0x1a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x13, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x07, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x32, 0xa2, 0x04, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a,
	0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x79, 0x12, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x73, 0x49, 0x6e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x49, 0x6e, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x49, 0x6e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x12, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x32, 0xb4, 0x06, 0x0a, 0x0c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4a, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a,
	0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x52, 0x0a, 0x17, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4f, 0x75, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x35, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x12, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xf7, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0xb7, 0x02, 0x0a, 0x0c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x2b, 0x48, 0x03, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x6f, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x50, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_api_proto_goTypes = []interface{}{
	(BannerType)(0),          // 0: api.BannerType
	(BannerLoc)(0),           // 1: api.BannerLoc
	(CouponType)(0),          // 2: api.CouponType
	(EvseSupportTypePos)(0),  // 3: api.EvseSupportTypePos
	(QuotaLimitationType)(0), // 4: api.QuotaLimitationType
	(Station_Type)(0),        // 5: api.Station.Type
	(Station_State)(0),       // 6: api.Station.State
	(RemoteStartChargerAmount_RemoteStartChargerAmountType)(0), // 7: api.RemoteStartChargerAmount.RemoteStartChargerAmountType
	(*CreateOrderReq)(nil),                         // 8: api.CreateOrderReq
	(*CreateOrderResp)(nil),                        // 9: api.CreateOrderResp
	(*ConfirmOrderReq)(nil),                        // 10: api.ConfirmOrderReq
	(*ConfirmOrderResp)(nil),                       // 11: api.ConfirmOrderResp
	(*ApplyOrderReq)(nil),                          // 12: api.ApplyOrderReq
	(*ApplyOrderResp)(nil),                         // 13: api.ApplyOrderResp
	(*OrderPayCallbackReq)(nil),                    // 14: api.OrderPayCallbackReq
	(*OrderPayCallbackResp)(nil),                   // 15: api.OrderPayCallbackResp
	(*ApplyOrderBackPayReq)(nil),                   // 16: api.ApplyOrderBackPayReq
	(*ApplyOrderBackPayResp)(nil),                  // 17: api.ApplyOrderBackPayResp
	(*OrderBackPayCallbackReq)(nil),                // 18: api.OrderBackPayCallbackReq
	(*OrderBackPayCallbackResp)(nil),               // 19: api.OrderBackPayCallbackResp
	(*RefundNotifyReq)(nil),                        // 20: api.RefundNotifyReq
	(*RefundNotifyResp)(nil),                       // 21: api.RefundNotifyResp
	(*GetActivityReq)(nil),                         // 22: api.GetActivityReq
	(*GetActivityResp)(nil),                        // 23: api.GetActivityResp
	(*GetStationByIDReq)(nil),                      // 24: api.GetStationByIDReq
	(*SetOrderSnapshootNormalReq)(nil),             // 25: api.SetOrderSnapshootNormalReq
	(*SetOrderSnapshootNormalResp)(nil),            // 26: api.SetOrderSnapshootNormalResp
	(*GetOperatorByIDReq)(nil),                     // 27: api.GetOperatorByIDReq
	(*GetByCodeReq)(nil),                           // 28: api.GetByCodeReq
	(*PushAlertMsgReq)(nil),                        // 29: api.PushAlertMsgReq
	(*PushAlertMsgResp)(nil),                       // 30: api.PushAlertMsgResp
	(*LoginReq)(nil),                               // 31: api.LoginReq
	(*LoginResp)(nil),                              // 32: api.LoginResp
	(*BaseInfoByIDReq)(nil),                        // 33: api.BaseInfoByIDReq
	(*BaseInfoByIDResp)(nil),                       // 34: api.BaseInfoByIDResp
	(*OrderInfoByIDReq)(nil),                       // 35: api.OrderInfoByIDReq
	(*OrderInfoByOutChargeOrderIDReq)(nil),         // 36: api.OrderInfoByOutChargeOrderIDReq
	(*OrderInfoResp)(nil),                          // 37: api.OrderInfoResp
	(*BatchOrderInfosReq)(nil),                     // 38: api.BatchOrderInfosReq
	(*BatchOrderInfosResp)(nil),                    // 39: api.BatchOrderInfosResp
	(*GetPriceSchemeReq)(nil),                      // 40: api.GetPriceSchemeReq
	(*GetPriceSchemeResp)(nil),                     // 41: api.GetPriceSchemeResp
	(*StationInfoReq)(nil),                         // 42: api.StationInfoReq
	(*StationInfoResp)(nil),                        // 43: api.StationInfoResp
	(*CheckGroupPayReq)(nil),                       // 44: api.CheckGroupPayReq
	(*CheckGroupPayResp)(nil),                      // 45: api.CheckGroupPayResp
	(*StationListReq)(nil),                         // 46: api.StationListReq
	(*StationListResp)(nil),                        // 47: api.StationListResp
	(*Station)(nil),                                // 48: api.Station
	(*RemoteStartChargerAmount)(nil),               // 49: api.RemoteStartChargerAmount
	(*Operator)(nil),                               // 50: api.Operator
	(*GetNoticeReq)(nil),                           // 51: api.GetNoticeReq
	(*GetNoticeResp)(nil),                          // 52: api.GetNoticeResp
	(*GetBannerReq)(nil),                           // 53: api.GetBannerReq
	(*GetBannerResp)(nil),                          // 54: api.GetBannerResp
	(*Banner)(nil),                                 // 55: api.banner
	(*Parking)(nil),                                // 56: api.Parking
	(*ConnectorInfoByURLReq)(nil),                  // 57: api.ConnectorInfoByURLReq
	(*RemoteStopReq)(nil),                          // 58: api.RemoteStopReq
	(*RemoteStopResp)(nil),                         // 59: api.RemoteStopResp
	(*ConnectorsByStationReq)(nil),                 // 60: api.ConnectorsByStationReq
	(*ConnectorsByStationResp)(nil),                // 61: api.ConnectorsByStationResp
	(*InfoByConnectorAndCustomerReq)(nil),          // 62: api.InfoByConnectorAndCustomerReq
	(*InfoByConnectorAndCustomerResp)(nil),         // 63: api.InfoByConnectorAndCustomerResp
	(*ConnectorInfoByCustomeReq)(nil),              // 64: api.ConnectorInfoByCustomeReq
	(*ConnectorInfoByCustomeResp)(nil),             // 65: api.ConnectorInfoByCustomeResp
	(*CallerByIDReq)(nil),                          // 66: api.CallerByIDReq
	(*CallerByIDResp)(nil),                         // 67: api.CallerByIDResp
	(*Caller)(nil),                                 // 68: api.Caller
	(*SyncUserInfoReq)(nil),                        // 69: api.SyncUserInfoReq
	(*SyncUserInfoResp)(nil),                       // 70: api.SyncUserInfoResp
	(*OrderSettlementResp)(nil),                    // 71: api.OrderSettlementResp
	(*GetStationManagersResp)(nil),                 // 72: api.GetStationManagersResp
	(*GetQuotaLimitationReq)(nil),                  // 73: api.GetQuotaLimitationReq
	(*GetQuotaLimitationResp)(nil),                 // 74: api.GetQuotaLimitationResp
	(*CheckIsInWhiteListReq)(nil),                  // 75: api.CheckIsInWhiteListReq
	(*CheckIsInWhiteListResp)(nil),                 // 76: api.CheckIsInWhiteListResp
	(*WarningEventReq)(nil),                        // 77: api.WarningEventReq
	(*WarningEventResp)(nil),                       // 78: api.WarningEventResp
	(*LicenseReq)(nil),                             // 79: api.LicenseReq
	(*LicenseResp)(nil),                            // 80: api.LicenseResp
	(*ActiveReq)(nil),                              // 81: api.ActiveReq
	(*ActiveResp)(nil),                             // 82: api.ActiveResp
	(*HardwareReq)(nil),                            // 83: api.HardwareReq
	(*HardwareResp)(nil),                           // 84: api.HardwareResp
	(*CreateStationReq)(nil),                       // 85: api.CreateStationReq
	(*CreateStationResp)(nil),                      // 86: api.CreateStationResp
	(*UpdateStationLatLngReq)(nil),                 // 87: api.UpdateStationLatLngReq
	(*UpdateStationLatLngResp)(nil),                // 88: api.UpdateStationLatLngResp
	(*WarningHistoryEventReq)(nil),                 // 89: api.WarningHistoryEventReq
	(*WarningHistoryEventResp)(nil),                // 90: api.WarningHistoryEventResp
	(*CallerByOperatorIDReq)(nil),                  // 91: api.CallerByOperatorIDReq
	(*CallerByOperatorIDResp)(nil),                 // 92: api.CallerByOperatorIDResp
	(*WarningHistoryEventResp_Event)(nil),          // 93: api.WarningHistoryEventResp.Event
	(*customer.CustomerReq)(nil),                   // 94: customer.CustomerReq
	(common.PayMode)(0),                            // 95: common.PayMode
	(common.PayChannel)(0),                         // 96: common.PayChannel
	(*coregw.Order)(nil),                           // 97: coregw.Order
	(*customer.CustomerInfo)(nil),                  // 98: customer.CustomerInfo
	(common.AuthModeChannel)(0),                    // 99: common.AuthModeChannel
	(customer.ActivityType)(0),                     // 100: customer.ActivityType
	(*customer.Activity)(nil),                      // 101: customer.Activity
	(*charger.SetTariffReq)(nil),                   // 102: Goiot.Protocol.Charger.SetTariffReq
	(*common.PageReq)(nil),                         // 103: common.PageReq
	(*common.PageResp)(nil),                        // 104: common.PageResp
	(*coregw.Connector)(nil),                       // 105: coregw.Connector
	(*coregw.EvseResp)(nil),                        // 106: coregw.EvseResp
	(*coregw.ConnectorResp)(nil),                   // 107: coregw.ConnectorResp
	(*customer.CustomerInfoReq)(nil),               // 108: customer.CustomerInfoReq
	(*customer.BindCardReq)(nil),                   // 109: customer.BindCardReq
	(*customer.UnbindCardReq)(nil),                 // 110: customer.UnbindCardReq
	(*customer.BindVINReq)(nil),                    // 111: customer.BindVINReq
	(*customer.UnbindVINReq)(nil),                  // 112: customer.UnbindVINReq
	(*customer.CustomerChargeApplyReq)(nil),        // 113: customer.CustomerChargeApplyReq
	(*customer.CustomerChargeCallbackReq)(nil),     // 114: customer.CustomerChargeCallbackReq
	(*customer.CustomerPayReq)(nil),                // 115: customer.CustomerPayReq
	(*customer.CustomerQueryPayReq)(nil),           // 116: customer.CustomerQueryPayReq
	(*customer.CustomerRefundReq)(nil),             // 117: customer.CustomerRefundReq
	(*customer.TransactionQueryByCustomerReq)(nil), // 118: customer.TransactionQueryByCustomerReq
	(*customer.CardsByCustomerReq)(nil),            // 119: customer.CardsByCustomerReq
	(*customer.CardInfoReq)(nil),                   // 120: customer.CardInfoReq
	(*customer.CardChargeApplyReq)(nil),            // 121: customer.CardChargeApplyReq
	(*customer.CardChargeCallbackReq)(nil),         // 122: customer.CardChargeCallbackReq
	(*coregw.ConnectorReq)(nil),                    // 123: coregw.ConnectorReq
	(*coregw.ConnectorByQRCodeReq)(nil),            // 124: coregw.ConnectorByQRCodeReq
	(*coregw.ConnectorsByEvseReq)(nil),             // 125: coregw.ConnectorsByEvseReq
	(*coregw.EvseReq)(nil),                         // 126: coregw.EvseReq
	(*customer.CustomerInfoResp)(nil),              // 127: customer.CustomerInfoResp
	(*customer.BindCardResp)(nil),                  // 128: customer.BindCardResp
	(*customer.UnbindCardResp)(nil),                // 129: customer.UnbindCardResp
	(*customer.BindVINResp)(nil),                   // 130: customer.BindVINResp
	(*customer.UnbindVINResp)(nil),                 // 131: customer.UnbindVINResp
	(*customer.ListVINsResp)(nil),                  // 132: customer.ListVINsResp
	(*customer.CustomerChargeApplyResp)(nil),       // 133: customer.CustomerChargeApplyResp
	(*customer.CustomerChargeCallbackResp)(nil),    // 134: customer.CustomerChargeCallbackResp
	(*customer.CustomerPayResp)(nil),               // 135: customer.CustomerPayResp
	(*customer.CustomerRefundResp)(nil),            // 136: customer.CustomerRefundResp
	(*customer.TransactionsResp)(nil),              // 137: customer.TransactionsResp
	(*customer.CardListResp)(nil),                  // 138: customer.CardListResp
	(*customer.CardInfoResp)(nil),                  // 139: customer.CardInfoResp
	(*customer.CardChargeApplyResp)(nil),           // 140: customer.CardChargeApplyResp
	(*customer.CardChargeCallbackResp)(nil),        // 141: customer.CardChargeCallbackResp
	(*coregw.ConnectorsByEvseResp)(nil),            // 142: coregw.ConnectorsByEvseResp
}
var file_api_proto_depIdxs = []int32{
	94,  // 0: api.CreateOrderReq.customer:type_name -> customer.CustomerReq
	95,  // 1: api.CreateOrderReq.pay_mode:type_name -> common.PayMode
	96,  // 2: api.CreateOrderReq.pay_channel:type_name -> common.PayChannel
	2,   // 3: api.CreateOrderReq.coupon_type:type_name -> api.CouponType
	97,  // 4: api.CreateOrderResp.order:type_name -> coregw.Order
	48,  // 5: api.CreateOrderResp.station:type_name -> api.Station
	98,  // 6: api.ApplyOrderReq.customer:type_name -> customer.CustomerInfo
	95,  // 7: api.ApplyOrderReq.pay_mode:type_name -> common.PayMode
	96,  // 8: api.ApplyOrderReq.pay_channel:type_name -> common.PayChannel
	2,   // 9: api.ApplyOrderReq.coupon_type:type_name -> api.CouponType
	99,  // 10: api.ApplyOrderReq.auth_mode_channel:type_name -> common.AuthModeChannel
	97,  // 11: api.ApplyOrderResp.order:type_name -> coregw.Order
	48,  // 12: api.ApplyOrderResp.station:type_name -> api.Station
	95,  // 13: api.OrderBackPayCallbackReq.pay_mode:type_name -> common.PayMode
	96,  // 14: api.OrderBackPayCallbackReq.pay_channel:type_name -> common.PayChannel
	100, // 15: api.GetActivityReq.type:type_name -> customer.ActivityType
	101, // 16: api.GetActivityResp.activitys:type_name -> customer.Activity
	50,  // 17: api.LoginResp.operator:type_name -> api.Operator
	97,  // 18: api.BaseInfoByIDResp.order:type_name -> coregw.Order
	97,  // 19: api.OrderInfoResp.order:type_name -> coregw.Order
	48,  // 20: api.OrderInfoResp.station:type_name -> api.Station
	68,  // 21: api.OrderInfoResp.caller:type_name -> api.Caller
	98,  // 22: api.OrderInfoResp.user:type_name -> customer.CustomerInfo
	102, // 23: api.OrderInfoResp.price_scheme:type_name -> Goiot.Protocol.Charger.SetTariffReq
	37,  // 24: api.BatchOrderInfosResp.order_infos:type_name -> api.OrderInfoResp
	102, // 25: api.GetPriceSchemeResp.price_scheme:type_name -> Goiot.Protocol.Charger.SetTariffReq
	48,  // 26: api.StationInfoResp.station_info:type_name -> api.Station
	103, // 27: api.StationListReq.pagereq:type_name -> common.PageReq
	104, // 28: api.StationListResp.pageresp:type_name -> common.PageResp
	48,  // 29: api.StationListResp.stations:type_name -> api.Station
	50,  // 30: api.Station.operator:type_name -> api.Operator
	56,  // 31: api.Station.parking_area:type_name -> api.Parking
	49,  // 32: api.Station.remote_start_charger_amounts:type_name -> api.RemoteStartChargerAmount
	1,   // 33: api.GetBannerReq.loc:type_name -> api.BannerLoc
	55,  // 34: api.GetBannerResp.banners:type_name -> api.banner
	0,   // 35: api.banner.type:type_name -> api.BannerType
	1,   // 36: api.banner.loc:type_name -> api.BannerLoc
	97,  // 37: api.RemoteStopResp.order:type_name -> coregw.Order
	48,  // 38: api.RemoteStopResp.station:type_name -> api.Station
	103, // 39: api.ConnectorsByStationReq.pagereq:type_name -> common.PageReq
	104, // 40: api.ConnectorsByStationResp.pageresp:type_name -> common.PageResp
	105, // 41: api.ConnectorsByStationResp.connectors:type_name -> coregw.Connector
	106, // 42: api.InfoByConnectorAndCustomerResp.evse_info:type_name -> coregw.EvseResp
	107, // 43: api.ConnectorInfoByCustomeResp.connector_info:type_name -> coregw.ConnectorResp
	68,  // 44: api.CallerByIDResp.caller:type_name -> api.Caller
	98,  // 45: api.SyncUserInfoReq.customer:type_name -> customer.CustomerInfo
	98,  // 46: api.SyncUserInfoResp.customer:type_name -> customer.CustomerInfo
	4,   // 47: api.GetQuotaLimitationReq.type:type_name -> api.QuotaLimitationType
	93,  // 48: api.WarningHistoryEventResp.events:type_name -> api.WarningHistoryEventResp.Event
	68,  // 49: api.CallerByOperatorIDResp.caller:type_name -> api.Caller
	69,  // 50: api.UserService.SyncInfo:input_type -> api.SyncUserInfoReq
	108, // 51: api.UserService.GetInfo:input_type -> customer.CustomerInfoReq
	109, // 52: api.UserService.BindCard:input_type -> customer.BindCardReq
	110, // 53: api.UserService.UnbindCard:input_type -> customer.UnbindCardReq
	111, // 54: api.UserService.BindVIN:input_type -> customer.BindVINReq
	112, // 55: api.UserService.UnbindVIN:input_type -> customer.UnbindVINReq
	94,  // 56: api.UserService.ListVINs:input_type -> customer.CustomerReq
	113, // 57: api.UserService.ChargeApply:input_type -> customer.CustomerChargeApplyReq
	114, // 58: api.UserService.ChargeCallback:input_type -> customer.CustomerChargeCallbackReq
	115, // 59: api.UserService.Pay:input_type -> customer.CustomerPayReq
	116, // 60: api.UserService.QueryPay:input_type -> customer.CustomerQueryPayReq
	117, // 61: api.UserService.RefundToBalance:input_type -> customer.CustomerRefundReq
	22,  // 62: api.UserService.GetActivity:input_type -> api.GetActivityReq
	29,  // 63: api.UserService.PushAlertMsg:input_type -> api.PushAlertMsgReq
	118, // 64: api.UserService.Transactions:input_type -> customer.TransactionQueryByCustomerReq
	119, // 65: api.CardService.ListByCustomer:input_type -> customer.CardsByCustomerReq
	120, // 66: api.CardService.Info:input_type -> customer.CardInfoReq
	121, // 67: api.CardService.ChargeApply:input_type -> customer.CardChargeApplyReq
	122, // 68: api.CardService.ChargeCallback:input_type -> customer.CardChargeCallbackReq
	123, // 69: api.ConnectorService.Info:input_type -> coregw.ConnectorReq
	64,  // 70: api.ConnectorService.InfoByCustomer:input_type -> api.ConnectorInfoByCustomeReq
	124, // 71: api.ConnectorService.InfoByQRCode:input_type -> coregw.ConnectorByQRCodeReq
	57,  // 72: api.ConnectorService.InfoByURL:input_type -> api.ConnectorInfoByURLReq
	58,  // 73: api.ConnectorService.RemoteStop:input_type -> api.RemoteStopReq
	125, // 74: api.ConnectorService.ListByEvse:input_type -> coregw.ConnectorsByEvseReq
	60,  // 75: api.ConnectorService.ListByStation:input_type -> api.ConnectorsByStationReq
	126, // 76: api.EvseService.Info:input_type -> coregw.EvseReq
	62,  // 77: api.EvseService.InfoByConnectorAndCustomer:input_type -> api.InfoByConnectorAndCustomerReq
	77,  // 78: api.EvseService.WarningEvent:input_type -> api.WarningEventReq
	89,  // 79: api.EvseService.WarningHistoryEvent:input_type -> api.WarningHistoryEventReq
	79,  // 80: api.EvseService.License:input_type -> api.LicenseReq
	81,  // 81: api.EvseService.Active:input_type -> api.ActiveReq
	83,  // 82: api.EvseService.Hardware:input_type -> api.HardwareReq
	46,  // 83: api.StationService.List:input_type -> api.StationListReq
	42,  // 84: api.StationService.Info:input_type -> api.StationInfoReq
	44,  // 85: api.StationService.CheckGroupPay:input_type -> api.CheckGroupPayReq
	42,  // 86: api.StationService.GetStationManagers:input_type -> api.StationInfoReq
	40,  // 87: api.StationService.GetPriceScheme:input_type -> api.GetPriceSchemeReq
	75,  // 88: api.StationService.CheckIsInWhiteList:input_type -> api.CheckIsInWhiteListReq
	85,  // 89: api.StationService.CreateStation:input_type -> api.CreateStationReq
	87,  // 90: api.StationService.UpdateStationLatLng:input_type -> api.UpdateStationLatLngReq
	8,   // 91: api.OrderService.CreateOrder:input_type -> api.CreateOrderReq
	12,  // 92: api.OrderService.ApplyOrder:input_type -> api.ApplyOrderReq
	10,  // 93: api.OrderService.ConfirmOrder:input_type -> api.ConfirmOrderReq
	14,  // 94: api.OrderService.OrderPayCallback:input_type -> api.OrderPayCallbackReq
	16,  // 95: api.OrderService.ApplyOrderBackPay:input_type -> api.ApplyOrderBackPayReq
	18,  // 96: api.OrderService.OrderBackPayCallback:input_type -> api.OrderBackPayCallbackReq
	20,  // 97: api.OrderService.RefundNotify:input_type -> api.RefundNotifyReq
	36,  // 98: api.OrderService.InfoByOutChargerOrderID:input_type -> api.OrderInfoByOutChargeOrderIDReq
	33,  // 99: api.OrderService.BaseInfoByID:input_type -> api.BaseInfoByIDReq
	35,  // 100: api.OrderService.InfoByID:input_type -> api.OrderInfoByIDReq
	38,  // 101: api.OrderService.BatchOrderInfos:input_type -> api.BatchOrderInfosReq
	40,  // 102: api.OrderService.GetPriceScheme:input_type -> api.GetPriceSchemeReq
	28,  // 103: api.OperatorService.GetByCode:input_type -> api.GetByCodeReq
	51,  // 104: api.OperatorService.GetNotice:input_type -> api.GetNoticeReq
	53,  // 105: api.OperatorService.GetBanner:input_type -> api.GetBannerReq
	73,  // 106: api.OperatorService.GetQuotaLimitation:input_type -> api.GetQuotaLimitationReq
	31,  // 107: api.AdminService.Login:input_type -> api.LoginReq
	66,  // 108: api.AdminService.CallerByID:input_type -> api.CallerByIDReq
	91,  // 109: api.AdminService.CallerByOperatorID:input_type -> api.CallerByOperatorIDReq
	27,  // 110: api.AdminService.GetOperatorByID:input_type -> api.GetOperatorByIDReq
	24,  // 111: api.AdminService.GetStationByID:input_type -> api.GetStationByIDReq
	70,  // 112: api.UserService.SyncInfo:output_type -> api.SyncUserInfoResp
	127, // 113: api.UserService.GetInfo:output_type -> customer.CustomerInfoResp
	128, // 114: api.UserService.BindCard:output_type -> customer.BindCardResp
	129, // 115: api.UserService.UnbindCard:output_type -> customer.UnbindCardResp
	130, // 116: api.UserService.BindVIN:output_type -> customer.BindVINResp
	131, // 117: api.UserService.UnbindVIN:output_type -> customer.UnbindVINResp
	132, // 118: api.UserService.ListVINs:output_type -> customer.ListVINsResp
	133, // 119: api.UserService.ChargeApply:output_type -> customer.CustomerChargeApplyResp
	134, // 120: api.UserService.ChargeCallback:output_type -> customer.CustomerChargeCallbackResp
	135, // 121: api.UserService.Pay:output_type -> customer.CustomerPayResp
	135, // 122: api.UserService.QueryPay:output_type -> customer.CustomerPayResp
	136, // 123: api.UserService.RefundToBalance:output_type -> customer.CustomerRefundResp
	23,  // 124: api.UserService.GetActivity:output_type -> api.GetActivityResp
	30,  // 125: api.UserService.PushAlertMsg:output_type -> api.PushAlertMsgResp
	137, // 126: api.UserService.Transactions:output_type -> customer.TransactionsResp
	138, // 127: api.CardService.ListByCustomer:output_type -> customer.CardListResp
	139, // 128: api.CardService.Info:output_type -> customer.CardInfoResp
	140, // 129: api.CardService.ChargeApply:output_type -> customer.CardChargeApplyResp
	141, // 130: api.CardService.ChargeCallback:output_type -> customer.CardChargeCallbackResp
	107, // 131: api.ConnectorService.Info:output_type -> coregw.ConnectorResp
	65,  // 132: api.ConnectorService.InfoByCustomer:output_type -> api.ConnectorInfoByCustomeResp
	107, // 133: api.ConnectorService.InfoByQRCode:output_type -> coregw.ConnectorResp
	107, // 134: api.ConnectorService.InfoByURL:output_type -> coregw.ConnectorResp
	59,  // 135: api.ConnectorService.RemoteStop:output_type -> api.RemoteStopResp
	142, // 136: api.ConnectorService.ListByEvse:output_type -> coregw.ConnectorsByEvseResp
	61,  // 137: api.ConnectorService.ListByStation:output_type -> api.ConnectorsByStationResp
	106, // 138: api.EvseService.Info:output_type -> coregw.EvseResp
	63,  // 139: api.EvseService.InfoByConnectorAndCustomer:output_type -> api.InfoByConnectorAndCustomerResp
	78,  // 140: api.EvseService.WarningEvent:output_type -> api.WarningEventResp
	90,  // 141: api.EvseService.WarningHistoryEvent:output_type -> api.WarningHistoryEventResp
	80,  // 142: api.EvseService.License:output_type -> api.LicenseResp
	82,  // 143: api.EvseService.Active:output_type -> api.ActiveResp
	84,  // 144: api.EvseService.Hardware:output_type -> api.HardwareResp
	47,  // 145: api.StationService.List:output_type -> api.StationListResp
	43,  // 146: api.StationService.Info:output_type -> api.StationInfoResp
	45,  // 147: api.StationService.CheckGroupPay:output_type -> api.CheckGroupPayResp
	72,  // 148: api.StationService.GetStationManagers:output_type -> api.GetStationManagersResp
	41,  // 149: api.StationService.GetPriceScheme:output_type -> api.GetPriceSchemeResp
	76,  // 150: api.StationService.CheckIsInWhiteList:output_type -> api.CheckIsInWhiteListResp
	86,  // 151: api.StationService.CreateStation:output_type -> api.CreateStationResp
	88,  // 152: api.StationService.UpdateStationLatLng:output_type -> api.UpdateStationLatLngResp
	9,   // 153: api.OrderService.CreateOrder:output_type -> api.CreateOrderResp
	13,  // 154: api.OrderService.ApplyOrder:output_type -> api.ApplyOrderResp
	11,  // 155: api.OrderService.ConfirmOrder:output_type -> api.ConfirmOrderResp
	15,  // 156: api.OrderService.OrderPayCallback:output_type -> api.OrderPayCallbackResp
	17,  // 157: api.OrderService.ApplyOrderBackPay:output_type -> api.ApplyOrderBackPayResp
	19,  // 158: api.OrderService.OrderBackPayCallback:output_type -> api.OrderBackPayCallbackResp
	21,  // 159: api.OrderService.RefundNotify:output_type -> api.RefundNotifyResp
	37,  // 160: api.OrderService.InfoByOutChargerOrderID:output_type -> api.OrderInfoResp
	34,  // 161: api.OrderService.BaseInfoByID:output_type -> api.BaseInfoByIDResp
	37,  // 162: api.OrderService.InfoByID:output_type -> api.OrderInfoResp
	39,  // 163: api.OrderService.BatchOrderInfos:output_type -> api.BatchOrderInfosResp
	41,  // 164: api.OrderService.GetPriceScheme:output_type -> api.GetPriceSchemeResp
	50,  // 165: api.OperatorService.GetByCode:output_type -> api.Operator
	52,  // 166: api.OperatorService.GetNotice:output_type -> api.GetNoticeResp
	54,  // 167: api.OperatorService.GetBanner:output_type -> api.GetBannerResp
	74,  // 168: api.OperatorService.GetQuotaLimitation:output_type -> api.GetQuotaLimitationResp
	32,  // 169: api.AdminService.Login:output_type -> api.LoginResp
	67,  // 170: api.AdminService.CallerByID:output_type -> api.CallerByIDResp
	92,  // 171: api.AdminService.CallerByOperatorID:output_type -> api.CallerByOperatorIDResp
	50,  // 172: api.AdminService.GetOperatorByID:output_type -> api.Operator
	43,  // 173: api.AdminService.GetStationByID:output_type -> api.StationInfoResp
	112, // [112:174] is the sub-list for method output_type
	50,  // [50:112] is the sub-list for method input_type
	50,  // [50:50] is the sub-list for extension type_name
	50,  // [50:50] is the sub-list for extension extendee
	0,   // [0:50] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPayCallbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPayCallbackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrderBackPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrderBackPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBackPayCallbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBackPayCallbackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundNotifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStationByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderSnapshootNormalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderSnapshootNormalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperatorByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushAlertMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushAlertMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseInfoByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseInfoByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfoByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfoByOutChargeOrderIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOrderInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOrderInfosResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceSchemeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceSchemeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StationInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StationInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGroupPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGroupPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Station); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStartChargerAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNoticeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNoticeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBannerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorInfoByURLReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStopResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorsByStationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorsByStationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoByConnectorAndCustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoByConnectorAndCustomerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorInfoByCustomeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorInfoByCustomeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Caller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSettlementResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStationManagersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuotaLimitationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQuotaLimitationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsInWhiteListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIsInWhiteListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningEventResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStationLatLngReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStationLatLngResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningHistoryEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningHistoryEventResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerByOperatorIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerByOperatorIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningHistoryEventResp_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// 同步用户信息，登录时候触发
	SyncInfo(ctx context.Context, in *SyncUserInfoReq, opts ...grpc.CallOption) (*SyncUserInfoResp, error)
	// 获取用户信息
	GetInfo(ctx context.Context, in *customer.CustomerInfoReq, opts ...grpc.CallOption) (*customer.CustomerInfoResp, error)
	// 用户绑定卡
	BindCard(ctx context.Context, in *customer.BindCardReq, opts ...grpc.CallOption) (*customer.BindCardResp, error)
	// 解绑卡
	UnbindCard(ctx context.Context, in *customer.UnbindCardReq, opts ...grpc.CallOption) (*customer.UnbindCardResp, error)
	// 绑定VIN
	BindVIN(ctx context.Context, in *customer.BindVINReq, opts ...grpc.CallOption) (*customer.BindVINResp, error)
	// 解绑VIN
	UnbindVIN(ctx context.Context, in *customer.UnbindVINReq, opts ...grpc.CallOption) (*customer.UnbindVINResp, error)
	// vin列表
	ListVINs(ctx context.Context, in *customer.CustomerReq, opts ...grpc.CallOption) (*customer.ListVINsResp, error)
	// 用户余额充值申请
	ChargeApply(ctx context.Context, in *customer.CustomerChargeApplyReq, opts ...grpc.CallOption) (*customer.CustomerChargeApplyResp, error)
	// 用户余额充值, 微信/支付宝支付成功后回调
	ChargeCallback(ctx context.Context, in *customer.CustomerChargeCallbackReq, opts ...grpc.CallOption) (*customer.CustomerChargeCallbackResp, error)
	// 用户余额支付
	Pay(ctx context.Context, in *customer.CustomerPayReq, opts ...grpc.CallOption) (*customer.CustomerPayResp, error)
	// 查询余额支付
	QueryPay(ctx context.Context, in *customer.CustomerQueryPayReq, opts ...grpc.CallOption) (*customer.CustomerPayResp, error)
	// 退款到余额
	RefundToBalance(ctx context.Context, in *customer.CustomerRefundReq, opts ...grpc.CallOption) (*customer.CustomerRefundResp, error)
	// 获取活动
	GetActivity(ctx context.Context, in *GetActivityReq, opts ...grpc.CallOption) (*GetActivityResp, error)
	// 推送告警
	PushAlertMsg(ctx context.Context, in *PushAlertMsgReq, opts ...grpc.CallOption) (*PushAlertMsgResp, error)
	// 交易流水
	Transactions(ctx context.Context, in *customer.TransactionQueryByCustomerReq, opts ...grpc.CallOption) (*customer.TransactionsResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SyncInfo(ctx context.Context, in *SyncUserInfoReq, opts ...grpc.CallOption) (*SyncUserInfoResp, error) {
	out := new(SyncUserInfoResp)
	err := c.cc.Invoke(ctx, "/api.UserService/SyncInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInfo(ctx context.Context, in *customer.CustomerInfoReq, opts ...grpc.CallOption) (*customer.CustomerInfoResp, error) {
	out := new(customer.CustomerInfoResp)
	err := c.cc.Invoke(ctx, "/api.UserService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BindCard(ctx context.Context, in *customer.BindCardReq, opts ...grpc.CallOption) (*customer.BindCardResp, error) {
	out := new(customer.BindCardResp)
	err := c.cc.Invoke(ctx, "/api.UserService/BindCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnbindCard(ctx context.Context, in *customer.UnbindCardReq, opts ...grpc.CallOption) (*customer.UnbindCardResp, error) {
	out := new(customer.UnbindCardResp)
	err := c.cc.Invoke(ctx, "/api.UserService/UnbindCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BindVIN(ctx context.Context, in *customer.BindVINReq, opts ...grpc.CallOption) (*customer.BindVINResp, error) {
	out := new(customer.BindVINResp)
	err := c.cc.Invoke(ctx, "/api.UserService/BindVIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnbindVIN(ctx context.Context, in *customer.UnbindVINReq, opts ...grpc.CallOption) (*customer.UnbindVINResp, error) {
	out := new(customer.UnbindVINResp)
	err := c.cc.Invoke(ctx, "/api.UserService/UnbindVIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListVINs(ctx context.Context, in *customer.CustomerReq, opts ...grpc.CallOption) (*customer.ListVINsResp, error) {
	out := new(customer.ListVINsResp)
	err := c.cc.Invoke(ctx, "/api.UserService/ListVINs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChargeApply(ctx context.Context, in *customer.CustomerChargeApplyReq, opts ...grpc.CallOption) (*customer.CustomerChargeApplyResp, error) {
	out := new(customer.CustomerChargeApplyResp)
	err := c.cc.Invoke(ctx, "/api.UserService/ChargeApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChargeCallback(ctx context.Context, in *customer.CustomerChargeCallbackReq, opts ...grpc.CallOption) (*customer.CustomerChargeCallbackResp, error) {
	out := new(customer.CustomerChargeCallbackResp)
	err := c.cc.Invoke(ctx, "/api.UserService/ChargeCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Pay(ctx context.Context, in *customer.CustomerPayReq, opts ...grpc.CallOption) (*customer.CustomerPayResp, error) {
	out := new(customer.CustomerPayResp)
	err := c.cc.Invoke(ctx, "/api.UserService/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryPay(ctx context.Context, in *customer.CustomerQueryPayReq, opts ...grpc.CallOption) (*customer.CustomerPayResp, error) {
	out := new(customer.CustomerPayResp)
	err := c.cc.Invoke(ctx, "/api.UserService/QueryPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefundToBalance(ctx context.Context, in *customer.CustomerRefundReq, opts ...grpc.CallOption) (*customer.CustomerRefundResp, error) {
	out := new(customer.CustomerRefundResp)
	err := c.cc.Invoke(ctx, "/api.UserService/RefundToBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetActivity(ctx context.Context, in *GetActivityReq, opts ...grpc.CallOption) (*GetActivityResp, error) {
	out := new(GetActivityResp)
	err := c.cc.Invoke(ctx, "/api.UserService/GetActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PushAlertMsg(ctx context.Context, in *PushAlertMsgReq, opts ...grpc.CallOption) (*PushAlertMsgResp, error) {
	out := new(PushAlertMsgResp)
	err := c.cc.Invoke(ctx, "/api.UserService/PushAlertMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Transactions(ctx context.Context, in *customer.TransactionQueryByCustomerReq, opts ...grpc.CallOption) (*customer.TransactionsResp, error) {
	out := new(customer.TransactionsResp)
	err := c.cc.Invoke(ctx, "/api.UserService/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// 同步用户信息，登录时候触发
	SyncInfo(context.Context, *SyncUserInfoReq) (*SyncUserInfoResp, error)
	// 获取用户信息
	GetInfo(context.Context, *customer.CustomerInfoReq) (*customer.CustomerInfoResp, error)
	// 用户绑定卡
	BindCard(context.Context, *customer.BindCardReq) (*customer.BindCardResp, error)
	// 解绑卡
	UnbindCard(context.Context, *customer.UnbindCardReq) (*customer.UnbindCardResp, error)
	// 绑定VIN
	BindVIN(context.Context, *customer.BindVINReq) (*customer.BindVINResp, error)
	// 解绑VIN
	UnbindVIN(context.Context, *customer.UnbindVINReq) (*customer.UnbindVINResp, error)
	// vin列表
	ListVINs(context.Context, *customer.CustomerReq) (*customer.ListVINsResp, error)
	// 用户余额充值申请
	ChargeApply(context.Context, *customer.CustomerChargeApplyReq) (*customer.CustomerChargeApplyResp, error)
	// 用户余额充值, 微信/支付宝支付成功后回调
	ChargeCallback(context.Context, *customer.CustomerChargeCallbackReq) (*customer.CustomerChargeCallbackResp, error)
	// 用户余额支付
	Pay(context.Context, *customer.CustomerPayReq) (*customer.CustomerPayResp, error)
	// 查询余额支付
	QueryPay(context.Context, *customer.CustomerQueryPayReq) (*customer.CustomerPayResp, error)
	// 退款到余额
	RefundToBalance(context.Context, *customer.CustomerRefundReq) (*customer.CustomerRefundResp, error)
	// 获取活动
	GetActivity(context.Context, *GetActivityReq) (*GetActivityResp, error)
	// 推送告警
	PushAlertMsg(context.Context, *PushAlertMsgReq) (*PushAlertMsgResp, error)
	// 交易流水
	Transactions(context.Context, *customer.TransactionQueryByCustomerReq) (*customer.TransactionsResp, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) SyncInfo(context.Context, *SyncUserInfoReq) (*SyncUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInfo not implemented")
}
func (*UnimplementedUserServiceServer) GetInfo(context.Context, *customer.CustomerInfoReq) (*customer.CustomerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedUserServiceServer) BindCard(context.Context, *customer.BindCardReq) (*customer.BindCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindCard not implemented")
}
func (*UnimplementedUserServiceServer) UnbindCard(context.Context, *customer.UnbindCardReq) (*customer.UnbindCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindCard not implemented")
}
func (*UnimplementedUserServiceServer) BindVIN(context.Context, *customer.BindVINReq) (*customer.BindVINResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindVIN not implemented")
}
func (*UnimplementedUserServiceServer) UnbindVIN(context.Context, *customer.UnbindVINReq) (*customer.UnbindVINResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindVIN not implemented")
}
func (*UnimplementedUserServiceServer) ListVINs(context.Context, *customer.CustomerReq) (*customer.ListVINsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVINs not implemented")
}
func (*UnimplementedUserServiceServer) ChargeApply(context.Context, *customer.CustomerChargeApplyReq) (*customer.CustomerChargeApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeApply not implemented")
}
func (*UnimplementedUserServiceServer) ChargeCallback(context.Context, *customer.CustomerChargeCallbackReq) (*customer.CustomerChargeCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeCallback not implemented")
}
func (*UnimplementedUserServiceServer) Pay(context.Context, *customer.CustomerPayReq) (*customer.CustomerPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (*UnimplementedUserServiceServer) QueryPay(context.Context, *customer.CustomerQueryPayReq) (*customer.CustomerPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPay not implemented")
}
func (*UnimplementedUserServiceServer) RefundToBalance(context.Context, *customer.CustomerRefundReq) (*customer.CustomerRefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundToBalance not implemented")
}
func (*UnimplementedUserServiceServer) GetActivity(context.Context, *GetActivityReq) (*GetActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivity not implemented")
}
func (*UnimplementedUserServiceServer) PushAlertMsg(context.Context, *PushAlertMsgReq) (*PushAlertMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAlertMsg not implemented")
}
func (*UnimplementedUserServiceServer) Transactions(context.Context, *customer.TransactionQueryByCustomerReq) (*customer.TransactionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_SyncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SyncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/SyncInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SyncInfo(ctx, req.(*SyncUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CustomerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInfo(ctx, req.(*customer.CustomerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BindCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.BindCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BindCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/BindCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BindCard(ctx, req.(*customer.BindCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnbindCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.UnbindCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnbindCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/UnbindCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnbindCard(ctx, req.(*customer.UnbindCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BindVIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.BindVINReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BindVIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/BindVIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BindVIN(ctx, req.(*customer.BindVINReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnbindVIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.UnbindVINReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnbindVIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/UnbindVIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnbindVIN(ctx, req.(*customer.UnbindVINReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListVINs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListVINs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/ListVINs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListVINs(ctx, req.(*customer.CustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChargeApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CustomerChargeApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChargeApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/ChargeApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChargeApply(ctx, req.(*customer.CustomerChargeApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChargeCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CustomerChargeCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChargeCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/ChargeCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChargeCallback(ctx, req.(*customer.CustomerChargeCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CustomerPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Pay(ctx, req.(*customer.CustomerPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CustomerQueryPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/QueryPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryPay(ctx, req.(*customer.CustomerQueryPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefundToBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CustomerRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefundToBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/RefundToBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefundToBalance(ctx, req.(*customer.CustomerRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/GetActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetActivity(ctx, req.(*GetActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PushAlertMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushAlertMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PushAlertMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/PushAlertMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PushAlertMsg(ctx, req.(*PushAlertMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.TransactionQueryByCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Transactions(ctx, req.(*customer.TransactionQueryByCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncInfo",
			Handler:    _UserService_SyncInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _UserService_GetInfo_Handler,
		},
		{
			MethodName: "BindCard",
			Handler:    _UserService_BindCard_Handler,
		},
		{
			MethodName: "UnbindCard",
			Handler:    _UserService_UnbindCard_Handler,
		},
		{
			MethodName: "BindVIN",
			Handler:    _UserService_BindVIN_Handler,
		},
		{
			MethodName: "UnbindVIN",
			Handler:    _UserService_UnbindVIN_Handler,
		},
		{
			MethodName: "ListVINs",
			Handler:    _UserService_ListVINs_Handler,
		},
		{
			MethodName: "ChargeApply",
			Handler:    _UserService_ChargeApply_Handler,
		},
		{
			MethodName: "ChargeCallback",
			Handler:    _UserService_ChargeCallback_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _UserService_Pay_Handler,
		},
		{
			MethodName: "QueryPay",
			Handler:    _UserService_QueryPay_Handler,
		},
		{
			MethodName: "RefundToBalance",
			Handler:    _UserService_RefundToBalance_Handler,
		},
		{
			MethodName: "GetActivity",
			Handler:    _UserService_GetActivity_Handler,
		},
		{
			MethodName: "PushAlertMsg",
			Handler:    _UserService_PushAlertMsg_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _UserService_Transactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CardServiceClient interface {
	// 获取用户卡列表
	ListByCustomer(ctx context.Context, in *customer.CardsByCustomerReq, opts ...grpc.CallOption) (*customer.CardListResp, error)
	// 获取卡信息
	Info(ctx context.Context, in *customer.CardInfoReq, opts ...grpc.CallOption) (*customer.CardInfoResp, error)
	// 卡充值申请
	ChargeApply(ctx context.Context, in *customer.CardChargeApplyReq, opts ...grpc.CallOption) (*customer.CardChargeApplyResp, error)
	// 充值到卡余额 微信/支付宝/用户余额支付成功后回调
	ChargeCallback(ctx context.Context, in *customer.CardChargeCallbackReq, opts ...grpc.CallOption) (*customer.CardChargeCallbackResp, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) ListByCustomer(ctx context.Context, in *customer.CardsByCustomerReq, opts ...grpc.CallOption) (*customer.CardListResp, error) {
	out := new(customer.CardListResp)
	err := c.cc.Invoke(ctx, "/api.CardService/ListByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Info(ctx context.Context, in *customer.CardInfoReq, opts ...grpc.CallOption) (*customer.CardInfoResp, error) {
	out := new(customer.CardInfoResp)
	err := c.cc.Invoke(ctx, "/api.CardService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ChargeApply(ctx context.Context, in *customer.CardChargeApplyReq, opts ...grpc.CallOption) (*customer.CardChargeApplyResp, error) {
	out := new(customer.CardChargeApplyResp)
	err := c.cc.Invoke(ctx, "/api.CardService/ChargeApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ChargeCallback(ctx context.Context, in *customer.CardChargeCallbackReq, opts ...grpc.CallOption) (*customer.CardChargeCallbackResp, error) {
	out := new(customer.CardChargeCallbackResp)
	err := c.cc.Invoke(ctx, "/api.CardService/ChargeCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
type CardServiceServer interface {
	// 获取用户卡列表
	ListByCustomer(context.Context, *customer.CardsByCustomerReq) (*customer.CardListResp, error)
	// 获取卡信息
	Info(context.Context, *customer.CardInfoReq) (*customer.CardInfoResp, error)
	// 卡充值申请
	ChargeApply(context.Context, *customer.CardChargeApplyReq) (*customer.CardChargeApplyResp, error)
	// 充值到卡余额 微信/支付宝/用户余额支付成功后回调
	ChargeCallback(context.Context, *customer.CardChargeCallbackReq) (*customer.CardChargeCallbackResp, error)
}

// UnimplementedCardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (*UnimplementedCardServiceServer) ListByCustomer(context.Context, *customer.CardsByCustomerReq) (*customer.CardListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByCustomer not implemented")
}
func (*UnimplementedCardServiceServer) Info(context.Context, *customer.CardInfoReq) (*customer.CardInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedCardServiceServer) ChargeApply(context.Context, *customer.CardChargeApplyReq) (*customer.CardChargeApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeApply not implemented")
}
func (*UnimplementedCardServiceServer) ChargeCallback(context.Context, *customer.CardChargeCallbackReq) (*customer.CardChargeCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeCallback not implemented")
}

func RegisterCardServiceServer(s *grpc.Server, srv CardServiceServer) {
	s.RegisterService(&_CardService_serviceDesc, srv)
}

func _CardService_ListByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CardsByCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ListByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/ListByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ListByCustomer(ctx, req.(*customer.CardsByCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CardInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Info(ctx, req.(*customer.CardInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ChargeApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CardChargeApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ChargeApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/ChargeApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ChargeApply(ctx, req.(*customer.CardChargeApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ChargeCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(customer.CardChargeCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ChargeCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/ChargeCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ChargeCallback(ctx, req.(*customer.CardChargeCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByCustomer",
			Handler:    _CardService_ListByCustomer_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _CardService_Info_Handler,
		},
		{
			MethodName: "ChargeApply",
			Handler:    _CardService_ChargeApply_Handler,
		},
		{
			MethodName: "ChargeCallback",
			Handler:    _CardService_ChargeCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	// 获取充电接口详情
	Info(ctx context.Context, in *coregw.ConnectorReq, opts ...grpc.CallOption) (*coregw.ConnectorResp, error)
	// 根据用户获取充电接口详情
	InfoByCustomer(ctx context.Context, in *ConnectorInfoByCustomeReq, opts ...grpc.CallOption) (*ConnectorInfoByCustomeResp, error)
	// 根据二维码获取枪头信息
	InfoByQRCode(ctx context.Context, in *coregw.ConnectorByQRCodeReq, opts ...grpc.CallOption) (*coregw.ConnectorResp, error)
	// 根据二维码url获取枪头信息
	InfoByURL(ctx context.Context, in *ConnectorInfoByURLReq, opts ...grpc.CallOption) (*coregw.ConnectorResp, error)
	// 远程停止充电 ---> order service
	RemoteStop(ctx context.Context, in *RemoteStopReq, opts ...grpc.CallOption) (*RemoteStopResp, error)
	// 根据设备获取接口列表
	ListByEvse(ctx context.Context, in *coregw.ConnectorsByEvseReq, opts ...grpc.CallOption) (*coregw.ConnectorsByEvseResp, error)
	// 根据站点获取枪头列表
	ListByStation(ctx context.Context, in *ConnectorsByStationReq, opts ...grpc.CallOption) (*ConnectorsByStationResp, error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) Info(ctx context.Context, in *coregw.ConnectorReq, opts ...grpc.CallOption) (*coregw.ConnectorResp, error) {
	out := new(coregw.ConnectorResp)
	err := c.cc.Invoke(ctx, "/api.ConnectorService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) InfoByCustomer(ctx context.Context, in *ConnectorInfoByCustomeReq, opts ...grpc.CallOption) (*ConnectorInfoByCustomeResp, error) {
	out := new(ConnectorInfoByCustomeResp)
	err := c.cc.Invoke(ctx, "/api.ConnectorService/InfoByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) InfoByQRCode(ctx context.Context, in *coregw.ConnectorByQRCodeReq, opts ...grpc.CallOption) (*coregw.ConnectorResp, error) {
	out := new(coregw.ConnectorResp)
	err := c.cc.Invoke(ctx, "/api.ConnectorService/InfoByQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) InfoByURL(ctx context.Context, in *ConnectorInfoByURLReq, opts ...grpc.CallOption) (*coregw.ConnectorResp, error) {
	out := new(coregw.ConnectorResp)
	err := c.cc.Invoke(ctx, "/api.ConnectorService/InfoByURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) RemoteStop(ctx context.Context, in *RemoteStopReq, opts ...grpc.CallOption) (*RemoteStopResp, error) {
	out := new(RemoteStopResp)
	err := c.cc.Invoke(ctx, "/api.ConnectorService/RemoteStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListByEvse(ctx context.Context, in *coregw.ConnectorsByEvseReq, opts ...grpc.CallOption) (*coregw.ConnectorsByEvseResp, error) {
	out := new(coregw.ConnectorsByEvseResp)
	err := c.cc.Invoke(ctx, "/api.ConnectorService/ListByEvse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListByStation(ctx context.Context, in *ConnectorsByStationReq, opts ...grpc.CallOption) (*ConnectorsByStationResp, error) {
	out := new(ConnectorsByStationResp)
	err := c.cc.Invoke(ctx, "/api.ConnectorService/ListByStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServiceServer is the server API for ConnectorService service.
type ConnectorServiceServer interface {
	// 获取充电接口详情
	Info(context.Context, *coregw.ConnectorReq) (*coregw.ConnectorResp, error)
	// 根据用户获取充电接口详情
	InfoByCustomer(context.Context, *ConnectorInfoByCustomeReq) (*ConnectorInfoByCustomeResp, error)
	// 根据二维码获取枪头信息
	InfoByQRCode(context.Context, *coregw.ConnectorByQRCodeReq) (*coregw.ConnectorResp, error)
	// 根据二维码url获取枪头信息
	InfoByURL(context.Context, *ConnectorInfoByURLReq) (*coregw.ConnectorResp, error)
	// 远程停止充电 ---> order service
	RemoteStop(context.Context, *RemoteStopReq) (*RemoteStopResp, error)
	// 根据设备获取接口列表
	ListByEvse(context.Context, *coregw.ConnectorsByEvseReq) (*coregw.ConnectorsByEvseResp, error)
	// 根据站点获取枪头列表
	ListByStation(context.Context, *ConnectorsByStationReq) (*ConnectorsByStationResp, error)
}

// UnimplementedConnectorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConnectorServiceServer struct {
}

func (*UnimplementedConnectorServiceServer) Info(context.Context, *coregw.ConnectorReq) (*coregw.ConnectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedConnectorServiceServer) InfoByCustomer(context.Context, *ConnectorInfoByCustomeReq) (*ConnectorInfoByCustomeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByCustomer not implemented")
}
func (*UnimplementedConnectorServiceServer) InfoByQRCode(context.Context, *coregw.ConnectorByQRCodeReq) (*coregw.ConnectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByQRCode not implemented")
}
func (*UnimplementedConnectorServiceServer) InfoByURL(context.Context, *ConnectorInfoByURLReq) (*coregw.ConnectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByURL not implemented")
}
func (*UnimplementedConnectorServiceServer) RemoteStop(context.Context, *RemoteStopReq) (*RemoteStopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteStop not implemented")
}
func (*UnimplementedConnectorServiceServer) ListByEvse(context.Context, *coregw.ConnectorsByEvseReq) (*coregw.ConnectorsByEvseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByEvse not implemented")
}
func (*UnimplementedConnectorServiceServer) ListByStation(context.Context, *ConnectorsByStationReq) (*ConnectorsByStationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByStation not implemented")
}

func RegisterConnectorServiceServer(s *grpc.Server, srv ConnectorServiceServer) {
	s.RegisterService(&_ConnectorService_serviceDesc, srv)
}

func _ConnectorService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(coregw.ConnectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConnectorService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Info(ctx, req.(*coregw.ConnectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_InfoByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorInfoByCustomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).InfoByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConnectorService/InfoByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).InfoByCustomer(ctx, req.(*ConnectorInfoByCustomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_InfoByQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(coregw.ConnectorByQRCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).InfoByQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConnectorService/InfoByQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).InfoByQRCode(ctx, req.(*coregw.ConnectorByQRCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_InfoByURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorInfoByURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).InfoByURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConnectorService/InfoByURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).InfoByURL(ctx, req.(*ConnectorInfoByURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_RemoteStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).RemoteStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConnectorService/RemoteStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).RemoteStop(ctx, req.(*RemoteStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListByEvse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(coregw.ConnectorsByEvseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListByEvse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConnectorService/ListByEvse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListByEvse(ctx, req.(*coregw.ConnectorsByEvseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListByStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorsByStationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListByStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConnectorService/ListByStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListByStation(ctx, req.(*ConnectorsByStationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ConnectorService_Info_Handler,
		},
		{
			MethodName: "InfoByCustomer",
			Handler:    _ConnectorService_InfoByCustomer_Handler,
		},
		{
			MethodName: "InfoByQRCode",
			Handler:    _ConnectorService_InfoByQRCode_Handler,
		},
		{
			MethodName: "InfoByURL",
			Handler:    _ConnectorService_InfoByURL_Handler,
		},
		{
			MethodName: "RemoteStop",
			Handler:    _ConnectorService_RemoteStop_Handler,
		},
		{
			MethodName: "ListByEvse",
			Handler:    _ConnectorService_ListByEvse_Handler,
		},
		{
			MethodName: "ListByStation",
			Handler:    _ConnectorService_ListByStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// EvseServiceClient is the client API for EvseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EvseServiceClient interface {
	// Info 获取设备详情
	Info(ctx context.Context, in *coregw.EvseReq, opts ...grpc.CallOption) (*coregw.EvseResp, error)
	// InfoByConnectorAndCustomer 根据枪头和用户获取设备详情
	InfoByConnectorAndCustomer(ctx context.Context, in *InfoByConnectorAndCustomerReq, opts ...grpc.CallOption) (*InfoByConnectorAndCustomerResp, error)
	// WarningEvent 告警
	WarningEvent(ctx context.Context, in *WarningEventReq, opts ...grpc.CallOption) (*WarningEventResp, error)
	// WarningHistoryEvent 历史告警记录
	WarningHistoryEvent(ctx context.Context, in *WarningHistoryEventReq, opts ...grpc.CallOption) (*WarningHistoryEventResp, error)
	// License 证书
	License(ctx context.Context, in *LicenseReq, opts ...grpc.CallOption) (*LicenseResp, error)
	// Active 激活
	Active(ctx context.Context, in *ActiveReq, opts ...grpc.CallOption) (*ActiveResp, error)
	//Hardware 固件查询--2020/12/23 18:39
	Hardware(ctx context.Context, in *HardwareReq, opts ...grpc.CallOption) (*HardwareResp, error)
}

type evseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvseServiceClient(cc grpc.ClientConnInterface) EvseServiceClient {
	return &evseServiceClient{cc}
}

func (c *evseServiceClient) Info(ctx context.Context, in *coregw.EvseReq, opts ...grpc.CallOption) (*coregw.EvseResp, error) {
	out := new(coregw.EvseResp)
	err := c.cc.Invoke(ctx, "/api.EvseService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) InfoByConnectorAndCustomer(ctx context.Context, in *InfoByConnectorAndCustomerReq, opts ...grpc.CallOption) (*InfoByConnectorAndCustomerResp, error) {
	out := new(InfoByConnectorAndCustomerResp)
	err := c.cc.Invoke(ctx, "/api.EvseService/InfoByConnectorAndCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) WarningEvent(ctx context.Context, in *WarningEventReq, opts ...grpc.CallOption) (*WarningEventResp, error) {
	out := new(WarningEventResp)
	err := c.cc.Invoke(ctx, "/api.EvseService/WarningEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) WarningHistoryEvent(ctx context.Context, in *WarningHistoryEventReq, opts ...grpc.CallOption) (*WarningHistoryEventResp, error) {
	out := new(WarningHistoryEventResp)
	err := c.cc.Invoke(ctx, "/api.EvseService/WarningHistoryEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) License(ctx context.Context, in *LicenseReq, opts ...grpc.CallOption) (*LicenseResp, error) {
	out := new(LicenseResp)
	err := c.cc.Invoke(ctx, "/api.EvseService/License", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) Active(ctx context.Context, in *ActiveReq, opts ...grpc.CallOption) (*ActiveResp, error) {
	out := new(ActiveResp)
	err := c.cc.Invoke(ctx, "/api.EvseService/Active", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evseServiceClient) Hardware(ctx context.Context, in *HardwareReq, opts ...grpc.CallOption) (*HardwareResp, error) {
	out := new(HardwareResp)
	err := c.cc.Invoke(ctx, "/api.EvseService/Hardware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvseServiceServer is the server API for EvseService service.
type EvseServiceServer interface {
	// Info 获取设备详情
	Info(context.Context, *coregw.EvseReq) (*coregw.EvseResp, error)
	// InfoByConnectorAndCustomer 根据枪头和用户获取设备详情
	InfoByConnectorAndCustomer(context.Context, *InfoByConnectorAndCustomerReq) (*InfoByConnectorAndCustomerResp, error)
	// WarningEvent 告警
	WarningEvent(context.Context, *WarningEventReq) (*WarningEventResp, error)
	// WarningHistoryEvent 历史告警记录
	WarningHistoryEvent(context.Context, *WarningHistoryEventReq) (*WarningHistoryEventResp, error)
	// License 证书
	License(context.Context, *LicenseReq) (*LicenseResp, error)
	// Active 激活
	Active(context.Context, *ActiveReq) (*ActiveResp, error)
	//Hardware 固件查询--2020/12/23 18:39
	Hardware(context.Context, *HardwareReq) (*HardwareResp, error)
}

// UnimplementedEvseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEvseServiceServer struct {
}

func (*UnimplementedEvseServiceServer) Info(context.Context, *coregw.EvseReq) (*coregw.EvseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedEvseServiceServer) InfoByConnectorAndCustomer(context.Context, *InfoByConnectorAndCustomerReq) (*InfoByConnectorAndCustomerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByConnectorAndCustomer not implemented")
}
func (*UnimplementedEvseServiceServer) WarningEvent(context.Context, *WarningEventReq) (*WarningEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarningEvent not implemented")
}
func (*UnimplementedEvseServiceServer) WarningHistoryEvent(context.Context, *WarningHistoryEventReq) (*WarningHistoryEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarningHistoryEvent not implemented")
}
func (*UnimplementedEvseServiceServer) License(context.Context, *LicenseReq) (*LicenseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method License not implemented")
}
func (*UnimplementedEvseServiceServer) Active(context.Context, *ActiveReq) (*ActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (*UnimplementedEvseServiceServer) Hardware(context.Context, *HardwareReq) (*HardwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hardware not implemented")
}

func RegisterEvseServiceServer(s *grpc.Server, srv EvseServiceServer) {
	s.RegisterService(&_EvseService_serviceDesc, srv)
}

func _EvseService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(coregw.EvseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvseService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).Info(ctx, req.(*coregw.EvseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_InfoByConnectorAndCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoByConnectorAndCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).InfoByConnectorAndCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvseService/InfoByConnectorAndCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).InfoByConnectorAndCustomer(ctx, req.(*InfoByConnectorAndCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_WarningEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarningEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).WarningEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvseService/WarningEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).WarningEvent(ctx, req.(*WarningEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_WarningHistoryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarningHistoryEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).WarningHistoryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvseService/WarningHistoryEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).WarningHistoryEvent(ctx, req.(*WarningHistoryEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_License_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).License(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvseService/License",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).License(ctx, req.(*LicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvseService/Active",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).Active(ctx, req.(*ActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvseService_Hardware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvseServiceServer).Hardware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EvseService/Hardware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvseServiceServer).Hardware(ctx, req.(*HardwareReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EvseService",
	HandlerType: (*EvseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _EvseService_Info_Handler,
		},
		{
			MethodName: "InfoByConnectorAndCustomer",
			Handler:    _EvseService_InfoByConnectorAndCustomer_Handler,
		},
		{
			MethodName: "WarningEvent",
			Handler:    _EvseService_WarningEvent_Handler,
		},
		{
			MethodName: "WarningHistoryEvent",
			Handler:    _EvseService_WarningHistoryEvent_Handler,
		},
		{
			MethodName: "License",
			Handler:    _EvseService_License_Handler,
		},
		{
			MethodName: "Active",
			Handler:    _EvseService_Active_Handler,
		},
		{
			MethodName: "Hardware",
			Handler:    _EvseService_Hardware_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// StationServiceClient is the client API for StationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StationServiceClient interface {
	// List 站点列表
	List(ctx context.Context, in *StationListReq, opts ...grpc.CallOption) (*StationListResp, error)
	// Info 站点详情
	Info(ctx context.Context, in *StationInfoReq, opts ...grpc.CallOption) (*StationInfoResp, error)
	// CheckGroupPay 校验站点是否支持集团支付
	CheckGroupPay(ctx context.Context, in *CheckGroupPayReq, opts ...grpc.CallOption) (*CheckGroupPayResp, error)
	// GetStationManagers 获取站点的管理员
	GetStationManagers(ctx context.Context, in *StationInfoReq, opts ...grpc.CallOption) (*GetStationManagersResp, error)
	// GetPriceScheme 获取计费模版
	GetPriceScheme(ctx context.Context, in *GetPriceSchemeReq, opts ...grpc.CallOption) (*GetPriceSchemeResp, error)
	// CheckIsInWhiteList 检查是否在白名单内
	CheckIsInWhiteList(ctx context.Context, in *CheckIsInWhiteListReq, opts ...grpc.CallOption) (*CheckIsInWhiteListResp, error)
	// CraeteStation 创建站点
	CreateStation(ctx context.Context, in *CreateStationReq, opts ...grpc.CallOption) (*CreateStationResp, error)
	// UpdateStationLatLng 更新站点经纬度
	UpdateStationLatLng(ctx context.Context, in *UpdateStationLatLngReq, opts ...grpc.CallOption) (*UpdateStationLatLngResp, error)
}

type stationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStationServiceClient(cc grpc.ClientConnInterface) StationServiceClient {
	return &stationServiceClient{cc}
}

func (c *stationServiceClient) List(ctx context.Context, in *StationListReq, opts ...grpc.CallOption) (*StationListResp, error) {
	out := new(StationListResp)
	err := c.cc.Invoke(ctx, "/api.StationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) Info(ctx context.Context, in *StationInfoReq, opts ...grpc.CallOption) (*StationInfoResp, error) {
	out := new(StationInfoResp)
	err := c.cc.Invoke(ctx, "/api.StationService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) CheckGroupPay(ctx context.Context, in *CheckGroupPayReq, opts ...grpc.CallOption) (*CheckGroupPayResp, error) {
	out := new(CheckGroupPayResp)
	err := c.cc.Invoke(ctx, "/api.StationService/CheckGroupPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetStationManagers(ctx context.Context, in *StationInfoReq, opts ...grpc.CallOption) (*GetStationManagersResp, error) {
	out := new(GetStationManagersResp)
	err := c.cc.Invoke(ctx, "/api.StationService/GetStationManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetPriceScheme(ctx context.Context, in *GetPriceSchemeReq, opts ...grpc.CallOption) (*GetPriceSchemeResp, error) {
	out := new(GetPriceSchemeResp)
	err := c.cc.Invoke(ctx, "/api.StationService/GetPriceScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) CheckIsInWhiteList(ctx context.Context, in *CheckIsInWhiteListReq, opts ...grpc.CallOption) (*CheckIsInWhiteListResp, error) {
	out := new(CheckIsInWhiteListResp)
	err := c.cc.Invoke(ctx, "/api.StationService/CheckIsInWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) CreateStation(ctx context.Context, in *CreateStationReq, opts ...grpc.CallOption) (*CreateStationResp, error) {
	out := new(CreateStationResp)
	err := c.cc.Invoke(ctx, "/api.StationService/CreateStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) UpdateStationLatLng(ctx context.Context, in *UpdateStationLatLngReq, opts ...grpc.CallOption) (*UpdateStationLatLngResp, error) {
	out := new(UpdateStationLatLngResp)
	err := c.cc.Invoke(ctx, "/api.StationService/UpdateStationLatLng", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StationServiceServer is the server API for StationService service.
type StationServiceServer interface {
	// List 站点列表
	List(context.Context, *StationListReq) (*StationListResp, error)
	// Info 站点详情
	Info(context.Context, *StationInfoReq) (*StationInfoResp, error)
	// CheckGroupPay 校验站点是否支持集团支付
	CheckGroupPay(context.Context, *CheckGroupPayReq) (*CheckGroupPayResp, error)
	// GetStationManagers 获取站点的管理员
	GetStationManagers(context.Context, *StationInfoReq) (*GetStationManagersResp, error)
	// GetPriceScheme 获取计费模版
	GetPriceScheme(context.Context, *GetPriceSchemeReq) (*GetPriceSchemeResp, error)
	// CheckIsInWhiteList 检查是否在白名单内
	CheckIsInWhiteList(context.Context, *CheckIsInWhiteListReq) (*CheckIsInWhiteListResp, error)
	// CraeteStation 创建站点
	CreateStation(context.Context, *CreateStationReq) (*CreateStationResp, error)
	// UpdateStationLatLng 更新站点经纬度
	UpdateStationLatLng(context.Context, *UpdateStationLatLngReq) (*UpdateStationLatLngResp, error)
}

// UnimplementedStationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStationServiceServer struct {
}

func (*UnimplementedStationServiceServer) List(context.Context, *StationListReq) (*StationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedStationServiceServer) Info(context.Context, *StationInfoReq) (*StationInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedStationServiceServer) CheckGroupPay(context.Context, *CheckGroupPayReq) (*CheckGroupPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGroupPay not implemented")
}
func (*UnimplementedStationServiceServer) GetStationManagers(context.Context, *StationInfoReq) (*GetStationManagersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationManagers not implemented")
}
func (*UnimplementedStationServiceServer) GetPriceScheme(context.Context, *GetPriceSchemeReq) (*GetPriceSchemeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceScheme not implemented")
}
func (*UnimplementedStationServiceServer) CheckIsInWhiteList(context.Context, *CheckIsInWhiteListReq) (*CheckIsInWhiteListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsInWhiteList not implemented")
}
func (*UnimplementedStationServiceServer) CreateStation(context.Context, *CreateStationReq) (*CreateStationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStation not implemented")
}
func (*UnimplementedStationServiceServer) UpdateStationLatLng(context.Context, *UpdateStationLatLngReq) (*UpdateStationLatLngResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStationLatLng not implemented")
}

func RegisterStationServiceServer(s *grpc.Server, srv StationServiceServer) {
	s.RegisterService(&_StationService_serviceDesc, srv)
}

func _StationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).List(ctx, req.(*StationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).Info(ctx, req.(*StationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_CheckGroupPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGroupPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CheckGroupPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/CheckGroupPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CheckGroupPay(ctx, req.(*CheckGroupPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetStationManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetStationManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/GetStationManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetStationManagers(ctx, req.(*StationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetPriceScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceSchemeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetPriceScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/GetPriceScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetPriceScheme(ctx, req.(*GetPriceSchemeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_CheckIsInWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsInWhiteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CheckIsInWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/CheckIsInWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CheckIsInWhiteList(ctx, req.(*CheckIsInWhiteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_CreateStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).CreateStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/CreateStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).CreateStation(ctx, req.(*CreateStationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_UpdateStationLatLng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStationLatLngReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).UpdateStationLatLng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StationService/UpdateStationLatLng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).UpdateStationLatLng(ctx, req.(*UpdateStationLatLngReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.StationService",
	HandlerType: (*StationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StationService_List_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _StationService_Info_Handler,
		},
		{
			MethodName: "CheckGroupPay",
			Handler:    _StationService_CheckGroupPay_Handler,
		},
		{
			MethodName: "GetStationManagers",
			Handler:    _StationService_GetStationManagers_Handler,
		},
		{
			MethodName: "GetPriceScheme",
			Handler:    _StationService_GetPriceScheme_Handler,
		},
		{
			MethodName: "CheckIsInWhiteList",
			Handler:    _StationService_CheckIsInWhiteList_Handler,
		},
		{
			MethodName: "CreateStation",
			Handler:    _StationService_CreateStation_Handler,
		},
		{
			MethodName: "UpdateStationLatLng",
			Handler:    _StationService_UpdateStationLatLng_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	// 创建订单 外部调用
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
	// 申请创建订单  内部调用
	ApplyOrder(ctx context.Context, in *ApplyOrderReq, opts ...grpc.CallOption) (*ApplyOrderResp, error)
	ConfirmOrder(ctx context.Context, in *ConfirmOrderReq, opts ...grpc.CallOption) (*ConfirmOrderResp, error)
	// 申请创建订单支付回调 （仅用于先付费）
	OrderPayCallback(ctx context.Context, in *OrderPayCallbackReq, opts ...grpc.CallOption) (*OrderPayCallbackResp, error)
	// 申请订单补缴单号
	ApplyOrderBackPay(ctx context.Context, in *ApplyOrderBackPayReq, opts ...grpc.CallOption) (*ApplyOrderBackPayResp, error)
	// 申请订单补缴回调
	OrderBackPayCallback(ctx context.Context, in *OrderBackPayCallbackReq, opts ...grpc.CallOption) (*OrderBackPayCallbackResp, error)
	// 订单退款成功通知
	RefundNotify(ctx context.Context, in *RefundNotifyReq, opts ...grpc.CallOption) (*RefundNotifyResp, error)
	// InfoByCallerOrderID  根据调用方订单id获取订单详情
	InfoByOutChargerOrderID(ctx context.Context, in *OrderInfoByOutChargeOrderIDReq, opts ...grpc.CallOption) (*OrderInfoResp, error)
	// 订单基本信息
	BaseInfoByID(ctx context.Context, in *BaseInfoByIDReq, opts ...grpc.CallOption) (*BaseInfoByIDResp, error)
	// Info 订单详情
	InfoByID(ctx context.Context, in *OrderInfoByIDReq, opts ...grpc.CallOption) (*OrderInfoResp, error)
	// Infos 批量获取订单详情
	BatchOrderInfos(ctx context.Context, in *BatchOrderInfosReq, opts ...grpc.CallOption) (*BatchOrderInfosResp, error)
	// GetPriceScheme 获取计费模版
	GetPriceScheme(ctx context.Context, in *GetPriceSchemeReq, opts ...grpc.CallOption) (*GetPriceSchemeResp, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	out := new(CreateOrderResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ApplyOrder(ctx context.Context, in *ApplyOrderReq, opts ...grpc.CallOption) (*ApplyOrderResp, error) {
	out := new(ApplyOrderResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/ApplyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ConfirmOrder(ctx context.Context, in *ConfirmOrderReq, opts ...grpc.CallOption) (*ConfirmOrderResp, error) {
	out := new(ConfirmOrderResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/ConfirmOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderPayCallback(ctx context.Context, in *OrderPayCallbackReq, opts ...grpc.CallOption) (*OrderPayCallbackResp, error) {
	out := new(OrderPayCallbackResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/OrderPayCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ApplyOrderBackPay(ctx context.Context, in *ApplyOrderBackPayReq, opts ...grpc.CallOption) (*ApplyOrderBackPayResp, error) {
	out := new(ApplyOrderBackPayResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/ApplyOrderBackPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderBackPayCallback(ctx context.Context, in *OrderBackPayCallbackReq, opts ...grpc.CallOption) (*OrderBackPayCallbackResp, error) {
	out := new(OrderBackPayCallbackResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/OrderBackPayCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RefundNotify(ctx context.Context, in *RefundNotifyReq, opts ...grpc.CallOption) (*RefundNotifyResp, error) {
	out := new(RefundNotifyResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/RefundNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) InfoByOutChargerOrderID(ctx context.Context, in *OrderInfoByOutChargeOrderIDReq, opts ...grpc.CallOption) (*OrderInfoResp, error) {
	out := new(OrderInfoResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/InfoByOutChargerOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) BaseInfoByID(ctx context.Context, in *BaseInfoByIDReq, opts ...grpc.CallOption) (*BaseInfoByIDResp, error) {
	out := new(BaseInfoByIDResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/BaseInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) InfoByID(ctx context.Context, in *OrderInfoByIDReq, opts ...grpc.CallOption) (*OrderInfoResp, error) {
	out := new(OrderInfoResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/InfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) BatchOrderInfos(ctx context.Context, in *BatchOrderInfosReq, opts ...grpc.CallOption) (*BatchOrderInfosResp, error) {
	out := new(BatchOrderInfosResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/BatchOrderInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetPriceScheme(ctx context.Context, in *GetPriceSchemeReq, opts ...grpc.CallOption) (*GetPriceSchemeResp, error) {
	out := new(GetPriceSchemeResp)
	err := c.cc.Invoke(ctx, "/api.OrderService/GetPriceScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	// 创建订单 外部调用
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error)
	// 申请创建订单  内部调用
	ApplyOrder(context.Context, *ApplyOrderReq) (*ApplyOrderResp, error)
	ConfirmOrder(context.Context, *ConfirmOrderReq) (*ConfirmOrderResp, error)
	// 申请创建订单支付回调 （仅用于先付费）
	OrderPayCallback(context.Context, *OrderPayCallbackReq) (*OrderPayCallbackResp, error)
	// 申请订单补缴单号
	ApplyOrderBackPay(context.Context, *ApplyOrderBackPayReq) (*ApplyOrderBackPayResp, error)
	// 申请订单补缴回调
	OrderBackPayCallback(context.Context, *OrderBackPayCallbackReq) (*OrderBackPayCallbackResp, error)
	// 订单退款成功通知
	RefundNotify(context.Context, *RefundNotifyReq) (*RefundNotifyResp, error)
	// InfoByCallerOrderID  根据调用方订单id获取订单详情
	InfoByOutChargerOrderID(context.Context, *OrderInfoByOutChargeOrderIDReq) (*OrderInfoResp, error)
	// 订单基本信息
	BaseInfoByID(context.Context, *BaseInfoByIDReq) (*BaseInfoByIDResp, error)
	// Info 订单详情
	InfoByID(context.Context, *OrderInfoByIDReq) (*OrderInfoResp, error)
	// Infos 批量获取订单详情
	BatchOrderInfos(context.Context, *BatchOrderInfosReq) (*BatchOrderInfosResp, error)
	// GetPriceScheme 获取计费模版
	GetPriceScheme(context.Context, *GetPriceSchemeReq) (*GetPriceSchemeResp, error)
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedOrderServiceServer) ApplyOrder(context.Context, *ApplyOrderReq) (*ApplyOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOrder not implemented")
}
func (*UnimplementedOrderServiceServer) ConfirmOrder(context.Context, *ConfirmOrderReq) (*ConfirmOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmOrder not implemented")
}
func (*UnimplementedOrderServiceServer) OrderPayCallback(context.Context, *OrderPayCallbackReq) (*OrderPayCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPayCallback not implemented")
}
func (*UnimplementedOrderServiceServer) ApplyOrderBackPay(context.Context, *ApplyOrderBackPayReq) (*ApplyOrderBackPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOrderBackPay not implemented")
}
func (*UnimplementedOrderServiceServer) OrderBackPayCallback(context.Context, *OrderBackPayCallbackReq) (*OrderBackPayCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBackPayCallback not implemented")
}
func (*UnimplementedOrderServiceServer) RefundNotify(context.Context, *RefundNotifyReq) (*RefundNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundNotify not implemented")
}
func (*UnimplementedOrderServiceServer) InfoByOutChargerOrderID(context.Context, *OrderInfoByOutChargeOrderIDReq) (*OrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByOutChargerOrderID not implemented")
}
func (*UnimplementedOrderServiceServer) BaseInfoByID(context.Context, *BaseInfoByIDReq) (*BaseInfoByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseInfoByID not implemented")
}
func (*UnimplementedOrderServiceServer) InfoByID(context.Context, *OrderInfoByIDReq) (*OrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByID not implemented")
}
func (*UnimplementedOrderServiceServer) BatchOrderInfos(context.Context, *BatchOrderInfosReq) (*BatchOrderInfosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOrderInfos not implemented")
}
func (*UnimplementedOrderServiceServer) GetPriceScheme(context.Context, *GetPriceSchemeReq) (*GetPriceSchemeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceScheme not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ApplyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ApplyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/ApplyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ApplyOrder(ctx, req.(*ApplyOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ConfirmOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ConfirmOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/ConfirmOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ConfirmOrder(ctx, req.(*ConfirmOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderPayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPayCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderPayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/OrderPayCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderPayCallback(ctx, req.(*OrderPayCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ApplyOrderBackPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyOrderBackPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ApplyOrderBackPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/ApplyOrderBackPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ApplyOrderBackPay(ctx, req.(*ApplyOrderBackPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderBackPayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBackPayCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderBackPayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/OrderBackPayCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderBackPayCallback(ctx, req.(*OrderBackPayCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RefundNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RefundNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/RefundNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RefundNotify(ctx, req.(*RefundNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_InfoByOutChargerOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoByOutChargeOrderIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).InfoByOutChargerOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/InfoByOutChargerOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).InfoByOutChargerOrderID(ctx, req.(*OrderInfoByOutChargeOrderIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_BaseInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseInfoByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).BaseInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/BaseInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).BaseInfoByID(ctx, req.(*BaseInfoByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_InfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).InfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/InfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).InfoByID(ctx, req.(*OrderInfoByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_BatchOrderInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOrderInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).BatchOrderInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/BatchOrderInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).BatchOrderInfos(ctx, req.(*BatchOrderInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetPriceScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceSchemeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetPriceScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OrderService/GetPriceScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetPriceScheme(ctx, req.(*GetPriceSchemeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "ApplyOrder",
			Handler:    _OrderService_ApplyOrder_Handler,
		},
		{
			MethodName: "ConfirmOrder",
			Handler:    _OrderService_ConfirmOrder_Handler,
		},
		{
			MethodName: "OrderPayCallback",
			Handler:    _OrderService_OrderPayCallback_Handler,
		},
		{
			MethodName: "ApplyOrderBackPay",
			Handler:    _OrderService_ApplyOrderBackPay_Handler,
		},
		{
			MethodName: "OrderBackPayCallback",
			Handler:    _OrderService_OrderBackPayCallback_Handler,
		},
		{
			MethodName: "RefundNotify",
			Handler:    _OrderService_RefundNotify_Handler,
		},
		{
			MethodName: "InfoByOutChargerOrderID",
			Handler:    _OrderService_InfoByOutChargerOrderID_Handler,
		},
		{
			MethodName: "BaseInfoByID",
			Handler:    _OrderService_BaseInfoByID_Handler,
		},
		{
			MethodName: "InfoByID",
			Handler:    _OrderService_InfoByID_Handler,
		},
		{
			MethodName: "BatchOrderInfos",
			Handler:    _OrderService_BatchOrderInfos_Handler,
		},
		{
			MethodName: "GetPriceScheme",
			Handler:    _OrderService_GetPriceScheme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// OperatorServiceClient is the client API for OperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperatorServiceClient interface {
	GetByCode(ctx context.Context, in *GetByCodeReq, opts ...grpc.CallOption) (*Operator, error)
	// 获取公告
	GetNotice(ctx context.Context, in *GetNoticeReq, opts ...grpc.CallOption) (*GetNoticeResp, error)
	// 获取横幅
	GetBanner(ctx context.Context, in *GetBannerReq, opts ...grpc.CallOption) (*GetBannerResp, error)
	// 获取资源配额
	GetQuotaLimitation(ctx context.Context, in *GetQuotaLimitationReq, opts ...grpc.CallOption) (*GetQuotaLimitationResp, error)
}

type operatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServiceClient(cc grpc.ClientConnInterface) OperatorServiceClient {
	return &operatorServiceClient{cc}
}

func (c *operatorServiceClient) GetByCode(ctx context.Context, in *GetByCodeReq, opts ...grpc.CallOption) (*Operator, error) {
	out := new(Operator)
	err := c.cc.Invoke(ctx, "/api.OperatorService/GetByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetNotice(ctx context.Context, in *GetNoticeReq, opts ...grpc.CallOption) (*GetNoticeResp, error) {
	out := new(GetNoticeResp)
	err := c.cc.Invoke(ctx, "/api.OperatorService/GetNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetBanner(ctx context.Context, in *GetBannerReq, opts ...grpc.CallOption) (*GetBannerResp, error) {
	out := new(GetBannerResp)
	err := c.cc.Invoke(ctx, "/api.OperatorService/GetBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetQuotaLimitation(ctx context.Context, in *GetQuotaLimitationReq, opts ...grpc.CallOption) (*GetQuotaLimitationResp, error) {
	out := new(GetQuotaLimitationResp)
	err := c.cc.Invoke(ctx, "/api.OperatorService/GetQuotaLimitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServiceServer is the server API for OperatorService service.
type OperatorServiceServer interface {
	GetByCode(context.Context, *GetByCodeReq) (*Operator, error)
	// 获取公告
	GetNotice(context.Context, *GetNoticeReq) (*GetNoticeResp, error)
	// 获取横幅
	GetBanner(context.Context, *GetBannerReq) (*GetBannerResp, error)
	// 获取资源配额
	GetQuotaLimitation(context.Context, *GetQuotaLimitationReq) (*GetQuotaLimitationResp, error)
}

// UnimplementedOperatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOperatorServiceServer struct {
}

func (*UnimplementedOperatorServiceServer) GetByCode(context.Context, *GetByCodeReq) (*Operator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCode not implemented")
}
func (*UnimplementedOperatorServiceServer) GetNotice(context.Context, *GetNoticeReq) (*GetNoticeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (*UnimplementedOperatorServiceServer) GetBanner(context.Context, *GetBannerReq) (*GetBannerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (*UnimplementedOperatorServiceServer) GetQuotaLimitation(context.Context, *GetQuotaLimitationReq) (*GetQuotaLimitationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaLimitation not implemented")
}

func RegisterOperatorServiceServer(s *grpc.Server, srv OperatorServiceServer) {
	s.RegisterService(&_OperatorService_serviceDesc, srv)
}

func _OperatorService_GetByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OperatorService/GetByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetByCode(ctx, req.(*GetByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OperatorService/GetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetNotice(ctx, req.(*GetNoticeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OperatorService/GetBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetBanner(ctx, req.(*GetBannerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetQuotaLimitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaLimitationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetQuotaLimitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OperatorService/GetQuotaLimitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetQuotaLimitation(ctx, req.(*GetQuotaLimitationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.OperatorService",
	HandlerType: (*OperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByCode",
			Handler:    _OperatorService_GetByCode_Handler,
		},
		{
			MethodName: "GetNotice",
			Handler:    _OperatorService_GetNotice_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _OperatorService_GetBanner_Handler,
		},
		{
			MethodName: "GetQuotaLimitation",
			Handler:    _OperatorService_GetQuotaLimitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminServiceClient interface {
	// 运营商登录
	// 使用商户绑定的管理账号登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 获取调用方信息
	CallerByID(ctx context.Context, in *CallerByIDReq, opts ...grpc.CallOption) (*CallerByIDResp, error)
	CallerByOperatorID(ctx context.Context, in *CallerByOperatorIDReq, opts ...grpc.CallOption) (*CallerByOperatorIDResp, error)
	// 根据ID获取运营商信息
	GetOperatorByID(ctx context.Context, in *GetOperatorByIDReq, opts ...grpc.CallOption) (*Operator, error)
	// GetStationByID 根据id获取站点
	GetStationByID(ctx context.Context, in *GetStationByIDReq, opts ...grpc.CallOption) (*StationInfoResp, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/api.AdminService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CallerByID(ctx context.Context, in *CallerByIDReq, opts ...grpc.CallOption) (*CallerByIDResp, error) {
	out := new(CallerByIDResp)
	err := c.cc.Invoke(ctx, "/api.AdminService/CallerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CallerByOperatorID(ctx context.Context, in *CallerByOperatorIDReq, opts ...grpc.CallOption) (*CallerByOperatorIDResp, error) {
	out := new(CallerByOperatorIDResp)
	err := c.cc.Invoke(ctx, "/api.AdminService/CallerByOperatorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOperatorByID(ctx context.Context, in *GetOperatorByIDReq, opts ...grpc.CallOption) (*Operator, error) {
	out := new(Operator)
	err := c.cc.Invoke(ctx, "/api.AdminService/GetOperatorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetStationByID(ctx context.Context, in *GetStationByIDReq, opts ...grpc.CallOption) (*StationInfoResp, error) {
	out := new(StationInfoResp)
	err := c.cc.Invoke(ctx, "/api.AdminService/GetStationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
type AdminServiceServer interface {
	// 运营商登录
	// 使用商户绑定的管理账号登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 获取调用方信息
	CallerByID(context.Context, *CallerByIDReq) (*CallerByIDResp, error)
	CallerByOperatorID(context.Context, *CallerByOperatorIDReq) (*CallerByOperatorIDResp, error)
	// 根据ID获取运营商信息
	GetOperatorByID(context.Context, *GetOperatorByIDReq) (*Operator, error)
	// GetStationByID 根据id获取站点
	GetStationByID(context.Context, *GetStationByIDReq) (*StationInfoResp, error)
}

// UnimplementedAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (*UnimplementedAdminServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAdminServiceServer) CallerByID(context.Context, *CallerByIDReq) (*CallerByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallerByID not implemented")
}
func (*UnimplementedAdminServiceServer) CallerByOperatorID(context.Context, *CallerByOperatorIDReq) (*CallerByOperatorIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallerByOperatorID not implemented")
}
func (*UnimplementedAdminServiceServer) GetOperatorByID(context.Context, *GetOperatorByIDReq) (*Operator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorByID not implemented")
}
func (*UnimplementedAdminServiceServer) GetStationByID(context.Context, *GetStationByIDReq) (*StationInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationByID not implemented")
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CallerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallerByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CallerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminService/CallerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CallerByID(ctx, req.(*CallerByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CallerByOperatorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallerByOperatorIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CallerByOperatorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminService/CallerByOperatorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CallerByOperatorID(ctx, req.(*CallerByOperatorIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOperatorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOperatorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminService/GetOperatorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOperatorByID(ctx, req.(*GetOperatorByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetStationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStationByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetStationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminService/GetStationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetStationByID(ctx, req.(*GetStationByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AdminService_Login_Handler,
		},
		{
			MethodName: "CallerByID",
			Handler:    _AdminService_CallerByID_Handler,
		},
		{
			MethodName: "CallerByOperatorID",
			Handler:    _AdminService_CallerByOperatorID_Handler,
		},
		{
			MethodName: "GetOperatorByID",
			Handler:    _AdminService_GetOperatorByID_Handler,
		},
		{
			MethodName: "GetStationByID",
			Handler:    _AdminService_GetStationByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
