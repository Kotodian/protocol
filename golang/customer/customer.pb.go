// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: customer.proto

package customer

import (
	context "context"
	common "github.com/Kotodian/protocol/golang/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 集团类型
type GroupType int32

const (
	GroupType_GT_DEFAULT GroupType = 0 // 默认
	GroupType_GT_BUS     GroupType = 1 // 公交车
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "GT_DEFAULT",
		1: "GT_BUS",
	}
	GroupType_value = map[string]int32{
		"GT_DEFAULT": 0,
		"GT_BUS":     1,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[0].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[0]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{0}
}

// 集团成员类型
type GroupMemberResourceType int32

const (
	GroupMemberResourceType_GMRT_CUSTOMER GroupMemberResourceType = 0 // 用户
	GroupMemberResourceType_GMRT_CARD     GroupMemberResourceType = 1 // 卡
	GroupMemberResourceType_GMRT_VIN      GroupMemberResourceType = 2 // vin
)

// Enum value maps for GroupMemberResourceType.
var (
	GroupMemberResourceType_name = map[int32]string{
		0: "GMRT_CUSTOMER",
		1: "GMRT_CARD",
		2: "GMRT_VIN",
	}
	GroupMemberResourceType_value = map[string]int32{
		"GMRT_CUSTOMER": 0,
		"GMRT_CARD":     1,
		"GMRT_VIN":      2,
	}
)

func (x GroupMemberResourceType) Enum() *GroupMemberResourceType {
	p := new(GroupMemberResourceType)
	*p = x
	return p
}

func (x GroupMemberResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMemberResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[1].Descriptor()
}

func (GroupMemberResourceType) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[1]
}

func (x GroupMemberResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMemberResourceType.Descriptor instead.
func (GroupMemberResourceType) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{1}
}

// 性别
type Sex int32

const (
	Sex_UNKNOWN Sex = 0 // 保留
	Sex_MALE    Sex = 1 // 男
	Sex_FEMALE  Sex = 2 // 女
)

// Enum value maps for Sex.
var (
	Sex_name = map[int32]string{
		0: "UNKNOWN",
		1: "MALE",
		2: "FEMALE",
	}
	Sex_value = map[string]int32{
		"UNKNOWN": 0,
		"MALE":    1,
		"FEMALE":  2,
	}
)

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}

func (x Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[2].Descriptor()
}

func (Sex) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[2]
}

func (x Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sex.Descriptor instead.
func (Sex) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{2}
}

// 余额类型
type BalanceType int32

const (
	BalanceType_PRINCIPAL BalanceType = 0 // 本金余额
	BalanceType_GIFT      BalanceType = 1 // 赠送余额
)

// Enum value maps for BalanceType.
var (
	BalanceType_name = map[int32]string{
		0: "PRINCIPAL",
		1: "GIFT",
	}
	BalanceType_value = map[string]int32{
		"PRINCIPAL": 0,
		"GIFT":      1,
	}
)

func (x BalanceType) Enum() *BalanceType {
	p := new(BalanceType)
	*p = x
	return p
}

func (x BalanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[3].Descriptor()
}

func (BalanceType) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[3]
}

func (x BalanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceType.Descriptor instead.
func (BalanceType) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{3}
}

// 卡类型
type CardType int32

const (
	CardType_ID     CardType = 0 //身份卡/鉴权卡
	CardType_WALLET CardType = 1 //钱包卡
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "ID",
		1: "WALLET",
	}
	CardType_value = map[string]int32{
		"ID":     0,
		"WALLET": 1,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[4].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[4]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{4}
}

// 用户状态
type CustomerStatus int32

const (
	CustomerStatus_ENABLE  CustomerStatus = 0 // 默认打开
	CustomerStatus_DISABLE CustomerStatus = 1 // 禁用用户
)

// Enum value maps for CustomerStatus.
var (
	CustomerStatus_name = map[int32]string{
		0: "ENABLE",
		1: "DISABLE",
	}
	CustomerStatus_value = map[string]int32{
		"ENABLE":  0,
		"DISABLE": 1,
	}
)

func (x CustomerStatus) Enum() *CustomerStatus {
	p := new(CustomerStatus)
	*p = x
	return p
}

func (x CustomerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[5].Descriptor()
}

func (CustomerStatus) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[5]
}

func (x CustomerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerStatus.Descriptor instead.
func (CustomerStatus) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{5}
}

// 充电账户异常状态位(鉴权卡/vin)
type AccountExceptionStatusBit int32

const (
	AccountExceptionStatusBit_UNBIND_POS  AccountExceptionStatusBit = 0 // 卡未绑定
	AccountExceptionStatusBit_FREEZE_POS  AccountExceptionStatusBit = 1 // 冻结卡
	AccountExceptionStatusBit_EXPIRED_POS AccountExceptionStatusBit = 2 // 卡过期
	AccountExceptionStatusBit_LOCK_POS    AccountExceptionStatusBit = 4 // 卡锁住
	AccountExceptionStatusBit_LOST_POS    AccountExceptionStatusBit = 5 // 卡挂失
)

// Enum value maps for AccountExceptionStatusBit.
var (
	AccountExceptionStatusBit_name = map[int32]string{
		0: "UNBIND_POS",
		1: "FREEZE_POS",
		2: "EXPIRED_POS",
		4: "LOCK_POS",
		5: "LOST_POS",
	}
	AccountExceptionStatusBit_value = map[string]int32{
		"UNBIND_POS":  0,
		"FREEZE_POS":  1,
		"EXPIRED_POS": 2,
		"LOCK_POS":    4,
		"LOST_POS":    5,
	}
)

func (x AccountExceptionStatusBit) Enum() *AccountExceptionStatusBit {
	p := new(AccountExceptionStatusBit)
	*p = x
	return p
}

func (x AccountExceptionStatusBit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountExceptionStatusBit) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[6].Descriptor()
}

func (AccountExceptionStatusBit) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[6]
}

func (x AccountExceptionStatusBit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountExceptionStatusBit.Descriptor instead.
func (AccountExceptionStatusBit) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{6}
}

// 交易状态
type TransactionStatus int32

const (
	TransactionStatus_TRANSACTION_STATUS_INIT    TransactionStatus = 0 // 初始化状态（待处理）
	TransactionStatus_TRANSACTION_STATUS_PROCESS TransactionStatus = 1 // 处理中(支付中/退款中/结算中...)
	TransactionStatus_TRANSACTION_STATUS_SUCCESS TransactionStatus = 2 // 交易成功
	TransactionStatus_TRANSACTION_STATUS_FAIL    TransactionStatus = 3 // 交易失败
	TransactionStatus_TRANSACTION_STATUS_CLOSE   TransactionStatus = 4 // 交易关闭
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "TRANSACTION_STATUS_INIT",
		1: "TRANSACTION_STATUS_PROCESS",
		2: "TRANSACTION_STATUS_SUCCESS",
		3: "TRANSACTION_STATUS_FAIL",
		4: "TRANSACTION_STATUS_CLOSE",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTION_STATUS_INIT":    0,
		"TRANSACTION_STATUS_PROCESS": 1,
		"TRANSACTION_STATUS_SUCCESS": 2,
		"TRANSACTION_STATUS_FAIL":    3,
		"TRANSACTION_STATUS_CLOSE":   4,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[7].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[7]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{7}
}

// 交易标示
type TransactionFlag int32

const (
	TransactionFlag_TransactionFlagUnknown     TransactionFlag = 0 //
	TransactionFlag_TransactionFlagOnline      TransactionFlag = 1 //  在线支付(快捷支付)
	TransactionFlag_TransactionFlagGroup       TransactionFlag = 2 //  集团支付
	TransactionFlag_TransactionFlagCard        TransactionFlag = 3 //  鉴权卡
	TransactionFlag_TransactionFlagUserBalance TransactionFlag = 4 //  用户余额
	TransactionFlag_TransactionFlagVIN         TransactionFlag = 5 //  VIN
	TransactionFlag_TransactionFlagPartner     TransactionFlag = 6 //  第三方支付
)

// Enum value maps for TransactionFlag.
var (
	TransactionFlag_name = map[int32]string{
		0: "TransactionFlagUnknown",
		1: "TransactionFlagOnline",
		2: "TransactionFlagGroup",
		3: "TransactionFlagCard",
		4: "TransactionFlagUserBalance",
		5: "TransactionFlagVIN",
		6: "TransactionFlagPartner",
	}
	TransactionFlag_value = map[string]int32{
		"TransactionFlagUnknown":     0,
		"TransactionFlagOnline":      1,
		"TransactionFlagGroup":       2,
		"TransactionFlagCard":        3,
		"TransactionFlagUserBalance": 4,
		"TransactionFlagVIN":         5,
		"TransactionFlagPartner":     6,
	}
)

func (x TransactionFlag) Enum() *TransactionFlag {
	p := new(TransactionFlag)
	*p = x
	return p
}

func (x TransactionFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[8].Descriptor()
}

func (TransactionFlag) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[8]
}

func (x TransactionFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionFlag.Descriptor instead.
func (TransactionFlag) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{8}
}

// 交易类型
type TransactionType int32

const (
	TransactionType_TRANSACTION_UNKNOWN TransactionType = 0 // 保留
	TransactionType_TRANSACTION_CHARGE  TransactionType = 1 // 充值
	TransactionType_TRANSACTION_PAY     TransactionType = 2 // 支付
	TransactionType_TRANSACTION_REFUND  TransactionType = 3 // 退款
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "TRANSACTION_UNKNOWN",
		1: "TRANSACTION_CHARGE",
		2: "TRANSACTION_PAY",
		3: "TRANSACTION_REFUND",
	}
	TransactionType_value = map[string]int32{
		"TRANSACTION_UNKNOWN": 0,
		"TRANSACTION_CHARGE":  1,
		"TRANSACTION_PAY":     2,
		"TRANSACTION_REFUND":  3,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[9].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[9]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{9}
}

// 交易通知状态
type TransactionNotifyStatus int32

const (
	TransactionNotifyStatus_TNS_INIT      TransactionNotifyStatus = 0 // 未通知
	TransactionNotifyStatus_TNS_NOTIFYING TransactionNotifyStatus = 1 // 通知中
	TransactionNotifyStatus_TNS_SUSSESS   TransactionNotifyStatus = 2 // 通知成功
	TransactionNotifyStatus_TNS_FAIL      TransactionNotifyStatus = 3 // 通知失败
)

// Enum value maps for TransactionNotifyStatus.
var (
	TransactionNotifyStatus_name = map[int32]string{
		0: "TNS_INIT",
		1: "TNS_NOTIFYING",
		2: "TNS_SUSSESS",
		3: "TNS_FAIL",
	}
	TransactionNotifyStatus_value = map[string]int32{
		"TNS_INIT":      0,
		"TNS_NOTIFYING": 1,
		"TNS_SUSSESS":   2,
		"TNS_FAIL":      3,
	}
)

func (x TransactionNotifyStatus) Enum() *TransactionNotifyStatus {
	p := new(TransactionNotifyStatus)
	*p = x
	return p
}

func (x TransactionNotifyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionNotifyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[10].Descriptor()
}

func (TransactionNotifyStatus) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[10]
}

func (x TransactionNotifyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionNotifyStatus.Descriptor instead.
func (TransactionNotifyStatus) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{10}
}

// 活动类型
type ActivityType int32

const (
	ActivityType_ActivityType_UNKNOWN                    ActivityType = 0
	ActivityType_ACTIVITY_TYPE_USER_BALANCE_CHARGE_GIFTS ActivityType = 1 // 用户余额充值送
)

// Enum value maps for ActivityType.
var (
	ActivityType_name = map[int32]string{
		0: "ActivityType_UNKNOWN",
		1: "ACTIVITY_TYPE_USER_BALANCE_CHARGE_GIFTS",
	}
	ActivityType_value = map[string]int32{
		"ActivityType_UNKNOWN":                    0,
		"ACTIVITY_TYPE_USER_BALANCE_CHARGE_GIFTS": 1,
	}
)

func (x ActivityType) Enum() *ActivityType {
	p := new(ActivityType)
	*p = x
	return p
}

func (x ActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[11].Descriptor()
}

func (ActivityType) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[11]
}

func (x ActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityType.Descriptor instead.
func (ActivityType) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{11}
}

// 活动状态
type ActivityStatus int32

const (
	ActivityStatus_ACTIVITY_STATUS_UNKNOWN     ActivityStatus = 0
	ActivityStatus_ACTIVITY_STATUS_NOT_STARTED ActivityStatus = 1 // 未开始
	ActivityStatus_ACTIVITY_STATUS_IN_ACTION   ActivityStatus = 2 // 活动中
	ActivityStatus_ACTIVITY_STATUS_CLOSE       ActivityStatus = 3 // 活动结束
)

// Enum value maps for ActivityStatus.
var (
	ActivityStatus_name = map[int32]string{
		0: "ACTIVITY_STATUS_UNKNOWN",
		1: "ACTIVITY_STATUS_NOT_STARTED",
		2: "ACTIVITY_STATUS_IN_ACTION",
		3: "ACTIVITY_STATUS_CLOSE",
	}
	ActivityStatus_value = map[string]int32{
		"ACTIVITY_STATUS_UNKNOWN":     0,
		"ACTIVITY_STATUS_NOT_STARTED": 1,
		"ACTIVITY_STATUS_IN_ACTION":   2,
		"ACTIVITY_STATUS_CLOSE":       3,
	}
)

func (x ActivityStatus) Enum() *ActivityStatus {
	p := new(ActivityStatus)
	*p = x
	return p
}

func (x ActivityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_customer_proto_enumTypes[12].Descriptor()
}

func (ActivityStatus) Type() protoreflect.EnumType {
	return &file_customer_proto_enumTypes[12]
}

func (x ActivityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityStatus.Descriptor instead.
func (ActivityStatus) EnumDescriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{12}
}

/////////////////////
type CleanCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanCacheReq) Reset() {
	*x = CleanCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanCacheReq) ProtoMessage() {}

func (x *CleanCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanCacheReq.ProtoReflect.Descriptor instead.
func (*CleanCacheReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{0}
}

type CleanCacheResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanCacheResp) Reset() {
	*x = CleanCacheResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanCacheResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanCacheResp) ProtoMessage() {}

func (x *CleanCacheResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanCacheResp.ProtoReflect.Descriptor instead.
func (*CleanCacheResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{1}
}

type VINListByOperatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`                          //翻页
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商为0时, 获取全部
	StationId  uint64          `protobuf:"varint,3,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`    // 搜索站点
	SearchVin  string          `protobuf:"bytes,4,opt,name=search_vin,json=searchVin,proto3" json:"search_vin,omitempty"`     // 搜索vin
}

func (x *VINListByOperatorReq) Reset() {
	*x = VINListByOperatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINListByOperatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINListByOperatorReq) ProtoMessage() {}

func (x *VINListByOperatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINListByOperatorReq.ProtoReflect.Descriptor instead.
func (*VINListByOperatorReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{2}
}

func (x *VINListByOperatorReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *VINListByOperatorReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *VINListByOperatorReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *VINListByOperatorReq) GetSearchVin() string {
	if x != nil {
		return x.SearchVin
	}
	return ""
}

type VINListByCustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq  *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`   //翻页
	Customer *CustomerReq    `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"` // 用户请求
}

func (x *VINListByCustomerReq) Reset() {
	*x = VINListByCustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINListByCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINListByCustomerReq) ProtoMessage() {}

func (x *VINListByCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINListByCustomerReq.ProtoReflect.Descriptor instead.
func (*VINListByCustomerReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{3}
}

func (x *VINListByCustomerReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *VINListByCustomerReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

type VINListByGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq   *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`                      //翻页
	GroupId   uint64          `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`      //
	SearchVin string          `protobuf:"bytes,3,opt,name=search_vin,json=searchVin,proto3" json:"search_vin,omitempty"` // 搜索vin
}

func (x *VINListByGroupReq) Reset() {
	*x = VINListByGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINListByGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINListByGroupReq) ProtoMessage() {}

func (x *VINListByGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINListByGroupReq.ProtoReflect.Descriptor instead.
func (*VINListByGroupReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{4}
}

func (x *VINListByGroupReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *VINListByGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *VINListByGroupReq) GetSearchVin() string {
	if x != nil {
		return x.SearchVin
	}
	return ""
}

type ListVINsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`                 //
	VinInfos []*VINInfo       `protobuf:"bytes,2,rep,name=vin_infos,json=vinInfos,proto3" json:"vin_infos,omitempty"` // vin
}

func (x *ListVINsResp) Reset() {
	*x = ListVINsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVINsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVINsResp) ProtoMessage() {}

func (x *ListVINsResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVINsResp.ProtoReflect.Descriptor instead.
func (*ListVINsResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{5}
}

func (x *ListVINsResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *ListVINsResp) GetVinInfos() []*VINInfo {
	if x != nil {
		return x.VinInfos
	}
	return nil
}

type VINAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string vin                  = 1;  // vin号
	// uint64 operator_id          = 2;  // 运营商ID
	VinReq             *VINReq `protobuf:"bytes,1,opt,name=vin_req,json=vinReq,proto3" json:"vin_req,omitempty"`                                       // vin基本信息
	Note               string  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`                                                         // 备注
	LicensePlateNumber string  `protobuf:"bytes,4,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
	IsParentPay        bool    `protobuf:"varint,5,opt,name=is_parent_pay,json=isParentPay,proto3" json:"is_parent_pay,omitempty"`                     // 是否父账户支付
	StationId          uint64  `protobuf:"varint,6,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`                             // 站点vin
	NickName           string  `protobuf:"bytes,7,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                 // vin昵称，显示在订单表
	Phone              string  `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`                                                       // 手机号
}

func (x *VINAddReq) Reset() {
	*x = VINAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINAddReq) ProtoMessage() {}

func (x *VINAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINAddReq.ProtoReflect.Descriptor instead.
func (*VINAddReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{6}
}

func (x *VINAddReq) GetVinReq() *VINReq {
	if x != nil {
		return x.VinReq
	}
	return nil
}

func (x *VINAddReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *VINAddReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *VINAddReq) GetIsParentPay() bool {
	if x != nil {
		return x.IsParentPay
	}
	return false
}

func (x *VINAddReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *VINAddReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *VINAddReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type VINReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 平台id
	Vin        string `protobuf:"bytes,2,opt,name=vin,proto3" json:"vin,omitempty"`                                  // vin号
	OperatorId uint64 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商ID
}

func (x *VINReq) Reset() {
	*x = VINReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINReq) ProtoMessage() {}

func (x *VINReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINReq.ProtoReflect.Descriptor instead.
func (*VINReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{7}
}

func (x *VINReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VINReq) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *VINReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type VINEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VinReq             *VINReq `protobuf:"bytes,1,opt,name=vin_req,json=vinReq,proto3" json:"vin_req,omitempty"`                                       // vin请求
	IsParentPay        bool    `protobuf:"varint,2,opt,name=is_parent_pay,json=isParentPay,proto3" json:"is_parent_pay,omitempty"`                     // 是否关联账户支付
	Note               string  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`                                                         // 备注
	LicensePlateNumber string  `protobuf:"bytes,4,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
	NickName           string  `protobuf:"bytes,5,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                 // vin昵称，显示在订单表
	Phone              string  `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                                                       // 手机号
}

func (x *VINEditReq) Reset() {
	*x = VINEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINEditReq) ProtoMessage() {}

func (x *VINEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINEditReq.ProtoReflect.Descriptor instead.
func (*VINEditReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{8}
}

func (x *VINEditReq) GetVinReq() *VINReq {
	if x != nil {
		return x.VinReq
	}
	return nil
}

func (x *VINEditReq) GetIsParentPay() bool {
	if x != nil {
		return x.IsParentPay
	}
	return false
}

func (x *VINEditReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *VINEditReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *VINEditReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *VINEditReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type VINBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VINInfo vin_info = 1;       // vin信息, 绑定时vin可能不存在，用vinreq请求有一些附加参数没办法待过来
	VinReq             *VINReq `protobuf:"bytes,1,opt,name=vin_req,json=vinReq,proto3" json:"vin_req,omitempty"`                                       // vin请求
	Note               string  `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`                                                         // 备注
	LicensePlateNumber string  `protobuf:"bytes,3,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
	CustomerId         uint64  `protobuf:"varint,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`                          // 用户 二选一，不可同时绑定
	GroupId            uint64  `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                   // 集团 二选一，不可同时绑定
}

func (x *VINBindReq) Reset() {
	*x = VINBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINBindReq) ProtoMessage() {}

func (x *VINBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINBindReq.ProtoReflect.Descriptor instead.
func (*VINBindReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{9}
}

func (x *VINBindReq) GetVinReq() *VINReq {
	if x != nil {
		return x.VinReq
	}
	return nil
}

func (x *VINBindReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *VINBindReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *VINBindReq) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *VINBindReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type SetVINExceptionStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VinReq *VINReq                   `protobuf:"bytes,1,opt,name=vin_req,json=vinReq,proto3" json:"vin_req,omitempty"`                      // vin请求
	Pos    AccountExceptionStatusBit `protobuf:"varint,2,opt,name=Pos,proto3,enum=customer.AccountExceptionStatusBit" json:"Pos,omitempty"` // 异常状态位
	State  bool                      `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`                                     // 状态,1：激活 0：取消
}

func (x *SetVINExceptionStatusReq) Reset() {
	*x = SetVINExceptionStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVINExceptionStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVINExceptionStatusReq) ProtoMessage() {}

func (x *SetVINExceptionStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVINExceptionStatusReq.ProtoReflect.Descriptor instead.
func (*SetVINExceptionStatusReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{10}
}

func (x *SetVINExceptionStatusReq) GetVinReq() *VINReq {
	if x != nil {
		return x.VinReq
	}
	return nil
}

func (x *SetVINExceptionStatusReq) GetPos() AccountExceptionStatusBit {
	if x != nil {
		return x.Pos
	}
	return AccountExceptionStatusBit_UNBIND_POS
}

func (x *SetVINExceptionStatusReq) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type VINChargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VinReq        *VINReq           `protobuf:"bytes,1,opt,name=vin_req,json=vinReq,proto3" json:"vin_req,omitempty"`                                                   // vin请求
	Amount        float64           `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                               // 充值金额(元)
	PayMode       common.PayMode    `protobuf:"varint,3,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`                           // 支付类型
	PayChannel    common.PayChannel `protobuf:"varint,4,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"`               // 支付渠道（一个支付类型对应多个支付渠道）
	Remark        string            `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                                                                 // 备注
	OpManagerId   uint64            `protobuf:"varint,6,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                                 // 充值管理员
	OpBalanceType BalanceType       `protobuf:"varint,7,opt,name=op_balance_type,json=opBalanceType,proto3,enum=customer.BalanceType" json:"op_balance_type,omitempty"` // 操作余额类型
}

func (x *VINChargeReq) Reset() {
	*x = VINChargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINChargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINChargeReq) ProtoMessage() {}

func (x *VINChargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINChargeReq.ProtoReflect.Descriptor instead.
func (*VINChargeReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{11}
}

func (x *VINChargeReq) GetVinReq() *VINReq {
	if x != nil {
		return x.VinReq
	}
	return nil
}

func (x *VINChargeReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *VINChargeReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *VINChargeReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *VINChargeReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VINChargeReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *VINChargeReq) GetOpBalanceType() BalanceType {
	if x != nil {
		return x.OpBalanceType
	}
	return BalanceType_PRINCIPAL
}

type VINWithholdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VinReq        *VINReq     `protobuf:"bytes,1,opt,name=vin_req,json=vinReq,proto3" json:"vin_req,omitempty"`                                                   // vin请求
	Amount        float64     `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                               // 扣款金额(元)
	Remark        string      `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                                                                 // 备注
	OpManagerId   uint64      `protobuf:"varint,4,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                                 // 扣款管理员
	OpBalanceType BalanceType `protobuf:"varint,5,opt,name=op_balance_type,json=opBalanceType,proto3,enum=customer.BalanceType" json:"op_balance_type,omitempty"` // 操作余额类型
}

func (x *VINWithholdReq) Reset() {
	*x = VINWithholdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINWithholdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINWithholdReq) ProtoMessage() {}

func (x *VINWithholdReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINWithholdReq.ProtoReflect.Descriptor instead.
func (*VINWithholdReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{12}
}

func (x *VINWithholdReq) GetVinReq() *VINReq {
	if x != nil {
		return x.VinReq
	}
	return nil
}

func (x *VINWithholdReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *VINWithholdReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VINWithholdReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *VINWithholdReq) GetOpBalanceType() BalanceType {
	if x != nil {
		return x.OpBalanceType
	}
	return BalanceType_PRINCIPAL
}

// vin
type VINInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            // 平台id
	VinNo              string        `protobuf:"bytes,2,opt,name=vin_no,json=vinNo,proto3" json:"vin_no,omitempty"`                                          // 卡号
	Note               string        `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`                                                         // 备注
	CreatedAt          uint64        `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 创建时间
	LicensePlateNumber string        `protobuf:"bytes,5,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
	OperatorId         uint64        `protobuf:"varint,6,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                          // 运营商ID
	Balance            float64       `protobuf:"fixed64,7,opt,name=balance,proto3" json:"balance,omitempty"`                                                 // 总余额
	PrincipalBalance   float64       `protobuf:"fixed64,8,opt,name=principal_balance,json=principalBalance,proto3" json:"principal_balance,omitempty"`       // 本金余额
	GiftBalance        float64       `protobuf:"fixed64,9,opt,name=gift_balance,json=giftBalance,proto3" json:"gift_balance,omitempty"`                      // 赠送余额
	ExceptionStatus    uint32        `protobuf:"varint,10,opt,name=exception_status,json=exceptionStatus,proto3" json:"exception_status,omitempty"`          // 卡异常状态（0 不冻结， > 1 异常）
	OrderId            uint64        `protobuf:"varint,11,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                  // 关联订单
	IsParentPay        bool          `protobuf:"varint,12,opt,name=is_parent_pay,json=isParentPay,proto3" json:"is_parent_pay,omitempty"`                    // 是否父账号支付(默认采用自身余额支付，当绑定用户是，将采用用户余额支付)
	StationId          uint64        `protobuf:"varint,13,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`                            // 站点id
	Customer           *CustomerInfo `protobuf:"bytes,14,opt,name=customer,proto3" json:"customer,omitempty"`                                                // 用户信息
	Group              *Group        `protobuf:"bytes,15,opt,name=group,proto3" json:"group,omitempty"`                                                      // 集团信息
	NickName           string        `protobuf:"bytes,16,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                // vin昵称，显示在订单表
	Phone              string        `protobuf:"bytes,17,opt,name=phone,proto3" json:"phone,omitempty"`                                                      // 手机号
}

func (x *VINInfo) Reset() {
	*x = VINInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VINInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VINInfo) ProtoMessage() {}

func (x *VINInfo) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VINInfo.ProtoReflect.Descriptor instead.
func (*VINInfo) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{13}
}

func (x *VINInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VINInfo) GetVinNo() string {
	if x != nil {
		return x.VinNo
	}
	return ""
}

func (x *VINInfo) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *VINInfo) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *VINInfo) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *VINInfo) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *VINInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *VINInfo) GetPrincipalBalance() float64 {
	if x != nil {
		return x.PrincipalBalance
	}
	return 0
}

func (x *VINInfo) GetGiftBalance() float64 {
	if x != nil {
		return x.GiftBalance
	}
	return 0
}

func (x *VINInfo) GetExceptionStatus() uint32 {
	if x != nil {
		return x.ExceptionStatus
	}
	return 0
}

func (x *VINInfo) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *VINInfo) GetIsParentPay() bool {
	if x != nil {
		return x.IsParentPay
	}
	return false
}

func (x *VINInfo) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *VINInfo) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *VINInfo) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *VINInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *VINInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

//////////////////////// 集团 begin /////////////////////////////
type AddGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                     // 名称
	OperatorId uint64    `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                      // 运营商ID
	Email      string    `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`                                                   // 邮箱
	Phone      string    `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`                                                   // 电话
	GroupType  GroupType `protobuf:"varint,5,opt,name=group_type,json=groupType,proto3,enum=customer.GroupType" json:"group_type,omitempty"` // 公交类型
}

func (x *AddGroupReq) Reset() {
	*x = AddGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGroupReq) ProtoMessage() {}

func (x *AddGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGroupReq.ProtoReflect.Descriptor instead.
func (*AddGroupReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{14}
}

func (x *AddGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddGroupReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *AddGroupReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddGroupReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AddGroupReq) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GT_DEFAULT
}

type EditGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // 集团ID
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                     // 名称
	Email     string    `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`                                                   // 邮箱
	Phone     string    `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`                                                   // 电话
	GroupType GroupType `protobuf:"varint,5,opt,name=group_type,json=groupType,proto3,enum=customer.GroupType" json:"group_type,omitempty"` // 公交类型
	CallerId  uint64    `protobuf:"varint,6,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`                            // 集团id
}

func (x *EditGroupReq) Reset() {
	*x = EditGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditGroupReq) ProtoMessage() {}

func (x *EditGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditGroupReq.ProtoReflect.Descriptor instead.
func (*EditGroupReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{15}
}

func (x *EditGroupReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EditGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EditGroupReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EditGroupReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *EditGroupReq) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GT_DEFAULT
}

func (x *EditGroupReq) GetCallerId() uint64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

type ListGroupsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`                          //翻页
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //运营商ID
	GroupId    uint64          `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`          //groupid
}

func (x *ListGroupsReq) Reset() {
	*x = ListGroupsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsReq) ProtoMessage() {}

func (x *ListGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsReq.ProtoReflect.Descriptor instead.
func (*ListGroupsReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{16}
}

func (x *ListGroupsReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *ListGroupsReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ListGroupsReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ListGroupsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"` //
	Groups   []*Group         `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`     //集团列表
}

func (x *ListGroupsResp) Reset() {
	*x = ListGroupsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsResp) ProtoMessage() {}

func (x *ListGroupsResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsResp.ProtoReflect.Descriptor instead.
func (*ListGroupsResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{17}
}

func (x *ListGroupsResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *ListGroupsResp) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SetGroupStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   //集团ID
	IsBlock    bool   `protobuf:"varint,2,opt,name=is_block,json=isBlock,proto3" json:"is_block,omitempty"`          //是否屏蔽
	OperatorId uint64 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //运营商ID
}

func (x *SetGroupStateReq) Reset() {
	*x = SetGroupStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupStateReq) ProtoMessage() {}

func (x *SetGroupStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupStateReq.ProtoReflect.Descriptor instead.
func (*SetGroupStateReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{18}
}

func (x *SetGroupStateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetGroupStateReq) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

func (x *SetGroupStateReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type GroupIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` //ID
}

func (x *GroupIDReq) Reset() {
	*x = GroupIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIDReq) ProtoMessage() {}

func (x *GroupIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIDReq.ProtoReflect.Descriptor instead.
func (*GroupIDReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{19}
}

func (x *GroupIDReq) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"` //集团信息
}

func (x *GetGroupInfoResp) Reset() {
	*x = GetGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoResp) ProtoMessage() {}

func (x *GetGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoResp.ProtoReflect.Descriptor instead.
func (*GetGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{20}
}

func (x *GetGroupInfoResp) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // ID
	Name       string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                     // 名称
	Balance    float64   `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`                                             // 余额
	IsBlock    bool      `protobuf:"varint,4,opt,name=is_block,json=isBlock,proto3" json:"is_block,omitempty"`                               // 是否屏蔽
	OperatorId uint64    `protobuf:"varint,5,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                      // 运营商ID
	Email      string    `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`                                                   // 邮箱
	Phone      string    `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`                                                   // 电话
	CreatedAt  int64     `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                         // 创建时间
	GroupType  GroupType `protobuf:"varint,9,opt,name=group_type,json=groupType,proto3,enum=customer.GroupType" json:"group_type,omitempty"` // 公交类型
	CallerId   uint64    `protobuf:"varint,10,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`                           // 调用方id
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{21}
}

func (x *Group) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Group) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

func (x *Group) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Group) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Group) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Group) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Group) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GT_DEFAULT
}

func (x *Group) GetCallerId() uint64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

type GroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                   // 成员id
	GroupId            uint64                  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                                                          // 集团ID
	OperatorId         uint64                  `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                                                                 // 运营商ID
	IsBlock            bool                    `protobuf:"varint,5,opt,name=IsBlock,proto3" json:"IsBlock,omitempty"`                                                                                         // 是否屏蔽
	CreatedAt          int64                   `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                    // 创建时间
	BusExtra           *GroupMemberBusExtra    `protobuf:"bytes,7,opt,name=bus_extra,json=busExtra,proto3" json:"bus_extra,omitempty"`                                                                        // 集团公交成员扩展，公交集团使用
	MemberResourceType GroupMemberResourceType `protobuf:"varint,8,opt,name=member_resource_type,json=memberResourceType,proto3,enum=customer.GroupMemberResourceType" json:"member_resource_type,omitempty"` // 成员资源类型
	// Types that are assignable to MemberResourceInfo:
	//	*GroupMember_CustomerInfo
	//	*GroupMember_CardInfo
	//	*GroupMember_VinInfo
	MemberResourceInfo isGroupMember_MemberResourceInfo `protobuf_oneof:"member_resource_info"`
}

func (x *GroupMember) Reset() {
	*x = GroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMember) ProtoMessage() {}

func (x *GroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMember.ProtoReflect.Descriptor instead.
func (*GroupMember) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{22}
}

func (x *GroupMember) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupMember) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupMember) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *GroupMember) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

func (x *GroupMember) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GroupMember) GetBusExtra() *GroupMemberBusExtra {
	if x != nil {
		return x.BusExtra
	}
	return nil
}

func (x *GroupMember) GetMemberResourceType() GroupMemberResourceType {
	if x != nil {
		return x.MemberResourceType
	}
	return GroupMemberResourceType_GMRT_CUSTOMER
}

func (m *GroupMember) GetMemberResourceInfo() isGroupMember_MemberResourceInfo {
	if m != nil {
		return m.MemberResourceInfo
	}
	return nil
}

func (x *GroupMember) GetCustomerInfo() *CustomerInfo {
	if x, ok := x.GetMemberResourceInfo().(*GroupMember_CustomerInfo); ok {
		return x.CustomerInfo
	}
	return nil
}

func (x *GroupMember) GetCardInfo() *CardInfo {
	if x, ok := x.GetMemberResourceInfo().(*GroupMember_CardInfo); ok {
		return x.CardInfo
	}
	return nil
}

func (x *GroupMember) GetVinInfo() *VINInfo {
	if x, ok := x.GetMemberResourceInfo().(*GroupMember_VinInfo); ok {
		return x.VinInfo
	}
	return nil
}

type isGroupMember_MemberResourceInfo interface {
	isGroupMember_MemberResourceInfo()
}

type GroupMember_CustomerInfo struct {
	CustomerInfo *CustomerInfo `protobuf:"bytes,9,opt,name=customer_info,json=customerInfo,proto3,oneof"` // 用户信息
}

type GroupMember_CardInfo struct {
	CardInfo *CardInfo `protobuf:"bytes,10,opt,name=card_info,json=cardInfo,proto3,oneof"` // 卡
}

type GroupMember_VinInfo struct {
	VinInfo *VINInfo `protobuf:"bytes,11,opt,name=vin_info,json=vinInfo,proto3,oneof"` // vin
}

func (*GroupMember_CustomerInfo) isGroupMember_MemberResourceInfo() {}

func (*GroupMember_CardInfo) isGroupMember_MemberResourceInfo() {}

func (*GroupMember_VinInfo) isGroupMember_MemberResourceInfo() {}

// 集团公交成员扩展
type GroupMemberBusExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string phone                    = 1;    // 手机号
	// string driver_name              = 3;    // 司机
	BusSubsidiary string `protobuf:"bytes,4,opt,name=bus_subsidiary,json=busSubsidiary,proto3" json:"bus_subsidiary,omitempty"` // 公交子公司
	BusLineNo     string `protobuf:"bytes,5,opt,name=bus_line_no,json=busLineNo,proto3" json:"bus_line_no,omitempty"`           // 公交线路
	// string license_plate_number     = 6;    // 车牌号
	Vin   string `protobuf:"bytes,7,opt,name=vin,proto3" json:"vin,omitempty"`                  // 车架号
	CarNo string `protobuf:"bytes,8,opt,name=car_no,json=carNo,proto3" json:"car_no,omitempty"` // 车辆号
}

func (x *GroupMemberBusExtra) Reset() {
	*x = GroupMemberBusExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberBusExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberBusExtra) ProtoMessage() {}

func (x *GroupMemberBusExtra) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberBusExtra.ProtoReflect.Descriptor instead.
func (*GroupMemberBusExtra) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{23}
}

func (x *GroupMemberBusExtra) GetBusSubsidiary() string {
	if x != nil {
		return x.BusSubsidiary
	}
	return ""
}

func (x *GroupMemberBusExtra) GetBusLineNo() string {
	if x != nil {
		return x.BusLineNo
	}
	return ""
}

func (x *GroupMemberBusExtra) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *GroupMemberBusExtra) GetCarNo() string {
	if x != nil {
		return x.CarNo
	}
	return ""
}

type GetMemberInfoByCustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId uint64 `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"` //客户ID
	OperatorId uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //运营商ID
}

func (x *GetMemberInfoByCustomerReq) Reset() {
	*x = GetMemberInfoByCustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberInfoByCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberInfoByCustomerReq) ProtoMessage() {}

func (x *GetMemberInfoByCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberInfoByCustomerReq.ProtoReflect.Descriptor instead.
func (*GetMemberInfoByCustomerReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{24}
}

func (x *GetMemberInfoByCustomerReq) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetMemberInfoByCustomerReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type GetMemberInfoByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 成员id
}

func (x *GetMemberInfoByIDReq) Reset() {
	*x = GetMemberInfoByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberInfoByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberInfoByIDReq) ProtoMessage() {}

func (x *GetMemberInfoByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberInfoByIDReq.ProtoReflect.Descriptor instead.
func (*GetMemberInfoByIDReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{25}
}

func (x *GetMemberInfoByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetMemberInfoByVINReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VinReq *VINReq `protobuf:"bytes,1,opt,name=vin_req,json=vinReq,proto3" json:"vin_req,omitempty"`
}

func (x *GetMemberInfoByVINReq) Reset() {
	*x = GetMemberInfoByVINReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberInfoByVINReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberInfoByVINReq) ProtoMessage() {}

func (x *GetMemberInfoByVINReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberInfoByVINReq.ProtoReflect.Descriptor instead.
func (*GetMemberInfoByVINReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{26}
}

func (x *GetMemberInfoByVINReq) GetVinReq() *VINReq {
	if x != nil {
		return x.VinReq
	}
	return nil
}

type GetMemberInfoByCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardReq *CardReq `protobuf:"bytes,1,opt,name=card_req,json=cardReq,proto3" json:"card_req,omitempty"`
}

func (x *GetMemberInfoByCardReq) Reset() {
	*x = GetMemberInfoByCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemberInfoByCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberInfoByCardReq) ProtoMessage() {}

func (x *GetMemberInfoByCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberInfoByCardReq.ProtoReflect.Descriptor instead.
func (*GetMemberInfoByCardReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{27}
}

func (x *GetMemberInfoByCardReq) GetCardReq() *CardReq {
	if x != nil {
		return x.CardReq
	}
	return nil
}

type GroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            // 成员ID(添加时为空)
	IsParentPay        bool   `protobuf:"varint,2,opt,name=is_parent_pay,json=isParentPay,proto3" json:"is_parent_pay,omitempty"`                     // 成员是否集团支付
	Phone              string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                                                       // 成员手机号
	NickName           string `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                 // 成员昵称
	LicensePlateNumber string `protobuf:"bytes,5,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
}

func (x *GroupMemberReq) Reset() {
	*x = GroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberReq) ProtoMessage() {}

func (x *GroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberReq.ProtoReflect.Descriptor instead.
func (*GroupMemberReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{28}
}

func (x *GroupMemberReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupMemberReq) GetIsParentPay() bool {
	if x != nil {
		return x.IsParentPay
	}
	return false
}

func (x *GroupMemberReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GroupMemberReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GroupMemberReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

type AddMemeberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` // 集团ID
	// bool is_parent_pay                  = 2;    // 是否集团支付
	MemberReq          *GroupMemberReq         `protobuf:"bytes,2,opt,name=member_req,json=memberReq,proto3" json:"member_req,omitempty"`                                                                     // 成员请求
	BusExtra           *GroupMemberBusExtra    `protobuf:"bytes,3,opt,name=bus_extra,json=busExtra,proto3" json:"bus_extra,omitempty"`                                                                        // 集团公交成员扩展，公交集团使用
	MemberResourceType GroupMemberResourceType `protobuf:"varint,4,opt,name=member_resource_type,json=memberResourceType,proto3,enum=customer.GroupMemberResourceType" json:"member_resource_type,omitempty"` // 成员资源类型
	// Types that are assignable to MemberResourceReq:
	//	*AddMemeberReq_CustoemrReq
	//	*AddMemeberReq_CardReq
	//	*AddMemeberReq_VinReq
	MemberResourceReq isAddMemeberReq_MemberResourceReq `protobuf_oneof:"member_resource_req"`
}

func (x *AddMemeberReq) Reset() {
	*x = AddMemeberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemeberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemeberReq) ProtoMessage() {}

func (x *AddMemeberReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemeberReq.ProtoReflect.Descriptor instead.
func (*AddMemeberReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{29}
}

func (x *AddMemeberReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AddMemeberReq) GetMemberReq() *GroupMemberReq {
	if x != nil {
		return x.MemberReq
	}
	return nil
}

func (x *AddMemeberReq) GetBusExtra() *GroupMemberBusExtra {
	if x != nil {
		return x.BusExtra
	}
	return nil
}

func (x *AddMemeberReq) GetMemberResourceType() GroupMemberResourceType {
	if x != nil {
		return x.MemberResourceType
	}
	return GroupMemberResourceType_GMRT_CUSTOMER
}

func (m *AddMemeberReq) GetMemberResourceReq() isAddMemeberReq_MemberResourceReq {
	if m != nil {
		return m.MemberResourceReq
	}
	return nil
}

func (x *AddMemeberReq) GetCustoemrReq() *CustomerReq {
	if x, ok := x.GetMemberResourceReq().(*AddMemeberReq_CustoemrReq); ok {
		return x.CustoemrReq
	}
	return nil
}

func (x *AddMemeberReq) GetCardReq() *CardReq {
	if x, ok := x.GetMemberResourceReq().(*AddMemeberReq_CardReq); ok {
		return x.CardReq
	}
	return nil
}

func (x *AddMemeberReq) GetVinReq() *VINReq {
	if x, ok := x.GetMemberResourceReq().(*AddMemeberReq_VinReq); ok {
		return x.VinReq
	}
	return nil
}

type isAddMemeberReq_MemberResourceReq interface {
	isAddMemeberReq_MemberResourceReq()
}

type AddMemeberReq_CustoemrReq struct {
	CustoemrReq *CustomerReq `protobuf:"bytes,5,opt,name=custoemr_req,json=custoemrReq,proto3,oneof"` // 客户
}

type AddMemeberReq_CardReq struct {
	CardReq *CardReq `protobuf:"bytes,6,opt,name=card_req,json=cardReq,proto3,oneof"` // 卡
}

type AddMemeberReq_VinReq struct {
	VinReq *VINReq `protobuf:"bytes,7,opt,name=vin_req,json=vinReq,proto3,oneof"` // vin
}

func (*AddMemeberReq_CustoemrReq) isAddMemeberReq_MemberResourceReq() {}

func (*AddMemeberReq_CardReq) isAddMemeberReq_MemberResourceReq() {}

func (*AddMemeberReq_VinReq) isAddMemeberReq_MemberResourceReq() {}

type EditMemeberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint64 id                       = 1;    // 成员ID
	// bool is_parent_pay              = 2;    // 是否集团支付
	MemberReq *GroupMemberReq      `protobuf:"bytes,1,opt,name=member_req,json=memberReq,proto3" json:"member_req,omitempty"` // 成员请求
	BusExtra  *GroupMemberBusExtra `protobuf:"bytes,3,opt,name=bus_extra,json=busExtra,proto3" json:"bus_extra,omitempty"`    // 集团公交成员扩展，公交集团使用
}

func (x *EditMemeberReq) Reset() {
	*x = EditMemeberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMemeberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMemeberReq) ProtoMessage() {}

func (x *EditMemeberReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMemeberReq.ProtoReflect.Descriptor instead.
func (*EditMemeberReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{30}
}

func (x *EditMemeberReq) GetMemberReq() *GroupMemberReq {
	if x != nil {
		return x.MemberReq
	}
	return nil
}

func (x *EditMemeberReq) GetBusExtra() *GroupMemberBusExtra {
	if x != nil {
		return x.BusExtra
	}
	return nil
}

type SetMemeberStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId uint64 `protobuf:"varint,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // 集团成员id
	GroupId  uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`    // 集团ID
	IsBlock  bool   `protobuf:"varint,3,opt,name=is_block,json=isBlock,proto3" json:"is_block,omitempty"`    // 是否屏蔽
}

func (x *SetMemeberStateReq) Reset() {
	*x = SetMemeberStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMemeberStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMemeberStateReq) ProtoMessage() {}

func (x *SetMemeberStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMemeberStateReq.ProtoReflect.Descriptor instead.
func (*SetMemeberStateReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{31}
}

func (x *SetMemeberStateReq) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *SetMemeberStateReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetMemeberStateReq) GetIsBlock() bool {
	if x != nil {
		return x.IsBlock
	}
	return false
}

type DelMemeberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                          // 成员ID
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` // 集团ID
}

func (x *DelMemeberReq) Reset() {
	*x = DelMemeberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMemeberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMemeberReq) ProtoMessage() {}

func (x *DelMemeberReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMemeberReq.ProtoReflect.Descriptor instead.
func (*DelMemeberReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{32}
}

func (x *DelMemeberReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DelMemeberReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type DelMemeberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelMemeberResp) Reset() {
	*x = DelMemeberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelMemeberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelMemeberResp) ProtoMessage() {}

func (x *DelMemeberResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelMemeberResp.ProtoReflect.Descriptor instead.
func (*DelMemeberResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{33}
}

type MemebersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq            *common.PageReq         `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`                                                                                          //翻页
	GroupId            uint64                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                                                          //集团ID
	MemberResourceType GroupMemberResourceType `protobuf:"varint,3,opt,name=member_resource_type,json=memberResourceType,proto3,enum=customer.GroupMemberResourceType" json:"member_resource_type,omitempty"` // 成员资源类型
}

func (x *MemebersReq) Reset() {
	*x = MemebersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemebersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemebersReq) ProtoMessage() {}

func (x *MemebersReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemebersReq.ProtoReflect.Descriptor instead.
func (*MemebersReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{34}
}

func (x *MemebersReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *MemebersReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MemebersReq) GetMemberResourceType() GroupMemberResourceType {
	if x != nil {
		return x.MemberResourceType
	}
	return GroupMemberResourceType_GMRT_CUSTOMER
}

type MemebersResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"` //
	Members  []*GroupMember   `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`   //集团成员列表
}

func (x *MemebersResp) Reset() {
	*x = MemebersResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemebersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemebersResp) ProtoMessage() {}

func (x *MemebersResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemebersResp.ProtoReflect.Descriptor instead.
func (*MemebersResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{35}
}

func (x *MemebersResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *MemebersResp) GetMembers() []*GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type GroupChargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` // 集团ID
	Amount  float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                 // 金额, 单位元
	// PayChannel  pay_channel      = 3;   // 充值方式
	PayMode       common.PayMode    `protobuf:"varint,3,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`             // 支付类型
	PayChannel    common.PayChannel `protobuf:"varint,4,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"` // 支付渠道（一个支付类型对应多个支付渠道）
	BankCode      string            `protobuf:"bytes,5,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`                               // 充值银行代码(银行充值时填写)
	ChargeOrderId string            `protobuf:"bytes,6,opt,name=charge_order_id,json=chargeOrderId,proto3" json:"charge_order_id,omitempty"`              // 外部订单号，如微信服务号平台的id
	Remark        string            `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注等
	OpManagerId   uint64            `protobuf:"varint,8,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                   // 充值管理员id
}

func (x *GroupChargeReq) Reset() {
	*x = GroupChargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChargeReq) ProtoMessage() {}

func (x *GroupChargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChargeReq.ProtoReflect.Descriptor instead.
func (*GroupChargeReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{36}
}

func (x *GroupChargeReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupChargeReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GroupChargeReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *GroupChargeReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *GroupChargeReq) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *GroupChargeReq) GetChargeOrderId() string {
	if x != nil {
		return x.ChargeOrderId
	}
	return ""
}

func (x *GroupChargeReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *GroupChargeReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

type BindMerchantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer      *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                   // 用户信息
	BindManagerId uint64       `protobuf:"varint,2,opt,name=bind_manager_id,json=bindManagerId,proto3" json:"bind_manager_id,omitempty"` // 绑定桩主管理员
}

func (x *BindMerchantReq) Reset() {
	*x = BindMerchantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMerchantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMerchantReq) ProtoMessage() {}

func (x *BindMerchantReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMerchantReq.ProtoReflect.Descriptor instead.
func (*BindMerchantReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{37}
}

func (x *BindMerchantReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BindMerchantReq) GetBindManagerId() uint64 {
	if x != nil {
		return x.BindManagerId
	}
	return 0
}

type BindMerchantResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindMerchantResp) Reset() {
	*x = BindMerchantResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMerchantResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMerchantResp) ProtoMessage() {}

func (x *BindMerchantResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMerchantResp.ProtoReflect.Descriptor instead.
func (*BindMerchantResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{38}
}

type ImportCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportCardResp) Reset() {
	*x = ImportCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCardResp) ProtoMessage() {}

func (x *ImportCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCardResp.ProtoReflect.Descriptor instead.
func (*ImportCardResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{39}
}

type CustomerChargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer      *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                                             // 用户信息
	Amount        float64      `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                               // 充值金额
	Remark        string       `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                                                                 // 备注
	OpManagerId   uint64       `protobuf:"varint,4,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                                 // 充值管理员id
	OpBalanceType BalanceType  `protobuf:"varint,5,opt,name=op_balance_type,json=opBalanceType,proto3,enum=customer.BalanceType" json:"op_balance_type,omitempty"` // 操作余额类型
}

func (x *CustomerChargeReq) Reset() {
	*x = CustomerChargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerChargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerChargeReq) ProtoMessage() {}

func (x *CustomerChargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerChargeReq.ProtoReflect.Descriptor instead.
func (*CustomerChargeReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{40}
}

func (x *CustomerChargeReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CustomerChargeReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CustomerChargeReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CustomerChargeReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *CustomerChargeReq) GetOpBalanceType() BalanceType {
	if x != nil {
		return x.OpBalanceType
	}
	return BalanceType_PRINCIPAL
}

type CustomerChargeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CustomerChargeResp) Reset() {
	*x = CustomerChargeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerChargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerChargeResp) ProtoMessage() {}

func (x *CustomerChargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerChargeResp.ProtoReflect.Descriptor instead.
func (*CustomerChargeResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{41}
}

type CustomerWithholdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer      *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                                             // 用户信息
	Amount        float64      `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                               // 充值金额
	Remark        string       `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                                                                 // 备注
	OpManagerId   uint64       `protobuf:"varint,4,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                                 // 充值管理员id
	OpBalanceType BalanceType  `protobuf:"varint,5,opt,name=op_balance_type,json=opBalanceType,proto3,enum=customer.BalanceType" json:"op_balance_type,omitempty"` // 操作余额类型
}

func (x *CustomerWithholdReq) Reset() {
	*x = CustomerWithholdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerWithholdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerWithholdReq) ProtoMessage() {}

func (x *CustomerWithholdReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerWithholdReq.ProtoReflect.Descriptor instead.
func (*CustomerWithholdReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{42}
}

func (x *CustomerWithholdReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CustomerWithholdReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CustomerWithholdReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CustomerWithholdReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *CustomerWithholdReq) GetOpBalanceType() BalanceType {
	if x != nil {
		return x.OpBalanceType
	}
	return BalanceType_PRINCIPAL
}

type CustomerWithholdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CustomerWithholdResp) Reset() {
	*x = CustomerWithholdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerWithholdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerWithholdResp) ProtoMessage() {}

func (x *CustomerWithholdResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerWithholdResp.ProtoReflect.Descriptor instead.
func (*CustomerWithholdResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{43}
}

type SetActivityOpenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                       // 活动id
	IsOpen bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"` // 是否打开
}

func (x *SetActivityOpenReq) Reset() {
	*x = SetActivityOpenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivityOpenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivityOpenReq) ProtoMessage() {}

func (x *SetActivityOpenReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivityOpenReq.ProtoReflect.Descriptor instead.
func (*SetActivityOpenReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{44}
}

func (x *SetActivityOpenReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetActivityOpenReq) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type SetActivityOpenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetActivityOpenResp) Reset() {
	*x = SetActivityOpenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivityOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivityOpenResp) ProtoMessage() {}

func (x *SetActivityOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivityOpenResp.ProtoReflect.Descriptor instead.
func (*SetActivityOpenResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{45}
}

type GetActivityByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetActivityByIDReq) Reset() {
	*x = GetActivityByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityByIDReq) ProtoMessage() {}

func (x *GetActivityByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityByIDReq.ProtoReflect.Descriptor instead.
func (*GetActivityByIDReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{46}
}

func (x *GetActivityByIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetActivityByOperatorIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Type       ActivityType    `protobuf:"varint,3,opt,name=type,proto3,enum=customer.ActivityType" json:"type,omitempty"`
	Status     ActivityStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=customer.ActivityStatus" json:"status,omitempty"`
}

func (x *GetActivityByOperatorIDReq) Reset() {
	*x = GetActivityByOperatorIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityByOperatorIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityByOperatorIDReq) ProtoMessage() {}

func (x *GetActivityByOperatorIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityByOperatorIDReq.ProtoReflect.Descriptor instead.
func (*GetActivityByOperatorIDReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{47}
}

func (x *GetActivityByOperatorIDReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *GetActivityByOperatorIDReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *GetActivityByOperatorIDReq) GetType() ActivityType {
	if x != nil {
		return x.Type
	}
	return ActivityType_ActivityType_UNKNOWN
}

func (x *GetActivityByOperatorIDReq) GetStatus() ActivityStatus {
	if x != nil {
		return x.Status
	}
	return ActivityStatus_ACTIVITY_STATUS_UNKNOWN
}

type GetActivityByOperatorIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp  *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`
	Activitys []*Activity      `protobuf:"bytes,2,rep,name=activitys,proto3" json:"activitys,omitempty"`
}

func (x *GetActivityByOperatorIDResp) Reset() {
	*x = GetActivityByOperatorIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityByOperatorIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityByOperatorIDResp) ProtoMessage() {}

func (x *GetActivityByOperatorIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityByOperatorIDResp.ProtoReflect.Descriptor instead.
func (*GetActivityByOperatorIDResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{48}
}

func (x *GetActivityByOperatorIDResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *GetActivityByOperatorIDResp) GetActivitys() []*Activity {
	if x != nil {
		return x.Activitys
	}
	return nil
}

type SetActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            // 活动id
	OperatorId        uint64                                `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                          // 运营商id
	Name              string                                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         // 活动名称
	Description       string                                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                           // 活动描述
	OpManagerId       uint64                                `protobuf:"varint,5,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                     // 活动创建人
	BeginTime         int64                                 `protobuf:"varint,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`                             // 开始时间
	EndTime           int64                                 `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                   // 结束时间
	IsOpen            bool                                  `protobuf:"varint,8,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                                      // 是否打开活动
	Type              ActivityType                          `protobuf:"varint,9,opt,name=type,proto3,enum=customer.ActivityType" json:"type,omitempty"`                             // 活动类型
	UbChargeGiftsRule []*ActivityUserBalanceChargeGiftsRule `protobuf:"bytes,10,rep,name=ub_charge_gifts_rule,json=ubChargeGiftsRule,proto3" json:"ub_charge_gifts_rule,omitempty"` // 用户余额充值赠送配置
}

func (x *SetActivityReq) Reset() {
	*x = SetActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivityReq) ProtoMessage() {}

func (x *SetActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivityReq.ProtoReflect.Descriptor instead.
func (*SetActivityReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{49}
}

func (x *SetActivityReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetActivityReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *SetActivityReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetActivityReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetActivityReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *SetActivityReq) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *SetActivityReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SetActivityReq) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SetActivityReq) GetType() ActivityType {
	if x != nil {
		return x.Type
	}
	return ActivityType_ActivityType_UNKNOWN
}

func (x *SetActivityReq) GetUbChargeGiftsRule() []*ActivityUserBalanceChargeGiftsRule {
	if x != nil {
		return x.UbChargeGiftsRule
	}
	return nil
}

type SetActivityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetActivityResp) Reset() {
	*x = SetActivityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivityResp) ProtoMessage() {}

func (x *SetActivityResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivityResp.ProtoReflect.Descriptor instead.
func (*SetActivityResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{50}
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            // 活动id
	OperatorId        uint64                                `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                          // 运营商id
	Name              string                                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         // 活动名称
	Description       string                                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                           // 活动描述
	OpManagerId       uint64                                `protobuf:"varint,5,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                     // 活动创建人
	BeginTime         int64                                 `protobuf:"varint,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`                             // 开始时间
	EndTime           int64                                 `protobuf:"varint,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                   // 结束时间
	IsOpen            bool                                  `protobuf:"varint,8,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`                                      // 是否关闭（0 打开， 1 关闭）
	Type              ActivityType                          `protobuf:"varint,9,opt,name=type,proto3,enum=customer.ActivityType" json:"type,omitempty"`                             // 活动类型
	Status            ActivityStatus                        `protobuf:"varint,10,opt,name=status,proto3,enum=customer.ActivityStatus" json:"status,omitempty"`                      // 活动状态
	CreatedTime       uint64                                `protobuf:"varint,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`                      // 创建时间
	MaxAmount         float64                               `protobuf:"fixed64,12,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`                           // 活动总金额限制 0 表示时间限制, >0 表示活动总共金额控制 例充值送：如果活动赠送金额超过此金额数据，表示活动结束
	UbChargeGiftsRule []*ActivityUserBalanceChargeGiftsRule `protobuf:"bytes,13,rep,name=ub_charge_gifts_rule,json=ubChargeGiftsRule,proto3" json:"ub_charge_gifts_rule,omitempty"` // 用户余额充值赠送配置
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{51}
}

func (x *Activity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Activity) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Activity) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *Activity) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *Activity) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Activity) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *Activity) GetType() ActivityType {
	if x != nil {
		return x.Type
	}
	return ActivityType_ActivityType_UNKNOWN
}

func (x *Activity) GetStatus() ActivityStatus {
	if x != nil {
		return x.Status
	}
	return ActivityStatus_ACTIVITY_STATUS_UNKNOWN
}

func (x *Activity) GetCreatedTime() uint64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Activity) GetMaxAmount() float64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *Activity) GetUbChargeGiftsRule() []*ActivityUserBalanceChargeGiftsRule {
	if x != nil {
		return x.UbChargeGiftsRule
	}
	return nil
}

// ActivityUserBalanceChargeGifts 用户余额充值赠送配置
type ActivityUserBalanceChargeGiftsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId       uint64  `protobuf:"varint,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`                    // 规则id
	ChargeAmount float64 `protobuf:"fixed64,2,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount,omitempty"` // 充值金额
	GiftsAmount  float64 `protobuf:"fixed64,3,opt,name=gifts_amount,json=giftsAmount,proto3" json:"gifts_amount,omitempty"`    // 赠送金额
}

func (x *ActivityUserBalanceChargeGiftsRule) Reset() {
	*x = ActivityUserBalanceChargeGiftsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityUserBalanceChargeGiftsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityUserBalanceChargeGiftsRule) ProtoMessage() {}

func (x *ActivityUserBalanceChargeGiftsRule) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityUserBalanceChargeGiftsRule.ProtoReflect.Descriptor instead.
func (*ActivityUserBalanceChargeGiftsRule) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{52}
}

func (x *ActivityUserBalanceChargeGiftsRule) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ActivityUserBalanceChargeGiftsRule) GetChargeAmount() float64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *ActivityUserBalanceChargeGiftsRule) GetGiftsAmount() float64 {
	if x != nil {
		return x.GiftsAmount
	}
	return 0
}

type TransactionRefreshReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *TransactionRefreshReq) Reset() {
	*x = TransactionRefreshReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRefreshReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRefreshReq) ProtoMessage() {}

func (x *TransactionRefreshReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRefreshReq.ProtoReflect.Descriptor instead.
func (*TransactionRefreshReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{53}
}

func (x *TransactionRefreshReq) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

type TransactionQueryByCustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq      *common.PageReq        `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	Customer     *CustomerReq           `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
	SearchFilter []*common.SearchFilter `protobuf:"bytes,3,rep,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"`
}

func (x *TransactionQueryByCustomerReq) Reset() {
	*x = TransactionQueryByCustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionQueryByCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionQueryByCustomerReq) ProtoMessage() {}

func (x *TransactionQueryByCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionQueryByCustomerReq.ProtoReflect.Descriptor instead.
func (*TransactionQueryByCustomerReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{54}
}

func (x *TransactionQueryByCustomerReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *TransactionQueryByCustomerReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *TransactionQueryByCustomerReq) GetSearchFilter() []*common.SearchFilter {
	if x != nil {
		return x.SearchFilter
	}
	return nil
}

type TransactionQueryByOperatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq      *common.PageReq        `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	OperatorId   uint64                 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	SearchFilter []*common.SearchFilter `protobuf:"bytes,3,rep,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"`
}

func (x *TransactionQueryByOperatorReq) Reset() {
	*x = TransactionQueryByOperatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionQueryByOperatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionQueryByOperatorReq) ProtoMessage() {}

func (x *TransactionQueryByOperatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionQueryByOperatorReq.ProtoReflect.Descriptor instead.
func (*TransactionQueryByOperatorReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{55}
}

func (x *TransactionQueryByOperatorReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *TransactionQueryByOperatorReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *TransactionQueryByOperatorReq) GetSearchFilter() []*common.SearchFilter {
	if x != nil {
		return x.SearchFilter
	}
	return nil
}

type TransactionQueryByStationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq      *common.PageReq        `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	StationIds   []uint64               `protobuf:"varint,2,rep,packed,name=station_ids,json=stationIds,proto3" json:"station_ids,omitempty"`
	SearchFilter []*common.SearchFilter `protobuf:"bytes,3,rep,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"`
}

func (x *TransactionQueryByStationReq) Reset() {
	*x = TransactionQueryByStationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionQueryByStationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionQueryByStationReq) ProtoMessage() {}

func (x *TransactionQueryByStationReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionQueryByStationReq.ProtoReflect.Descriptor instead.
func (*TransactionQueryByStationReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{56}
}

func (x *TransactionQueryByStationReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *TransactionQueryByStationReq) GetStationIds() []uint64 {
	if x != nil {
		return x.StationIds
	}
	return nil
}

func (x *TransactionQueryByStationReq) GetSearchFilter() []*common.SearchFilter {
	if x != nil {
		return x.SearchFilter
	}
	return nil
}

type TransactionQueryByOrderIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId  uint64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	OutOrderId  string `protobuf:"bytes,2,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`
	OutPayId    string `protobuf:"bytes,3,opt,name=out_pay_id,json=outPayId,proto3" json:"out_pay_id,omitempty"`          // 支付订单号
	OutRefundId string `protobuf:"bytes,4,opt,name=out_refund_id,json=outRefundId,proto3" json:"out_refund_id,omitempty"` // 退款订单号
	Dialect     string `protobuf:"bytes,5,opt,name=dialect,proto3" json:"dialect,omitempty"`                              // "db","es"
}

func (x *TransactionQueryByOrderIDReq) Reset() {
	*x = TransactionQueryByOrderIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionQueryByOrderIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionQueryByOrderIDReq) ProtoMessage() {}

func (x *TransactionQueryByOrderIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionQueryByOrderIDReq.ProtoReflect.Descriptor instead.
func (*TransactionQueryByOrderIDReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{57}
}

func (x *TransactionQueryByOrderIDReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *TransactionQueryByOrderIDReq) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *TransactionQueryByOrderIDReq) GetOutPayId() string {
	if x != nil {
		return x.OutPayId
	}
	return ""
}

func (x *TransactionQueryByOrderIDReq) GetOutRefundId() string {
	if x != nil {
		return x.OutRefundId
	}
	return ""
}

func (x *TransactionQueryByOrderIDReq) GetDialect() string {
	if x != nil {
		return x.Dialect
	}
	return ""
}

type TransactionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp     *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`
	Transactions []*Transaction   `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *TransactionsResp) Reset() {
	*x = TransactionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsResp) ProtoMessage() {}

func (x *TransactionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsResp.ProtoReflect.Descriptor instead.
func (*TransactionsResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{58}
}

func (x *TransactionsResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *TransactionsResp) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // 交易id
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                         // 运营商id
	FlagType   TransactionFlag `protobuf:"varint,3,opt,name=flag_type,json=flagType,proto3,enum=customer.TransactionFlag" json:"flag_type,omitempty"` // 标示类型
	FlagId     uint64          `protobuf:"varint,4,opt,name=flag_id,json=flagId,proto3" json:"flag_id,omitempty"`                                     // 标示id
	OutOrderId string          `protobuf:"bytes,5,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`                        // 订单id(充值订单id/支付)
	// PayChannel pay_channel = 6;              // 支付渠道(微信支付宝)
	PayMode            common.PayMode          `protobuf:"varint,6,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`                                   // 支付类型
	PayChannel         common.PayChannel       `protobuf:"varint,7,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"`                       // 支付渠道（一个支付类型对应多个支付渠道）
	TransactType       TransactionType         `protobuf:"varint,8,opt,name=transact_type,json=transactType,proto3,enum=customer.TransactionType" json:"transact_type,omitempty"`          // 交易类型
	Amount             float64                 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`                                                                       // 交易额
	PayFee             float64                 `protobuf:"fixed64,10,opt,name=pay_fee,json=payFee,proto3" json:"pay_fee,omitempty"`                                                        // 支付金额
	CouponFee          float64                 `protobuf:"fixed64,11,opt,name=coupon_fee,json=couponFee,proto3" json:"coupon_fee,omitempty"`                                               // 券金额(100送20)
	CouponId           uint64                  `protobuf:"varint,12,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`                                                   // 券ID(也可用于红包等)
	State              TransactionStatus       `protobuf:"varint,13,opt,name=state,proto3,enum=customer.TransactionStatus" json:"state,omitempty"`                                         // 交易状态
	OutTransacOrderId  string                  `protobuf:"bytes,14,opt,name=out_transac_order_id,json=outTransacOrderId,proto3" json:"out_transac_order_id,omitempty"`                     // 支付/退款订单号(退款幂等性保证)
	Remark             string                  `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`                                                                        // 备注
	Fee                float64                 `protobuf:"fixed64,16,opt,name=fee,proto3" json:"fee,omitempty"`                                                                            // 手续费
	FeeRate            float64                 `protobuf:"fixed64,17,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`                                                     // 手续费率
	NotifyUrl          string                  `protobuf:"bytes,18,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`                                                 // 支付通知url
	NotifyStatus       TransactionNotifyStatus `protobuf:"varint,19,opt,name=notify_status,json=notifyStatus,proto3,enum=customer.TransactionNotifyStatus" json:"notify_status,omitempty"` // 通知状态
	CreatedAt          int64                   `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                // 创建时间
	CustomerId         uint64                  `protobuf:"varint,21,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`                                             // 客户ID
	Balance            float64                 `protobuf:"fixed64,22,opt,name=balance,proto3" json:"balance,omitempty"`                                                                    // 交易后余额
	OpManagerId        uint64                  `protobuf:"varint,23,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                                        // 操作管理员id
	LicensePlateNumber string                  `protobuf:"bytes,24,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"`                    // 车牌号
	RefundMode         common.RefundMode       `protobuf:"varint,25,opt,name=refund_mode,json=refundMode,proto3,enum=common.RefundMode" json:"refund_mode,omitempty"`                      // 退款类型
	BankCode           string                  `protobuf:"bytes,26,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`                                                    // 银行代码
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{59}
}

func (x *Transaction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transaction) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Transaction) GetFlagType() TransactionFlag {
	if x != nil {
		return x.FlagType
	}
	return TransactionFlag_TransactionFlagUnknown
}

func (x *Transaction) GetFlagId() uint64 {
	if x != nil {
		return x.FlagId
	}
	return 0
}

func (x *Transaction) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *Transaction) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *Transaction) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *Transaction) GetTransactType() TransactionType {
	if x != nil {
		return x.TransactType
	}
	return TransactionType_TRANSACTION_UNKNOWN
}

func (x *Transaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetPayFee() float64 {
	if x != nil {
		return x.PayFee
	}
	return 0
}

func (x *Transaction) GetCouponFee() float64 {
	if x != nil {
		return x.CouponFee
	}
	return 0
}

func (x *Transaction) GetCouponId() uint64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *Transaction) GetState() TransactionStatus {
	if x != nil {
		return x.State
	}
	return TransactionStatus_TRANSACTION_STATUS_INIT
}

func (x *Transaction) GetOutTransacOrderId() string {
	if x != nil {
		return x.OutTransacOrderId
	}
	return ""
}

func (x *Transaction) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Transaction) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Transaction) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *Transaction) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *Transaction) GetNotifyStatus() TransactionNotifyStatus {
	if x != nil {
		return x.NotifyStatus
	}
	return TransactionNotifyStatus_TNS_INIT
}

func (x *Transaction) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Transaction) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Transaction) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Transaction) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *Transaction) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *Transaction) GetRefundMode() common.RefundMode {
	if x != nil {
		return x.RefundMode
	}
	return common.RefundMode_RM_Unknown
}

func (x *Transaction) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type BackPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer          *CustomerReq      `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                                                // 用户
	OutOrderId        string            `protobuf:"bytes,2,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`                                        // 订单id
	FirstPayMode      common.PayMode    `protobuf:"varint,3,opt,name=first_pay_mode,json=firstPayMode,proto3,enum=common.PayMode" json:"first_pay_mode,omitempty"`             // 首次支付类型
	FirstPayChannel   common.PayChannel `protobuf:"varint,4,opt,name=first_pay_channel,json=firstPayChannel,proto3,enum=common.PayChannel" json:"first_pay_channel,omitempty"` // 首次支付渠道（一个支付类型对应多个支付渠道）
	OutBackPayOrderId string            `protobuf:"bytes,5,opt,name=out_back_pay_order_id,json=outBackPayOrderId,proto3" json:"out_back_pay_order_id,omitempty"`               // 补缴支付订单id
	Amount            float64           `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`                                                                  // 金额(元)
	PayMode           common.PayMode    `protobuf:"varint,7,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`                              // 支付类型
	PayChannel        common.PayChannel `protobuf:"varint,8,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"`                  // 支付渠道（一个支付类型对应多个支付渠道）
	Remark            string            `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`                                                                    // 备注
}

func (x *BackPayReq) Reset() {
	*x = BackPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackPayReq) ProtoMessage() {}

func (x *BackPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackPayReq.ProtoReflect.Descriptor instead.
func (*BackPayReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{60}
}

func (x *BackPayReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BackPayReq) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *BackPayReq) GetFirstPayMode() common.PayMode {
	if x != nil {
		return x.FirstPayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *BackPayReq) GetFirstPayChannel() common.PayChannel {
	if x != nil {
		return x.FirstPayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *BackPayReq) GetOutBackPayOrderId() string {
	if x != nil {
		return x.OutBackPayOrderId
	}
	return ""
}

func (x *BackPayReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BackPayReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *BackPayReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *BackPayReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type BackPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackPayResp) Reset() {
	*x = BackPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackPayResp) ProtoMessage() {}

func (x *BackPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackPayResp.ProtoReflect.Descriptor instead.
func (*BackPayResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{61}
}

type StatementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer     *CustomerReq           `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                             // 用户
	SearchFilter []*common.SearchFilter `protobuf:"bytes,2,rep,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"` // 过滤
}

func (x *StatementReq) Reset() {
	*x = StatementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementReq) ProtoMessage() {}

func (x *StatementReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementReq.ProtoReflect.Descriptor instead.
func (*StatementReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{62}
}

func (x *StatementReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *StatementReq) GetSearchFilter() []*common.SearchFilter {
	if x != nil {
		return x.SearchFilter
	}
	return nil
}

type StatementResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statements []*StatementElem `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *StatementResp) Reset() {
	*x = StatementResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementResp) ProtoMessage() {}

func (x *StatementResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementResp.ProtoReflect.Descriptor instead.
func (*StatementResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{63}
}

func (x *StatementResp) GetStatements() []*StatementElem {
	if x != nil {
		return x.Statements
	}
	return nil
}

type StatementElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlagType            TransactionFlag    `protobuf:"varint,1,opt,name=flag_type,json=flagType,proto3,enum=customer.TransactionFlag" json:"flag_type,omitempty"`                                                                           // 交易账户
	TransactAccountDesc string             `protobuf:"bytes,2,opt,name=transact_account_desc,json=transactAccountDesc,proto3" json:"transact_account_desc,omitempty"`                                                                       // 交易账户描述
	TotalCharge         float64            `protobuf:"fixed64,3,opt,name=total_charge,json=totalCharge,proto3" json:"total_charge,omitempty"`                                                                                               // 总充值
	ChargeDetail        map[string]float64 `protobuf:"bytes,4,rep,name=charge_detail,json=chargeDetail,proto3" json:"charge_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`    // 充值明细
	TotalConsume        float64            `protobuf:"fixed64,5,opt,name=total_consume,json=totalConsume,proto3" json:"total_consume,omitempty"`                                                                                            // 总消费
	ConsumeDetail       map[string]float64 `protobuf:"bytes,6,rep,name=consume_detail,json=consumeDetail,proto3" json:"consume_detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // 消费明细
	Balance             float64            `protobuf:"fixed64,7,opt,name=balance,proto3" json:"balance,omitempty"`                                                                                                                          // 余额
}

func (x *StatementElem) Reset() {
	*x = StatementElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementElem) ProtoMessage() {}

func (x *StatementElem) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementElem.ProtoReflect.Descriptor instead.
func (*StatementElem) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{64}
}

func (x *StatementElem) GetFlagType() TransactionFlag {
	if x != nil {
		return x.FlagType
	}
	return TransactionFlag_TransactionFlagUnknown
}

func (x *StatementElem) GetTransactAccountDesc() string {
	if x != nil {
		return x.TransactAccountDesc
	}
	return ""
}

func (x *StatementElem) GetTotalCharge() float64 {
	if x != nil {
		return x.TotalCharge
	}
	return 0
}

func (x *StatementElem) GetChargeDetail() map[string]float64 {
	if x != nil {
		return x.ChargeDetail
	}
	return nil
}

func (x *StatementElem) GetTotalConsume() float64 {
	if x != nil {
		return x.TotalConsume
	}
	return 0
}

func (x *StatementElem) GetConsumeDetail() map[string]float64 {
	if x != nil {
		return x.ConsumeDetail
	}
	return nil
}

func (x *StatementElem) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// CardReq 卡请求对象
type CardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 平台卡ID
	No         string   `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`                                    // 卡号
	Type       CardType `protobuf:"varint,3,opt,name=type,proto3,enum=customer.CardType" json:"type,omitempty"`        // 卡类型
	OperatorId uint64   `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商ID
	ActiveCode string   `protobuf:"bytes,5,opt,name=active_code,json=activeCode,proto3" json:"active_code,omitempty"`  // 激活码
	StationId  uint64   `protobuf:"varint,6,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`    // 站点ID
}

func (x *CardReq) Reset() {
	*x = CardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardReq) ProtoMessage() {}

func (x *CardReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardReq.ProtoReflect.Descriptor instead.
func (*CardReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{65}
}

func (x *CardReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardReq) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *CardReq) GetType() CardType {
	if x != nil {
		return x.Type
	}
	return CardType_ID
}

func (x *CardReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CardReq) GetActiveCode() string {
	if x != nil {
		return x.ActiveCode
	}
	return ""
}

func (x *CardReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

type CardAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardReq            *CardReq `protobuf:"bytes,1,opt,name=card_req,json=cardReq,proto3" json:"card_req,omitempty"`                                    // 卡请求
	NickName           string   `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                 // 昵称
	Phone              string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                                                       // 手机
	LicensePlateNumber string   `protobuf:"bytes,4,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
}

func (x *CardAddReq) Reset() {
	*x = CardAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardAddReq) ProtoMessage() {}

func (x *CardAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardAddReq.ProtoReflect.Descriptor instead.
func (*CardAddReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{66}
}

func (x *CardAddReq) GetCardReq() *CardReq {
	if x != nil {
		return x.CardReq
	}
	return nil
}

func (x *CardAddReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CardAddReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CardAddReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

type CustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 平台客户id
	OperatorId uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商id
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`              // 用户id
	Vin        string `protobuf:"bytes,4,opt,name=vin,proto3" json:"vin,omitempty"`                                  //vin
	CallerId   uint64 `protobuf:"varint,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`       // 调用方ID，如果调用方ID>0,则需要根据调用方找用户
}

func (x *CustomerReq) Reset() {
	*x = CustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerReq) ProtoMessage() {}

func (x *CustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerReq.ProtoReflect.Descriptor instead.
func (*CustomerReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{67}
}

func (x *CustomerReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CustomerReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CustomerReq) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *CustomerReq) GetCallerId() uint64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

// 同步用户信息
type SyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户信息
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{68}
}

func (x *SyncReq) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

type SyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 返回平台上用户的信息
}

func (x *SyncResp) Reset() {
	*x = SyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResp) ProtoMessage() {}

func (x *SyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResp.ProtoReflect.Descriptor instead.
func (*SyncResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{69}
}

func (x *SyncResp) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

type CustomerInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
}

func (x *CustomerInfoReq) Reset() {
	*x = CustomerInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInfoReq) ProtoMessage() {}

func (x *CustomerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInfoReq.ProtoReflect.Descriptor instead.
func (*CustomerInfoReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{70}
}

func (x *CustomerInfoReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

type CustomerInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户基本信息
}

func (x *CustomerInfoResp) Reset() {
	*x = CustomerInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInfoResp) ProtoMessage() {}

func (x *CustomerInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInfoResp.ProtoReflect.Descriptor instead.
func (*CustomerInfoResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{71}
}

func (x *CustomerInfoResp) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

type CustomerChargeApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
	Amount   float64      `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`   // 充值金额(元)
	// PayChannel pay_channel    = 3;    // 充值渠道
	PayMode     common.PayMode    `protobuf:"varint,3,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`             // 支付类型
	PayChannel  common.PayChannel `protobuf:"varint,4,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"` // 支付渠道（一个支付类型对应多个支付渠道）
	Remark      string            `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注
	ActivityIds []uint64          `protobuf:"varint,6,rep,packed,name=activity_ids,json=activityIds,proto3" json:"activity_ids,omitempty"`              // 活动id
	BankCode    string            `protobuf:"bytes,7,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`                               // 银行代码(银行卡支付是有效)
}

func (x *CustomerChargeApplyReq) Reset() {
	*x = CustomerChargeApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerChargeApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerChargeApplyReq) ProtoMessage() {}

func (x *CustomerChargeApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerChargeApplyReq.ProtoReflect.Descriptor instead.
func (*CustomerChargeApplyReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{72}
}

func (x *CustomerChargeApplyReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CustomerChargeApplyReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CustomerChargeApplyReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *CustomerChargeApplyReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *CustomerChargeApplyReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CustomerChargeApplyReq) GetActivityIds() []uint64 {
	if x != nil {
		return x.ActivityIds
	}
	return nil
}

func (x *CustomerChargeApplyReq) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

type CustomerChargeApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeOrderId string `protobuf:"bytes,1,opt,name=charge_order_id,json=chargeOrderId,proto3" json:"charge_order_id,omitempty"` // 充值订单号
}

func (x *CustomerChargeApplyResp) Reset() {
	*x = CustomerChargeApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerChargeApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerChargeApplyResp) ProtoMessage() {}

func (x *CustomerChargeApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerChargeApplyResp.ProtoReflect.Descriptor instead.
func (*CustomerChargeApplyResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{73}
}

func (x *CustomerChargeApplyResp) GetChargeOrderId() string {
	if x != nil {
		return x.ChargeOrderId
	}
	return ""
}

// 用户充值
type CustomerChargeCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeOrderId string `protobuf:"bytes,1,opt,name=charge_order_id,json=chargeOrderId,proto3" json:"charge_order_id,omitempty"` // 外部订单号，如微信服务号平台的id
	Remark        string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`                                      // 备注
}

func (x *CustomerChargeCallbackReq) Reset() {
	*x = CustomerChargeCallbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerChargeCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerChargeCallbackReq) ProtoMessage() {}

func (x *CustomerChargeCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerChargeCallbackReq.ProtoReflect.Descriptor instead.
func (*CustomerChargeCallbackReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{74}
}

func (x *CustomerChargeCallbackReq) GetChargeOrderId() string {
	if x != nil {
		return x.ChargeOrderId
	}
	return ""
}

func (x *CustomerChargeCallbackReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CustomerChargeCallbackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer    *CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`       // 用户基本信息
	Transaction *Transaction  `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"` // 交易信息
}

func (x *CustomerChargeCallbackResp) Reset() {
	*x = CustomerChargeCallbackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerChargeCallbackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerChargeCallbackResp) ProtoMessage() {}

func (x *CustomerChargeCallbackResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerChargeCallbackResp.ProtoReflect.Descriptor instead.
func (*CustomerChargeCallbackResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{75}
}

func (x *CustomerChargeCallbackResp) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CustomerChargeCallbackResp) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// 用户余额支付
type CustomerPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer   *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                         // 用户请求
	OutOrderId string       `protobuf:"bytes,2,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"` // 外部订单号
	Amount     float64      `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`                           // 支付金额(元)
	NotifyUrl  string       `protobuf:"bytes,4,opt,name=notify_url,json=notifyUrl,proto3" json:"notify_url,omitempty"`      // 支付异步通知回调地址
	Remark     string       `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                             // 备注
}

func (x *CustomerPayReq) Reset() {
	*x = CustomerPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerPayReq) ProtoMessage() {}

func (x *CustomerPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerPayReq.ProtoReflect.Descriptor instead.
func (*CustomerPayReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{76}
}

func (x *CustomerPayReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CustomerPayReq) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *CustomerPayReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CustomerPayReq) GetNotifyUrl() string {
	if x != nil {
		return x.NotifyUrl
	}
	return ""
}

func (x *CustomerPayReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CustomerQueryPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId uint64 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`  // 运营商id
	OutOrderId string `protobuf:"bytes,2,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"` // 外部订单号
}

func (x *CustomerQueryPayReq) Reset() {
	*x = CustomerQueryPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerQueryPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerQueryPayReq) ProtoMessage() {}

func (x *CustomerQueryPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerQueryPayReq.ProtoReflect.Descriptor instead.
func (*CustomerQueryPayReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{77}
}

func (x *CustomerQueryPayReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CustomerQueryPayReq) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

type CustomerPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutOrderId string            `protobuf:"bytes,1,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`      // 订单id(充值订单id/支付)
	OperatorId uint64            `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`       // 运营商id
	Amount     float64           `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`                                // 交易额
	Status     TransactionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=customer.TransactionStatus" json:"status,omitempty"` // 交易状态
	Remark     string            `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                                  // 备注
	Balance    float64           `protobuf:"fixed64,6,opt,name=balance,proto3" json:"balance,omitempty"`                              // 余额
}

func (x *CustomerPayResp) Reset() {
	*x = CustomerPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerPayResp) ProtoMessage() {}

func (x *CustomerPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerPayResp.ProtoReflect.Descriptor instead.
func (*CustomerPayResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{78}
}

func (x *CustomerPayResp) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *CustomerPayResp) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CustomerPayResp) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CustomerPayResp) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_INIT
}

func (x *CustomerPayResp) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CustomerPayResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 用户余额退款
type CustomerRefundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId  uint64  `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`     // 用户请求
	OutOrderId  string  `protobuf:"bytes,2,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`    // 外部订单号
	OutRefundId string  `protobuf:"bytes,3,opt,name=out_refund_id,json=outRefundId,proto3" json:"out_refund_id,omitempty"` // 退款订单号
	Amount      float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`                              // 退款金额(元)
	Remark      string  `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                                // 备注
}

func (x *CustomerRefundReq) Reset() {
	*x = CustomerRefundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerRefundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerRefundReq) ProtoMessage() {}

func (x *CustomerRefundReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerRefundReq.ProtoReflect.Descriptor instead.
func (*CustomerRefundReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{79}
}

func (x *CustomerRefundReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CustomerRefundReq) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *CustomerRefundReq) GetOutRefundId() string {
	if x != nil {
		return x.OutRefundId
	}
	return ""
}

func (x *CustomerRefundReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CustomerRefundReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CustomerRefundResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutOrderId string            `protobuf:"bytes,1,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`      // 订单id(充值订单id/支付)
	OperatorId uint64            `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`       // 运营商id
	Amount     float64           `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`                                // 交易额
	Status     TransactionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=customer.TransactionStatus" json:"status,omitempty"` // 交易状态
	Remark     string            `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                                  // 备注
	Balance    float64           `protobuf:"fixed64,6,opt,name=balance,proto3" json:"balance,omitempty"`                              // 交易后余额
}

func (x *CustomerRefundResp) Reset() {
	*x = CustomerRefundResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerRefundResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerRefundResp) ProtoMessage() {}

func (x *CustomerRefundResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerRefundResp.ProtoReflect.Descriptor instead.
func (*CustomerRefundResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{80}
}

func (x *CustomerRefundResp) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *CustomerRefundResp) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CustomerRefundResp) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CustomerRefundResp) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_INIT
}

func (x *CustomerRefundResp) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CustomerRefundResp) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

//
type TransactionPushReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *TransactionPushReq) Reset() {
	*x = TransactionPushReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPushReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPushReq) ProtoMessage() {}

func (x *TransactionPushReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPushReq.ProtoReflect.Descriptor instead.
func (*TransactionPushReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{81}
}

func (x *TransactionPushReq) GetTransactionId() uint64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

type TransactionSetStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutOrderId  string            `protobuf:"bytes,1,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`      // 外部订单号
	OutPayId    string            `protobuf:"bytes,2,opt,name=out_pay_id,json=outPayId,proto3" json:"out_pay_id,omitempty"`            // 支付订单号
	OutRefundId string            `protobuf:"bytes,3,opt,name=out_refund_id,json=outRefundId,proto3" json:"out_refund_id,omitempty"`   // 退款订单号
	Status      TransactionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=customer.TransactionStatus" json:"status,omitempty"` // 交易状态
}

func (x *TransactionSetStateReq) Reset() {
	*x = TransactionSetStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSetStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSetStateReq) ProtoMessage() {}

func (x *TransactionSetStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSetStateReq.ProtoReflect.Descriptor instead.
func (*TransactionSetStateReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{82}
}

func (x *TransactionSetStateReq) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *TransactionSetStateReq) GetOutPayId() string {
	if x != nil {
		return x.OutPayId
	}
	return ""
}

func (x *TransactionSetStateReq) GetOutRefundId() string {
	if x != nil {
		return x.OutRefundId
	}
	return ""
}

func (x *TransactionSetStateReq) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_INIT
}

// 交易流水记录
type TransactionNotifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer    *CustomerReq      `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                              // 用户请求
	OutOrderId  string            `protobuf:"bytes,2,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`      // 外部订单号
	OutPayId    string            `protobuf:"bytes,3,opt,name=out_pay_id,json=outPayId,proto3" json:"out_pay_id,omitempty"`            // 支付订单号
	OutRefundId string            `protobuf:"bytes,4,opt,name=out_refund_id,json=outRefundId,proto3" json:"out_refund_id,omitempty"`   // 退款订单号
	Amount      float64           `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`                                // 金额(元)
	Type        TransactionType   `protobuf:"varint,6,opt,name=type,proto3,enum=customer.TransactionType" json:"type,omitempty"`       // 交易类型
	Status      TransactionStatus `protobuf:"varint,7,opt,name=status,proto3,enum=customer.TransactionStatus" json:"status,omitempty"` // 交易状态
	// PayChannel pay_channel          = 8;  // 支付渠道
	PayMode    common.PayMode    `protobuf:"varint,8,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`              // 支付类型
	PayChannel common.PayChannel `protobuf:"varint,9,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"`  // 支付渠道（一个支付类型对应多个支付渠道）
	RefundMode common.RefundMode `protobuf:"varint,10,opt,name=refund_mode,json=refundMode,proto3,enum=common.RefundMode" json:"refund_mode,omitempty"` // 退款类型
	Remark     string            `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注
	Balance    float64           `protobuf:"fixed64,12,opt,name=balance,proto3" json:"balance,omitempty"`                                               // 交易后余额
	CreatedAt  int64             `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                           // 交易时间(0表示当前时间)
}

func (x *TransactionNotifyReq) Reset() {
	*x = TransactionNotifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionNotifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionNotifyReq) ProtoMessage() {}

func (x *TransactionNotifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionNotifyReq.ProtoReflect.Descriptor instead.
func (*TransactionNotifyReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{83}
}

func (x *TransactionNotifyReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *TransactionNotifyReq) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *TransactionNotifyReq) GetOutPayId() string {
	if x != nil {
		return x.OutPayId
	}
	return ""
}

func (x *TransactionNotifyReq) GetOutRefundId() string {
	if x != nil {
		return x.OutRefundId
	}
	return ""
}

func (x *TransactionNotifyReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionNotifyReq) GetType() TransactionType {
	if x != nil {
		return x.Type
	}
	return TransactionType_TRANSACTION_UNKNOWN
}

func (x *TransactionNotifyReq) GetStatus() TransactionStatus {
	if x != nil {
		return x.Status
	}
	return TransactionStatus_TRANSACTION_STATUS_INIT
}

func (x *TransactionNotifyReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *TransactionNotifyReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *TransactionNotifyReq) GetRefundMode() common.RefundMode {
	if x != nil {
		return x.RefundMode
	}
	return common.RefundMode_RM_Unknown
}

func (x *TransactionNotifyReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TransactionNotifyReq) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TransactionNotifyReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type TransactionNotifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionNotifyResp) Reset() {
	*x = TransactionNotifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionNotifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionNotifyResp) ProtoMessage() {}

func (x *TransactionNotifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionNotifyResp.ProtoReflect.Descriptor instead.
func (*TransactionNotifyResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{84}
}

// 用户修改
type ModifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户信息
}

func (x *ModifyReq) Reset() {
	*x = ModifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyReq) ProtoMessage() {}

func (x *ModifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyReq.ProtoReflect.Descriptor instead.
func (*ModifyReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{85}
}

func (x *ModifyReq) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

type ModifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerInfo `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户信息
}

func (x *ModifyResp) Reset() {
	*x = ModifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyResp) ProtoMessage() {}

func (x *ModifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyResp.ProtoReflect.Descriptor instead.
func (*ModifyResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{86}
}

func (x *ModifyResp) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

// todo: 等前端改了接口调用后，需要删除
type BindVINReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer           *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                                 // 用户
	No                 string       `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`                                                             // vin号
	Note               string       `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`                                                         // 备注
	LicensePlateNumber string       `protobuf:"bytes,4,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
}

func (x *BindVINReq) Reset() {
	*x = BindVINReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindVINReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindVINReq) ProtoMessage() {}

func (x *BindVINReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindVINReq.ProtoReflect.Descriptor instead.
func (*BindVINReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{87}
}

func (x *BindVINReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BindVINReq) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *BindVINReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *BindVINReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

type BindVINResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindVINResp) Reset() {
	*x = BindVINResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindVINResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindVINResp) ProtoMessage() {}

func (x *BindVINResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindVINResp.ProtoReflect.Descriptor instead.
func (*BindVINResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{88}
}

type UnbindVINReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
	No       string       `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`             // vin号        二选一
	Id       uint64       `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`            // vin平台id    二选一
}

func (x *UnbindVINReq) Reset() {
	*x = UnbindVINReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindVINReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindVINReq) ProtoMessage() {}

func (x *UnbindVINReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindVINReq.ProtoReflect.Descriptor instead.
func (*UnbindVINReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{89}
}

func (x *UnbindVINReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *UnbindVINReq) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *UnbindVINReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UnbindVINResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnbindVINResp) Reset() {
	*x = UnbindVINResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindVINResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindVINResp) ProtoMessage() {}

func (x *UnbindVINResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindVINResp.ProtoReflect.Descriptor instead.
func (*UnbindVINResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{90}
}

// todo: 修完api接口后删除 del start
// 获取卡信息
type CardInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *CardReq `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"` // 卡
}

func (x *CardInfoReq) Reset() {
	*x = CardInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfoReq) ProtoMessage() {}

func (x *CardInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfoReq.ProtoReflect.Descriptor instead.
func (*CardInfoReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{91}
}

func (x *CardInfoReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

type CardInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardInfo *CardInfo `protobuf:"bytes,1,opt,name=card_info,json=cardInfo,proto3" json:"card_info,omitempty"` // 卡信息
}

func (x *CardInfoResp) Reset() {
	*x = CardInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfoResp) ProtoMessage() {}

func (x *CardInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfoResp.ProtoReflect.Descriptor instead.
func (*CardInfoResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{92}
}

func (x *CardInfoResp) GetCardInfo() *CardInfo {
	if x != nil {
		return x.CardInfo
	}
	return nil
}

// 绑定卡
type BindCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer           *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                                                 // 用户id
	Card               *CardReq     `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`                                                         // 卡
	LicensePlateNumber string       `protobuf:"bytes,3,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
}

func (x *BindCardReq) Reset() {
	*x = BindCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindCardReq) ProtoMessage() {}

func (x *BindCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindCardReq.ProtoReflect.Descriptor instead.
func (*BindCardReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{93}
}

func (x *BindCardReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BindCardReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *BindCardReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

type BindCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardInfo *CardInfo `protobuf:"bytes,1,opt,name=card_info,json=cardInfo,proto3" json:"card_info,omitempty"` // 卡信息
}

func (x *BindCardResp) Reset() {
	*x = BindCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindCardResp) ProtoMessage() {}

func (x *BindCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindCardResp.ProtoReflect.Descriptor instead.
func (*BindCardResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{94}
}

func (x *BindCardResp) GetCardInfo() *CardInfo {
	if x != nil {
		return x.CardInfo
	}
	return nil
}

// 解绑卡
type UnbindCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户id
	Card     *CardReq     `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`         // 卡
}

func (x *UnbindCardReq) Reset() {
	*x = UnbindCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindCardReq) ProtoMessage() {}

func (x *UnbindCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindCardReq.ProtoReflect.Descriptor instead.
func (*UnbindCardReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{95}
}

func (x *UnbindCardReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *UnbindCardReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

type UnbindCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnbindCardResp) Reset() {
	*x = UnbindCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindCardResp) ProtoMessage() {}

func (x *UnbindCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindCardResp.ProtoReflect.Descriptor instead.
func (*UnbindCardResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{96}
}

// 挂失卡
type ReportLostCardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户id
	Card     *CardReq     `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`         // 卡
}

func (x *ReportLostCardReq) Reset() {
	*x = ReportLostCardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportLostCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportLostCardReq) ProtoMessage() {}

func (x *ReportLostCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportLostCardReq.ProtoReflect.Descriptor instead.
func (*ReportLostCardReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{97}
}

func (x *ReportLostCardReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *ReportLostCardReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

type ReportLostCardResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportLostCardResp) Reset() {
	*x = ReportLostCardResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportLostCardResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportLostCardResp) ProtoMessage() {}

func (x *ReportLostCardResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportLostCardResp.ProtoReflect.Descriptor instead.
func (*ReportLostCardResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{98}
}

// 获取全部客户列表信息
type ListsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	Search     string          `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`                            //搜索的卡号
	OperatorId uint64          `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //运营商ID
}

func (x *ListsReq) Reset() {
	*x = ListsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsReq) ProtoMessage() {}

func (x *ListsReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsReq.ProtoReflect.Descriptor instead.
func (*ListsReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{99}
}

func (x *ListsReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *ListsReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListsReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type ListsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp  *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`                    //
	UserInfos []*CustomerInfo  `protobuf:"bytes,2,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"` // 用户信息
}

func (x *ListsResp) Reset() {
	*x = ListsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsResp) ProtoMessage() {}

func (x *ListsResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsResp.ProtoReflect.Descriptor instead.
func (*ListsResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{100}
}

func (x *ListsResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *ListsResp) GetUserInfos() []*CustomerInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

type ListsByIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	OperatorId uint64   `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *ListsByIDsReq) Reset() {
	*x = ListsByIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByIDsReq) ProtoMessage() {}

func (x *ListsByIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByIDsReq.ProtoReflect.Descriptor instead.
func (*ListsByIDsReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{101}
}

func (x *ListsByIDsReq) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListsByIDsReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type ListsByIDsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*CustomerInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"` // 用户信息
}

func (x *ListsByIDsResp) Reset() {
	*x = ListsByIDsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByIDsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByIDsResp) ProtoMessage() {}

func (x *ListsByIDsResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByIDsResp.ProtoReflect.Descriptor instead.
func (*ListsByIDsResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{102}
}

func (x *ListsByIDsResp) GetUserInfos() []*CustomerInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

type ListsByPhoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone      string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	OperatorId uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *ListsByPhoneReq) Reset() {
	*x = ListsByPhoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByPhoneReq) ProtoMessage() {}

func (x *ListsByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByPhoneReq.ProtoReflect.Descriptor instead.
func (*ListsByPhoneReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{103}
}

func (x *ListsByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ListsByPhoneReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type ListsByPhoneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*CustomerInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"` // 用户信息
}

func (x *ListsByPhoneResp) Reset() {
	*x = ListsByPhoneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByPhoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByPhoneResp) ProtoMessage() {}

func (x *ListsByPhoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByPhoneResp.ProtoReflect.Descriptor instead.
func (*ListsByPhoneResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{104}
}

func (x *ListsByPhoneResp) GetUserInfos() []*CustomerInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

type ListsByLicensePlateNumberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicensePlateNumber string `protobuf:"bytes,1,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
	OperatorId         uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                          // 运营商
}

func (x *ListsByLicensePlateNumberReq) Reset() {
	*x = ListsByLicensePlateNumberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByLicensePlateNumberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByLicensePlateNumberReq) ProtoMessage() {}

func (x *ListsByLicensePlateNumberReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByLicensePlateNumberReq.ProtoReflect.Descriptor instead.
func (*ListsByLicensePlateNumberReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{105}
}

func (x *ListsByLicensePlateNumberReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *ListsByLicensePlateNumberReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type ListsByLicensePlateNumberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfos []*CustomerInfo `protobuf:"bytes,1,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"` // 用户信息
}

func (x *ListsByLicensePlateNumberResp) Reset() {
	*x = ListsByLicensePlateNumberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByLicensePlateNumberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByLicensePlateNumberResp) ProtoMessage() {}

func (x *ListsByLicensePlateNumberResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByLicensePlateNumberResp.ProtoReflect.Descriptor instead.
func (*ListsByLicensePlateNumberResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{106}
}

func (x *ListsByLicensePlateNumberResp) GetUserInfos() []*CustomerInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

// 获取运营商客户列表信息
type ListsByOperatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *ListsByOperatorReq) Reset() {
	*x = ListsByOperatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByOperatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByOperatorReq) ProtoMessage() {}

func (x *ListsByOperatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByOperatorReq.ProtoReflect.Descriptor instead.
func (*ListsByOperatorReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{107}
}

func (x *ListsByOperatorReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *ListsByOperatorReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type ListsByOperatorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp  *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`                    //
	UserInfos []*CustomerInfo  `protobuf:"bytes,2,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"` // 用户信息
}

func (x *ListsByOperatorResp) Reset() {
	*x = ListsByOperatorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByOperatorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByOperatorResp) ProtoMessage() {}

func (x *ListsByOperatorResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByOperatorResp.ProtoReflect.Descriptor instead.
func (*ListsByOperatorResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{108}
}

func (x *ListsByOperatorResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *ListsByOperatorResp) GetUserInfos() []*CustomerInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

// 设置用户状态
type SetCustomerStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq   `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`                           // 用户
	Status   CustomerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=customer.CustomerStatus" json:"status,omitempty"` // 用户状态
}

func (x *SetCustomerStatusReq) Reset() {
	*x = SetCustomerStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCustomerStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustomerStatusReq) ProtoMessage() {}

func (x *SetCustomerStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustomerStatusReq.ProtoReflect.Descriptor instead.
func (*SetCustomerStatusReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{109}
}

func (x *SetCustomerStatusReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *SetCustomerStatusReq) GetStatus() CustomerStatus {
	if x != nil {
		return x.Status
	}
	return CustomerStatus_ENABLE
}

type SetCustomerStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerInfo *CustomerInfo `protobuf:"bytes,1,opt,name=customer_info,json=customerInfo,proto3" json:"customer_info,omitempty"` // 用户信息
}

func (x *SetCustomerStatusResp) Reset() {
	*x = SetCustomerStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCustomerStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCustomerStatusResp) ProtoMessage() {}

func (x *SetCustomerStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCustomerStatusResp.ProtoReflect.Descriptor instead.
func (*SetCustomerStatusResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{110}
}

func (x *SetCustomerStatusResp) GetCustomerInfo() *CustomerInfo {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

type GetCardsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
}

func (x *GetCardsReq) Reset() {
	*x = GetCardsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardsReq) ProtoMessage() {}

func (x *GetCardsReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardsReq.ProtoReflect.Descriptor instead.
func (*GetCardsReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{111}
}

func (x *GetCardsReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

type GetCardsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardInfos []*CardInfo `protobuf:"bytes,1,rep,name=card_infos,json=cardInfos,proto3" json:"card_infos,omitempty"` // 卡信息
}

func (x *GetCardsResp) Reset() {
	*x = GetCardsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCardsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardsResp) ProtoMessage() {}

func (x *GetCardsResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardsResp.ProtoReflect.Descriptor instead.
func (*GetCardsResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{112}
}

func (x *GetCardsResp) GetCardInfos() []*CardInfo {
	if x != nil {
		return x.CardInfos
	}
	return nil
}

// 获取客户详细信息
type GetInfoAndCardsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
}

func (x *GetInfoAndCardsReq) Reset() {
	*x = GetInfoAndCardsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoAndCardsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoAndCardsReq) ProtoMessage() {}

func (x *GetInfoAndCardsReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoAndCardsReq.ProtoReflect.Descriptor instead.
func (*GetInfoAndCardsReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{113}
}

func (x *GetInfoAndCardsReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

type GetInfoAndCardsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerInfo *CustomerInfo `protobuf:"bytes,1,opt,name=customer_info,json=customerInfo,proto3" json:"customer_info,omitempty"` // 用户信息
	Cards        []*CardInfo   `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`                                   // 卡信息
}

func (x *GetInfoAndCardsResp) Reset() {
	*x = GetInfoAndCardsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoAndCardsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoAndCardsResp) ProtoMessage() {}

func (x *GetInfoAndCardsResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoAndCardsResp.ProtoReflect.Descriptor instead.
func (*GetInfoAndCardsResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{114}
}

func (x *GetInfoAndCardsResp) GetCustomerInfo() *CustomerInfo {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

func (x *GetInfoAndCardsResp) GetCards() []*CardInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 用户信息
type CustomerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId         uint64                    `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`                                 // 用户id
	UserId             string                    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // UserID
	OperatorId         uint64                    `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                                 // 运营商id
	Phone              string                    `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`                                                              // 手机
	Birthday           int32                     `protobuf:"varint,5,opt,name=birthday,proto3" json:"birthday,omitempty"`                                                       // 出生
	Sex                Sex                       `protobuf:"varint,6,opt,name=sex,proto3,enum=customer.Sex" json:"sex,omitempty"`                                               // 性别
	NickName           string                    `protobuf:"bytes,7,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                        // (第三方平台)用户昵称
	ImageUrl           string                    `protobuf:"bytes,8,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                                        // (第三方平台)图像url
	Idcard             string                    `protobuf:"bytes,9,opt,name=idcard,proto3" json:"idcard,omitempty"`                                                            // 身份证号码
	Address            string                    `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`                                                         // 用户地址
	Email              string                    `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`                                                             // 邮箱
	Status             CustomerStatus            `protobuf:"varint,12,opt,name=status,proto3,enum=customer.CustomerStatus" json:"status,omitempty"`                             // 状态
	StatusDesc         string                    `protobuf:"bytes,13,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`                                 // 状态描述
	RegTime            int32                     `protobuf:"varint,14,opt,name=reg_time,json=regTime,proto3" json:"reg_time,omitempty"`                                         // 注册时间
	Balance            float64                   `protobuf:"fixed64,15,opt,name=balance,proto3" json:"balance,omitempty"`                                                       // 总余额
	PrincipalBalance   float64                   `protobuf:"fixed64,16,opt,name=principal_balance,json=principalBalance,proto3" json:"principal_balance,omitempty"`             // 本金余额
	GiftBalance        float64                   `protobuf:"fixed64,17,opt,name=gift_balance,json=giftBalance,proto3" json:"gift_balance,omitempty"`                            // 赠送余额
	BindManagerId      uint64                    `protobuf:"varint,18,opt,name=bind_manager_id,json=bindManagerId,proto3" json:"bind_manager_id,omitempty"`                     // 绑定桩主管理员ID
	LicensePlateNumber string                    `protobuf:"bytes,19,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"`       // 车牌号
	CallerId           uint64                    `protobuf:"varint,20,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`                                      // 调用方ID
	Remark             string                    `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`                                                           // 备注
	GroupInfo          *Group                    `protobuf:"bytes,22,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`                                    // 所属集团
	RegChannel         common.CustomerRegChannel `protobuf:"varint,23,opt,name=reg_channel,json=regChannel,proto3,enum=common.CustomerRegChannel" json:"reg_channel,omitempty"` // 注册渠道
}

func (x *CustomerInfo) Reset() {
	*x = CustomerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInfo) ProtoMessage() {}

func (x *CustomerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInfo.ProtoReflect.Descriptor instead.
func (*CustomerInfo) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{115}
}

func (x *CustomerInfo) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CustomerInfo) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CustomerInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CustomerInfo) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *CustomerInfo) GetSex() Sex {
	if x != nil {
		return x.Sex
	}
	return Sex_UNKNOWN
}

func (x *CustomerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CustomerInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *CustomerInfo) GetIdcard() string {
	if x != nil {
		return x.Idcard
	}
	return ""
}

func (x *CustomerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CustomerInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CustomerInfo) GetStatus() CustomerStatus {
	if x != nil {
		return x.Status
	}
	return CustomerStatus_ENABLE
}

func (x *CustomerInfo) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *CustomerInfo) GetRegTime() int32 {
	if x != nil {
		return x.RegTime
	}
	return 0
}

func (x *CustomerInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CustomerInfo) GetPrincipalBalance() float64 {
	if x != nil {
		return x.PrincipalBalance
	}
	return 0
}

func (x *CustomerInfo) GetGiftBalance() float64 {
	if x != nil {
		return x.GiftBalance
	}
	return 0
}

func (x *CustomerInfo) GetBindManagerId() uint64 {
	if x != nil {
		return x.BindManagerId
	}
	return 0
}

func (x *CustomerInfo) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *CustomerInfo) GetCallerId() uint64 {
	if x != nil {
		return x.CallerId
	}
	return 0
}

func (x *CustomerInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CustomerInfo) GetGroupInfo() *Group {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *CustomerInfo) GetRegChannel() common.CustomerRegChannel {
	if x != nil {
		return x.RegChannel
	}
	return common.CustomerRegChannel_CRC_Unknown
}

type CardEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card               *CardReq `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`                                                         // 卡
	LicensePlateNumber string   `protobuf:"bytes,2,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
	NickName           string   `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                 // vin昵称，显示在订单表
	Phone              string   `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`                                                       // 手机号
	IsParentPay        bool     `protobuf:"varint,5,opt,name=is_parent_pay,json=isParentPay,proto3" json:"is_parent_pay,omitempty"`                     // 关联账号支付
	IsMultiCharging    bool     `protobuf:"varint,6,opt,name=is_multi_charging,json=isMultiCharging,proto3" json:"is_multi_charging,omitempty"`         // 是否支持一卡多充电
}

func (x *CardEditReq) Reset() {
	*x = CardEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardEditReq) ProtoMessage() {}

func (x *CardEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardEditReq.ProtoReflect.Descriptor instead.
func (*CardEditReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{116}
}

func (x *CardEditReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *CardEditReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *CardEditReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CardEditReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CardEditReq) GetIsParentPay() bool {
	if x != nil {
		return x.IsParentPay
	}
	return false
}

func (x *CardEditReq) GetIsMultiCharging() bool {
	if x != nil {
		return x.IsMultiCharging
	}
	return false
}

// 获取卡充值延时配置
type GetChargeDelayConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 根据运营商获取
	ConfigId   uint64          `protobuf:"varint,3,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`       // 根据配置id获取
}

func (x *GetChargeDelayConfigReq) Reset() {
	*x = GetChargeDelayConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChargeDelayConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChargeDelayConfigReq) ProtoMessage() {}

func (x *GetChargeDelayConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChargeDelayConfigReq.ProtoReflect.Descriptor instead.
func (*GetChargeDelayConfigReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{117}
}

func (x *GetChargeDelayConfigReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *GetChargeDelayConfigReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *GetChargeDelayConfigReq) GetConfigId() uint64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

type GetChargeDelayConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp                *common.PageResp          `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`
	CardDelayExpiredConfigs []*CardDelayExpiredConfig `protobuf:"bytes,2,rep,name=card_delay_expired_configs,json=cardDelayExpiredConfigs,proto3" json:"card_delay_expired_configs,omitempty"`
}

func (x *GetChargeDelayConfigResp) Reset() {
	*x = GetChargeDelayConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChargeDelayConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChargeDelayConfigResp) ProtoMessage() {}

func (x *GetChargeDelayConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChargeDelayConfigResp.ProtoReflect.Descriptor instead.
func (*GetChargeDelayConfigResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{118}
}

func (x *GetChargeDelayConfigResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *GetChargeDelayConfigResp) GetCardDelayExpiredConfigs() []*CardDelayExpiredConfig {
	if x != nil {
		return x.CardDelayExpiredConfigs
	}
	return nil
}

// 添加卡充值延时配置
type SetChargeDelayConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardDelayExpiredConfig *CardDelayExpiredConfig `protobuf:"bytes,1,opt,name=card_delay_expired_config,json=cardDelayExpiredConfig,proto3" json:"card_delay_expired_config,omitempty"`
}

func (x *SetChargeDelayConfigReq) Reset() {
	*x = SetChargeDelayConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChargeDelayConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChargeDelayConfigReq) ProtoMessage() {}

func (x *SetChargeDelayConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChargeDelayConfigReq.ProtoReflect.Descriptor instead.
func (*SetChargeDelayConfigReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{119}
}

func (x *SetChargeDelayConfigReq) GetCardDelayExpiredConfig() *CardDelayExpiredConfig {
	if x != nil {
		return x.CardDelayExpiredConfig
	}
	return nil
}

type SetChargeDelayConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetChargeDelayConfigResp) Reset() {
	*x = SetChargeDelayConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChargeDelayConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChargeDelayConfigResp) ProtoMessage() {}

func (x *SetChargeDelayConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChargeDelayConfigResp.ProtoReflect.Descriptor instead.
func (*SetChargeDelayConfigResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{120}
}

// 删除卡充值延时配置
type DelChargeDelayConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelChargeDelayConfigReq) Reset() {
	*x = DelChargeDelayConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChargeDelayConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChargeDelayConfigReq) ProtoMessage() {}

func (x *DelChargeDelayConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChargeDelayConfigReq.ProtoReflect.Descriptor instead.
func (*DelChargeDelayConfigReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{121}
}

func (x *DelChargeDelayConfigReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelChargeDelayConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelChargeDelayConfigResp) Reset() {
	*x = DelChargeDelayConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChargeDelayConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChargeDelayConfigResp) ProtoMessage() {}

func (x *DelChargeDelayConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChargeDelayConfigResp.ProtoReflect.Descriptor instead.
func (*DelChargeDelayConfigResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{122}
}

// 获取卡退款延时配置
type GetRefundDelayConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	OperatorId uint64          `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *GetRefundDelayConfigReq) Reset() {
	*x = GetRefundDelayConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRefundDelayConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRefundDelayConfigReq) ProtoMessage() {}

func (x *GetRefundDelayConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRefundDelayConfigReq.ProtoReflect.Descriptor instead.
func (*GetRefundDelayConfigReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{123}
}

func (x *GetRefundDelayConfigReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *GetRefundDelayConfigReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type GetRefundDelayConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp                *common.PageResp          `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`
	CardDelayExpiredConfigs []*CardDelayExpiredConfig `protobuf:"bytes,2,rep,name=card_delay_expired_configs,json=cardDelayExpiredConfigs,proto3" json:"card_delay_expired_configs,omitempty"`
}

func (x *GetRefundDelayConfigResp) Reset() {
	*x = GetRefundDelayConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRefundDelayConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRefundDelayConfigResp) ProtoMessage() {}

func (x *GetRefundDelayConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRefundDelayConfigResp.ProtoReflect.Descriptor instead.
func (*GetRefundDelayConfigResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{124}
}

func (x *GetRefundDelayConfigResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *GetRefundDelayConfigResp) GetCardDelayExpiredConfigs() []*CardDelayExpiredConfig {
	if x != nil {
		return x.CardDelayExpiredConfigs
	}
	return nil
}

type SetRefundDelayConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardDelayExpiredConfig *CardDelayExpiredConfig `protobuf:"bytes,1,opt,name=card_delay_expired_config,json=cardDelayExpiredConfig,proto3" json:"card_delay_expired_config,omitempty"`
}

func (x *SetRefundDelayConfigReq) Reset() {
	*x = SetRefundDelayConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRefundDelayConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRefundDelayConfigReq) ProtoMessage() {}

func (x *SetRefundDelayConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRefundDelayConfigReq.ProtoReflect.Descriptor instead.
func (*SetRefundDelayConfigReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{125}
}

func (x *SetRefundDelayConfigReq) GetCardDelayExpiredConfig() *CardDelayExpiredConfig {
	if x != nil {
		return x.CardDelayExpiredConfig
	}
	return nil
}

type SetRefundDelayConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRefundDelayConfigResp) Reset() {
	*x = SetRefundDelayConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRefundDelayConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRefundDelayConfigResp) ProtoMessage() {}

func (x *SetRefundDelayConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRefundDelayConfigResp.ProtoReflect.Descriptor instead.
func (*SetRefundDelayConfigResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{126}
}

type CardListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq    *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`                          //翻页
	Search     string          `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`                            //搜索的卡号
	OperatorId uint64          `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` //运营商ID
	StationId  uint64          `protobuf:"varint,4,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`    //站点ID
}

func (x *CardListReq) Reset() {
	*x = CardListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardListReq) ProtoMessage() {}

func (x *CardListReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardListReq.ProtoReflect.Descriptor instead.
func (*CardListReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{127}
}

func (x *CardListReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *CardListReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *CardListReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CardListReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

// 获取客户卡
type CardsByCustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq  *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`   // 分页
	Customer *CustomerReq    `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
}

func (x *CardsByCustomerReq) Reset() {
	*x = CardsByCustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardsByCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardsByCustomerReq) ProtoMessage() {}

func (x *CardsByCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardsByCustomerReq.ProtoReflect.Descriptor instead.
func (*CardsByCustomerReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{128}
}

func (x *CardsByCustomerReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *CardsByCustomerReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

// 集团卡
type CardsByGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq *common.PageReq `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`                 // 分页
	GroupId uint64          `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` // 用户
}

func (x *CardsByGroupReq) Reset() {
	*x = CardsByGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardsByGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardsByGroupReq) ProtoMessage() {}

func (x *CardsByGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardsByGroupReq.ProtoReflect.Descriptor instead.
func (*CardsByGroupReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{129}
}

func (x *CardsByGroupReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *CardsByGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type CardListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`
	Cards    []*CardInfo      `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *CardListResp) Reset() {
	*x = CardListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardListResp) ProtoMessage() {}

func (x *CardListResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardListResp.ProtoReflect.Descriptor instead.
func (*CardListResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{130}
}

func (x *CardListResp) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *CardListResp) GetCards() []*CardInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

type CardDelayExpiredConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // id
	OperatorId uint64  `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商id
	Amount     float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`                          // 配置金额
	DelayDays  int32   `protobuf:"varint,4,opt,name=delay_days,json=delayDays,proto3" json:"delay_days,omitempty"`
}

func (x *CardDelayExpiredConfig) Reset() {
	*x = CardDelayExpiredConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardDelayExpiredConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardDelayExpiredConfig) ProtoMessage() {}

func (x *CardDelayExpiredConfig) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardDelayExpiredConfig.ProtoReflect.Descriptor instead.
func (*CardDelayExpiredConfig) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{131}
}

func (x *CardDelayExpiredConfig) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardDelayExpiredConfig) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CardDelayExpiredConfig) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CardDelayExpiredConfig) GetDelayDays() int32 {
	if x != nil {
		return x.DelayDays
	}
	return 0
}

type CardBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardReq            *CardReq `protobuf:"bytes,1,opt,name=card_req,json=cardReq,proto3" json:"card_req,omitempty"`                                    // 卡
	ActiveCode         string   `protobuf:"bytes,2,opt,name=active_code,json=activeCode,proto3" json:"active_code,omitempty"`                           // 卡激活码
	CustomerId         uint64   `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`                          // 用户ID 二选一
	GroupId            uint64   `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                   // 集团 二选一
	LicensePlateNumber string   `protobuf:"bytes,5,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
}

func (x *CardBindReq) Reset() {
	*x = CardBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardBindReq) ProtoMessage() {}

func (x *CardBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardBindReq.ProtoReflect.Descriptor instead.
func (*CardBindReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{132}
}

func (x *CardBindReq) GetCardReq() *CardReq {
	if x != nil {
		return x.CardReq
	}
	return nil
}

func (x *CardBindReq) GetActiveCode() string {
	if x != nil {
		return x.ActiveCode
	}
	return ""
}

func (x *CardBindReq) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CardBindReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CardBindReq) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

// 卡信息
type CardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // 平台id
	CardNo             string        `protobuf:"bytes,2,opt,name=card_no,json=cardNo,proto3" json:"card_no,omitempty"`                                        // 卡号
	CardType           int32         `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                                 // 卡类型
	ExpiredAt          int32         `protobuf:"varint,4,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`                              // 截止日期(时间戳)
	Balance            float64       `protobuf:"fixed64,5,opt,name=balance,proto3" json:"balance,omitempty"`                                                  // 余额(元)
	PrincipalBalance   float64       `protobuf:"fixed64,6,opt,name=principal_balance,json=principalBalance,proto3" json:"principal_balance,omitempty"`        // 本金余额
	GiftBalance        float64       `protobuf:"fixed64,7,opt,name=gift_balance,json=giftBalance,proto3" json:"gift_balance,omitempty"`                       // 赠送余额
	ExceptionStatus    int32         `protobuf:"varint,8,opt,name=exception_status,json=exceptionStatus,proto3" json:"exception_status,omitempty"`            // 卡异常状态（0 不冻结， > 1 异常）
	Customer           *CustomerInfo `protobuf:"bytes,9,opt,name=customer,proto3" json:"customer,omitempty"`                                                  // 关联客户信息
	OperatorId         uint64        `protobuf:"varint,10,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                          // 运营商id
	TodayRemainAmount  float64       `protobuf:"fixed64,11,opt,name=today_remain_amount,json=todayRemainAmount,proto3" json:"today_remain_amount,omitempty"`  // 当天可以使用金额
	OrderId            uint64        `protobuf:"varint,12,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                   // 关联订单
	ActiveCode         string        `protobuf:"bytes,13,opt,name=active_code,json=activeCode,proto3" json:"active_code,omitempty"`                           // 激活码
	CreatedAt          uint64        `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                             // 创建时间
	StationId          uint64        `protobuf:"varint,15,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`                             // 站点ID
	LicensePlateNumber string        `protobuf:"bytes,16,opt,name=license_plate_number,json=licensePlateNumber,proto3" json:"license_plate_number,omitempty"` // 车牌号
	IsParentPay        bool          `protobuf:"varint,17,opt,name=is_parent_pay,json=isParentPay,proto3" json:"is_parent_pay,omitempty"`                     // 是否关联账户支付
	GroupInfo          *Group        `protobuf:"bytes,18,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`                              // 关联集团信息
	NickName           string        `protobuf:"bytes,19,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                 // vin昵称，显示在订单表
	Phone              string        `protobuf:"bytes,20,opt,name=phone,proto3" json:"phone,omitempty"`                                                       // 手机号
	IsMultiCharging    bool          `protobuf:"varint,21,opt,name=is_multi_charging,json=isMultiCharging,proto3" json:"is_multi_charging,omitempty"`         // 是否支持一卡多充电
}

func (x *CardInfo) Reset() {
	*x = CardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfo) ProtoMessage() {}

func (x *CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfo.ProtoReflect.Descriptor instead.
func (*CardInfo) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{133}
}

func (x *CardInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CardInfo) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *CardInfo) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *CardInfo) GetExpiredAt() int32 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *CardInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CardInfo) GetPrincipalBalance() float64 {
	if x != nil {
		return x.PrincipalBalance
	}
	return 0
}

func (x *CardInfo) GetGiftBalance() float64 {
	if x != nil {
		return x.GiftBalance
	}
	return 0
}

func (x *CardInfo) GetExceptionStatus() int32 {
	if x != nil {
		return x.ExceptionStatus
	}
	return 0
}

func (x *CardInfo) GetCustomer() *CustomerInfo {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CardInfo) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *CardInfo) GetTodayRemainAmount() float64 {
	if x != nil {
		return x.TodayRemainAmount
	}
	return 0
}

func (x *CardInfo) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CardInfo) GetActiveCode() string {
	if x != nil {
		return x.ActiveCode
	}
	return ""
}

func (x *CardInfo) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CardInfo) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

func (x *CardInfo) GetLicensePlateNumber() string {
	if x != nil {
		return x.LicensePlateNumber
	}
	return ""
}

func (x *CardInfo) GetIsParentPay() bool {
	if x != nil {
		return x.IsParentPay
	}
	return false
}

func (x *CardInfo) GetGroupInfo() *Group {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

func (x *CardInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CardInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CardInfo) GetIsMultiCharging() bool {
	if x != nil {
		return x.IsMultiCharging
	}
	return false
}

type CardChargeApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
	Card     *CardReq     `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`         // 卡
	Amount   float64      `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`   // 充值金额(元)
	// PayChannel pay_channel    = 4;    // 充值渠道
	PayMode    common.PayMode    `protobuf:"varint,4,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`             // 支付类型
	PayChannel common.PayChannel `protobuf:"varint,5,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"` // 支付渠道（一个支付类型对应多个支付渠道）
	Remark     string            `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`                                                   // 备注
}

func (x *CardChargeApplyReq) Reset() {
	*x = CardChargeApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChargeApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChargeApplyReq) ProtoMessage() {}

func (x *CardChargeApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChargeApplyReq.ProtoReflect.Descriptor instead.
func (*CardChargeApplyReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{134}
}

func (x *CardChargeApplyReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *CardChargeApplyReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *CardChargeApplyReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CardChargeApplyReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *CardChargeApplyReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *CardChargeApplyReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CardChargeApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeOrderId string `protobuf:"bytes,1,opt,name=charge_order_id,json=chargeOrderId,proto3" json:"charge_order_id,omitempty"` // 充值订单号
}

func (x *CardChargeApplyResp) Reset() {
	*x = CardChargeApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChargeApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChargeApplyResp) ProtoMessage() {}

func (x *CardChargeApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChargeApplyResp.ProtoReflect.Descriptor instead.
func (*CardChargeApplyResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{135}
}

func (x *CardChargeApplyResp) GetChargeOrderId() string {
	if x != nil {
		return x.ChargeOrderId
	}
	return ""
}

// 卡充值
type CardChargeCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeOrderId string `protobuf:"bytes,1,opt,name=charge_order_id,json=chargeOrderId,proto3" json:"charge_order_id,omitempty"` // 充值订单号，如微信服务号平台的id
	Remark        string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`                                      // 备注
}

func (x *CardChargeCallbackReq) Reset() {
	*x = CardChargeCallbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChargeCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChargeCallbackReq) ProtoMessage() {}

func (x *CardChargeCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChargeCallbackReq.ProtoReflect.Descriptor instead.
func (*CardChargeCallbackReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{136}
}

func (x *CardChargeCallbackReq) GetChargeOrderId() string {
	if x != nil {
		return x.ChargeOrderId
	}
	return ""
}

func (x *CardChargeCallbackReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CardChargeCallbackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardInfo    *CardInfo    `protobuf:"bytes,1,opt,name=card_info,json=cardInfo,proto3" json:"card_info,omitempty"` // 卡信息
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`           // 交易信息
}

func (x *CardChargeCallbackResp) Reset() {
	*x = CardChargeCallbackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChargeCallbackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChargeCallbackResp) ProtoMessage() {}

func (x *CardChargeCallbackResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChargeCallbackResp.ProtoReflect.Descriptor instead.
func (*CardChargeCallbackResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{137}
}

func (x *CardChargeCallbackResp) GetCardInfo() *CardInfo {
	if x != nil {
		return x.CardInfo
	}
	return nil
}

func (x *CardChargeCallbackResp) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type CardChargeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardInfo *CardInfo `protobuf:"bytes,1,opt,name=card_info,json=cardInfo,proto3" json:"card_info,omitempty"` // 卡信息
}

func (x *CardChargeResp) Reset() {
	*x = CardChargeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChargeResp) ProtoMessage() {}

func (x *CardChargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChargeResp.ProtoReflect.Descriptor instead.
func (*CardChargeResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{138}
}

func (x *CardChargeResp) GetCardInfo() *CardInfo {
	if x != nil {
		return x.CardInfo
	}
	return nil
}

type CardChargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card   *CardReq `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`       // 卡
	Amount float64  `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"` // 充值金额(元)
	// PayChannel pay_channel      = 3;  // 支付渠道
	PayMode       common.PayMode    `protobuf:"varint,3,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`                           // 支付类型
	PayChannel    common.PayChannel `protobuf:"varint,4,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"`               // 支付渠道（一个支付类型对应多个支付渠道）
	Remark        string            `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                                                                 // 备注
	OpManagerId   uint64            `protobuf:"varint,6,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                                 // 充值管理员
	OpBalanceType BalanceType       `protobuf:"varint,7,opt,name=op_balance_type,json=opBalanceType,proto3,enum=customer.BalanceType" json:"op_balance_type,omitempty"` // 操作余额类型
}

func (x *CardChargeReq) Reset() {
	*x = CardChargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardChargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardChargeReq) ProtoMessage() {}

func (x *CardChargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardChargeReq.ProtoReflect.Descriptor instead.
func (*CardChargeReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{139}
}

func (x *CardChargeReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *CardChargeReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CardChargeReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *CardChargeReq) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *CardChargeReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CardChargeReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *CardChargeReq) GetOpBalanceType() BalanceType {
	if x != nil {
		return x.OpBalanceType
	}
	return BalanceType_PRINCIPAL
}

type CardWithholdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card          *CardReq    `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`                                                                     // 卡
	Amount        float64     `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                               // 扣款金额(元)
	Remark        string      `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                                                                 // 备注
	OpManagerId   uint64      `protobuf:"varint,4,opt,name=op_manager_id,json=opManagerId,proto3" json:"op_manager_id,omitempty"`                                 // 扣款管理员
	OpBalanceType BalanceType `protobuf:"varint,5,opt,name=op_balance_type,json=opBalanceType,proto3,enum=customer.BalanceType" json:"op_balance_type,omitempty"` // 操作余额类型
}

func (x *CardWithholdReq) Reset() {
	*x = CardWithholdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardWithholdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardWithholdReq) ProtoMessage() {}

func (x *CardWithholdReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardWithholdReq.ProtoReflect.Descriptor instead.
func (*CardWithholdReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{140}
}

func (x *CardWithholdReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *CardWithholdReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CardWithholdReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CardWithholdReq) GetOpManagerId() uint64 {
	if x != nil {
		return x.OpManagerId
	}
	return 0
}

func (x *CardWithholdReq) GetOpBalanceType() BalanceType {
	if x != nil {
		return x.OpBalanceType
	}
	return BalanceType_PRINCIPAL
}

type CardWithholdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardInfo *CardInfo `protobuf:"bytes,1,opt,name=card_info,json=cardInfo,proto3" json:"card_info,omitempty"` // 卡信息
}

func (x *CardWithholdResp) Reset() {
	*x = CardWithholdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardWithholdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardWithholdResp) ProtoMessage() {}

func (x *CardWithholdResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardWithholdResp.ProtoReflect.Descriptor instead.
func (*CardWithholdResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{141}
}

func (x *CardWithholdResp) GetCardInfo() *CardInfo {
	if x != nil {
		return x.CardInfo
	}
	return nil
}

type RefundToUserBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer *CustomerReq `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // 用户
	Card     *CardReq     `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`         // 卡
	Amount   float64      `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`   // 转账金额， 0表示全部
}

func (x *RefundToUserBalanceReq) Reset() {
	*x = RefundToUserBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundToUserBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundToUserBalanceReq) ProtoMessage() {}

func (x *RefundToUserBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundToUserBalanceReq.ProtoReflect.Descriptor instead.
func (*RefundToUserBalanceReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{142}
}

func (x *RefundToUserBalanceReq) GetCustomer() *CustomerReq {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *RefundToUserBalanceReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *RefundToUserBalanceReq) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type RefundToUserBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefundToUserBalanceResp) Reset() {
	*x = RefundToUserBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundToUserBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundToUserBalanceResp) ProtoMessage() {}

func (x *RefundToUserBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundToUserBalanceResp.ProtoReflect.Descriptor instead.
func (*RefundToUserBalanceResp) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{143}
}

// 变更卡状态
type SetCardExceptionStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card  *CardReq                  `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`                                        // 卡
	Pos   AccountExceptionStatusBit `protobuf:"varint,2,opt,name=Pos,proto3,enum=customer.AccountExceptionStatusBit" json:"Pos,omitempty"` // 卡状态位
	State bool                      `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`                                     // 状态,1：激活 0：取消
}

func (x *SetCardExceptionStatusReq) Reset() {
	*x = SetCardExceptionStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCardExceptionStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCardExceptionStatusReq) ProtoMessage() {}

func (x *SetCardExceptionStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_customer_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCardExceptionStatusReq.ProtoReflect.Descriptor instead.
func (*SetCardExceptionStatusReq) Descriptor() ([]byte, []int) {
	return file_customer_proto_rawDescGZIP(), []int{144}
}

func (x *SetCardExceptionStatusReq) GetCard() *CardReq {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *SetCardExceptionStatusReq) GetPos() AccountExceptionStatusBit {
	if x != nil {
		return x.Pos
	}
	return AccountExceptionStatusBit_UNBIND_POS
}

func (x *SetCardExceptionStatusReq) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

var File_customer_proto protoreflect.FileDescriptor

var file_customer_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa0, 0x01, 0x0a, 0x14,
	0x56, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x69, 0x6e, 0x22, 0x74,
	0x0a, 0x14, 0x56, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x11, 0x56, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x69, 0x6e, 0x22, 0x6c,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x49, 0x4e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x09,
	0x76, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x76, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xf2, 0x01, 0x0a,
	0x09, 0x56, 0x49, 0x4e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x52, 0x06, 0x76,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x4b, 0x0a, 0x06, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xd4,
	0x01, 0x0a, 0x0a, 0x56, 0x49, 0x4e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x07, 0x76, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71,
	0x52, 0x06, 0x76, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x56, 0x49, 0x4e, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x52, 0x06, 0x76, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x56, 0x49, 0x4e, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x07, 0x76, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x52, 0x65,
	0x71, 0x52, 0x06, 0x76, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x03, 0x50, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x74, 0x52, 0x03, 0x50, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x0c, 0x56, 0x49, 0x4e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x52, 0x06, 0x76, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x56, 0x49, 0x4e, 0x57, 0x69,
	0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x76, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x52, 0x06, 0x76, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x04, 0x0a, 0x07, 0x56, 0x49, 0x4e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67,
	0x69, 0x66, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x45, 0x64, 0x69, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x67, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70,
	0x12, 0x27, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x3b, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdd, 0x03, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x62,
	0x75, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x08, 0x62,
	0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x53, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x08, 0x76, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x16,
	0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x69,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x73, 0x4c,
	0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x72, 0x4e, 0x6f, 0x22, 0x5e,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x26,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x07, 0x76, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x52,
	0x65, 0x71, 0x52, 0x06, 0x76, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x22, 0x46, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa4,
	0x03, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75,
	0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x08, 0x62, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x53, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x65, 0x6d,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x65, 0x6d, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x2b, 0x0a, 0x07, 0x76, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49,
	0x4e, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x76, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x42, 0x15,
	0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x6d, 0x65, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x75, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x73, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x08, 0x62, 0x75, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x67, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d,
	0x65, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x14, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6d, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xa5,
	0x02, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x10, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0xdb, 0x01, 0x0a,
	0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6f, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6f,
	0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x3d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc6,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x75, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x11, 0x75, 0x62, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe7, 0x03, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5d, 0x0a, 0x14, 0x75, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x75, 0x62,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x22, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x1c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x50, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61,
	0x6c, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6c,
	0x65, 0x63, 0x74, 0x22, 0x7b, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xd1, 0x07, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x08, 0x66, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x70, 0x61, 0x79, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x3e, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x30, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x75, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a,
	0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0x0d, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x7c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x48, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x09, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x3f, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb2, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x3d, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x3e,
	0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x44,
	0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x9c, 0x02, 0x0a,
	0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b,
	0x0a, 0x19, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x1a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x58,
	0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xd6, 0x01, 0x0a, 0x12,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x04, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x3f, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x32,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x22, 0x40, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x32, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e,
	0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x0b,
	0x42, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x61, 0x0a, 0x0c, 0x55,
	0x6e, 0x62, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f,
	0x0a, 0x0d, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x56, 0x49, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x34, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x25,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x3f, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x3f, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x0d, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x10,
	0x0a, 0x0e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x6d, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22,
	0x14, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70,
	0x12, 0x35, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x48, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x35, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x71, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x7b, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a,
	0x15, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x22, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x92, 0x06, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1f, 0x0a,
	0x03, 0x73, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x78, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x69, 0x66,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xe9, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x22, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70,
	0x12, 0x5d, 0x0a, 0x1a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22,
	0x76, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x5b, 0x0a, 0x19, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x16, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x65, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x1a,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x17, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x76, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x5b, 0x0a, 0x19, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x63, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x90, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x72, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x66, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x79, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x43,
	0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52,
	0x07, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe8, 0x05, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70,
	0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x82, 0x01, 0x0a,
	0x16, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x41, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x6f, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x43, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x31, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8f, 0x01, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x35, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x69, 0x74, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x27,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x47,
	0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x54, 0x5f, 0x42, 0x55, 0x53, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4d, 0x52, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x4d, 0x52, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x4d, 0x52, 0x54, 0x5f, 0x56, 0x49, 0x4e,
	0x10, 0x02, 0x2a, 0x28, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x26, 0x0a, 0x0b,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x49,
	0x46, 0x54, 0x10, 0x01, 0x2a, 0x1e, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x10, 0x01, 0x2a, 0x29, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x2a,
	0x68, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x05, 0x2a, 0xab, 0x01, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x2a, 0xcf, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x43,
	0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x56, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x10, 0x06, 0x2a, 0x6f, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4e, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4e, 0x53, 0x5f, 0x53, 0x55,
	0x53, 0x53, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4e, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x03, 0x2a, 0x55, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2b, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x53, 0x10, 0x01, 0x2a, 0x88, 0x01, 0x0a,
	0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x32, 0x99, 0x09, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x1b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x08, 0x57, 0x69,
	0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x03, 0x50, 0x61, 0x79, 0x12, 0x18, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x12, 0x1d,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x6c, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c,
	0x0a, 0x09, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0c,
	0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x32, 0x8c, 0x05, 0x0a, 0x0a, 0x56, 0x49, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x56, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x49, 0x4e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1e,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x49,
	0x4e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x56, 0x49, 0x4e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x49, 0x4e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49,
	0x4e, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x56, 0x49, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x13,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56,
	0x49, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x14,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x56, 0x49, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x12,
	0x14, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x56, 0x49, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x06, 0x55, 0x6e, 0x62, 0x69,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49,
	0x4e, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x56, 0x49, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x49, 0x4e, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x16,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x56, 0x49, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x57, 0x69, 0x74,
	0x68, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x56, 0x49, 0x4e, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x56, 0x49, 0x4e, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0xe0, 0x0b, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x40, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x06, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x12, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x12, 0x14, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x04,
	0x45, 0x64, 0x69, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x39, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x11, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x13, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf6, 0x05, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x50, 0x75,
	0x73, 0x68, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x54, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61,
	0x79, 0x12, 0x14, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32, 0xba,
	0x02, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x24,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf3, 0x07, 0x0a, 0x0d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x34, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x17, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4d,
	0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x6d, 0x65, 0x62, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d,
	0x65, 0x62, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x4d, 0x65, 0x6d, 0x65,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x65, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x46, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x65, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x56, 0x49, 0x4e, 0x12, 0x1f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x56,
	0x49, 0x4e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x30, 0x48, 0x03, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4b, 0x6f, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_customer_proto_rawDescOnce sync.Once
	file_customer_proto_rawDescData = file_customer_proto_rawDesc
)

func file_customer_proto_rawDescGZIP() []byte {
	file_customer_proto_rawDescOnce.Do(func() {
		file_customer_proto_rawDescData = protoimpl.X.CompressGZIP(file_customer_proto_rawDescData)
	})
	return file_customer_proto_rawDescData
}

var file_customer_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_customer_proto_msgTypes = make([]protoimpl.MessageInfo, 147)
var file_customer_proto_goTypes = []interface{}{
	(GroupType)(0),                             // 0: customer.GroupType
	(GroupMemberResourceType)(0),               // 1: customer.GroupMemberResourceType
	(Sex)(0),                                   // 2: customer.Sex
	(BalanceType)(0),                           // 3: customer.BalanceType
	(CardType)(0),                              // 4: customer.CardType
	(CustomerStatus)(0),                        // 5: customer.CustomerStatus
	(AccountExceptionStatusBit)(0),             // 6: customer.AccountExceptionStatusBit
	(TransactionStatus)(0),                     // 7: customer.TransactionStatus
	(TransactionFlag)(0),                       // 8: customer.TransactionFlag
	(TransactionType)(0),                       // 9: customer.TransactionType
	(TransactionNotifyStatus)(0),               // 10: customer.TransactionNotifyStatus
	(ActivityType)(0),                          // 11: customer.ActivityType
	(ActivityStatus)(0),                        // 12: customer.ActivityStatus
	(*CleanCacheReq)(nil),                      // 13: customer.CleanCacheReq
	(*CleanCacheResp)(nil),                     // 14: customer.CleanCacheResp
	(*VINListByOperatorReq)(nil),               // 15: customer.VINListByOperatorReq
	(*VINListByCustomerReq)(nil),               // 16: customer.VINListByCustomerReq
	(*VINListByGroupReq)(nil),                  // 17: customer.VINListByGroupReq
	(*ListVINsResp)(nil),                       // 18: customer.ListVINsResp
	(*VINAddReq)(nil),                          // 19: customer.VINAddReq
	(*VINReq)(nil),                             // 20: customer.VINReq
	(*VINEditReq)(nil),                         // 21: customer.VINEditReq
	(*VINBindReq)(nil),                         // 22: customer.VINBindReq
	(*SetVINExceptionStatusReq)(nil),           // 23: customer.SetVINExceptionStatusReq
	(*VINChargeReq)(nil),                       // 24: customer.VINChargeReq
	(*VINWithholdReq)(nil),                     // 25: customer.VINWithholdReq
	(*VINInfo)(nil),                            // 26: customer.VINInfo
	(*AddGroupReq)(nil),                        // 27: customer.AddGroupReq
	(*EditGroupReq)(nil),                       // 28: customer.EditGroupReq
	(*ListGroupsReq)(nil),                      // 29: customer.ListGroupsReq
	(*ListGroupsResp)(nil),                     // 30: customer.ListGroupsResp
	(*SetGroupStateReq)(nil),                   // 31: customer.SetGroupStateReq
	(*GroupIDReq)(nil),                         // 32: customer.GroupIDReq
	(*GetGroupInfoResp)(nil),                   // 33: customer.GetGroupInfoResp
	(*Group)(nil),                              // 34: customer.Group
	(*GroupMember)(nil),                        // 35: customer.GroupMember
	(*GroupMemberBusExtra)(nil),                // 36: customer.GroupMemberBusExtra
	(*GetMemberInfoByCustomerReq)(nil),         // 37: customer.GetMemberInfoByCustomerReq
	(*GetMemberInfoByIDReq)(nil),               // 38: customer.GetMemberInfoByIDReq
	(*GetMemberInfoByVINReq)(nil),              // 39: customer.GetMemberInfoByVINReq
	(*GetMemberInfoByCardReq)(nil),             // 40: customer.GetMemberInfoByCardReq
	(*GroupMemberReq)(nil),                     // 41: customer.GroupMemberReq
	(*AddMemeberReq)(nil),                      // 42: customer.AddMemeberReq
	(*EditMemeberReq)(nil),                     // 43: customer.EditMemeberReq
	(*SetMemeberStateReq)(nil),                 // 44: customer.SetMemeberStateReq
	(*DelMemeberReq)(nil),                      // 45: customer.DelMemeberReq
	(*DelMemeberResp)(nil),                     // 46: customer.DelMemeberResp
	(*MemebersReq)(nil),                        // 47: customer.MemebersReq
	(*MemebersResp)(nil),                       // 48: customer.MemebersResp
	(*GroupChargeReq)(nil),                     // 49: customer.GroupChargeReq
	(*BindMerchantReq)(nil),                    // 50: customer.BindMerchantReq
	(*BindMerchantResp)(nil),                   // 51: customer.BindMerchantResp
	(*ImportCardResp)(nil),                     // 52: customer.ImportCardResp
	(*CustomerChargeReq)(nil),                  // 53: customer.CustomerChargeReq
	(*CustomerChargeResp)(nil),                 // 54: customer.CustomerChargeResp
	(*CustomerWithholdReq)(nil),                // 55: customer.CustomerWithholdReq
	(*CustomerWithholdResp)(nil),               // 56: customer.CustomerWithholdResp
	(*SetActivityOpenReq)(nil),                 // 57: customer.SetActivityOpenReq
	(*SetActivityOpenResp)(nil),                // 58: customer.SetActivityOpenResp
	(*GetActivityByIDReq)(nil),                 // 59: customer.GetActivityByIDReq
	(*GetActivityByOperatorIDReq)(nil),         // 60: customer.GetActivityByOperatorIDReq
	(*GetActivityByOperatorIDResp)(nil),        // 61: customer.GetActivityByOperatorIDResp
	(*SetActivityReq)(nil),                     // 62: customer.SetActivityReq
	(*SetActivityResp)(nil),                    // 63: customer.SetActivityResp
	(*Activity)(nil),                           // 64: customer.Activity
	(*ActivityUserBalanceChargeGiftsRule)(nil), // 65: customer.ActivityUserBalanceChargeGiftsRule
	(*TransactionRefreshReq)(nil),              // 66: customer.TransactionRefreshReq
	(*TransactionQueryByCustomerReq)(nil),      // 67: customer.TransactionQueryByCustomerReq
	(*TransactionQueryByOperatorReq)(nil),      // 68: customer.TransactionQueryByOperatorReq
	(*TransactionQueryByStationReq)(nil),       // 69: customer.TransactionQueryByStationReq
	(*TransactionQueryByOrderIDReq)(nil),       // 70: customer.TransactionQueryByOrderIDReq
	(*TransactionsResp)(nil),                   // 71: customer.TransactionsResp
	(*Transaction)(nil),                        // 72: customer.Transaction
	(*BackPayReq)(nil),                         // 73: customer.BackPayReq
	(*BackPayResp)(nil),                        // 74: customer.BackPayResp
	(*StatementReq)(nil),                       // 75: customer.StatementReq
	(*StatementResp)(nil),                      // 76: customer.StatementResp
	(*StatementElem)(nil),                      // 77: customer.StatementElem
	(*CardReq)(nil),                            // 78: customer.CardReq
	(*CardAddReq)(nil),                         // 79: customer.CardAddReq
	(*CustomerReq)(nil),                        // 80: customer.CustomerReq
	(*SyncReq)(nil),                            // 81: customer.SyncReq
	(*SyncResp)(nil),                           // 82: customer.SyncResp
	(*CustomerInfoReq)(nil),                    // 83: customer.CustomerInfoReq
	(*CustomerInfoResp)(nil),                   // 84: customer.CustomerInfoResp
	(*CustomerChargeApplyReq)(nil),             // 85: customer.CustomerChargeApplyReq
	(*CustomerChargeApplyResp)(nil),            // 86: customer.CustomerChargeApplyResp
	(*CustomerChargeCallbackReq)(nil),          // 87: customer.CustomerChargeCallbackReq
	(*CustomerChargeCallbackResp)(nil),         // 88: customer.CustomerChargeCallbackResp
	(*CustomerPayReq)(nil),                     // 89: customer.CustomerPayReq
	(*CustomerQueryPayReq)(nil),                // 90: customer.CustomerQueryPayReq
	(*CustomerPayResp)(nil),                    // 91: customer.CustomerPayResp
	(*CustomerRefundReq)(nil),                  // 92: customer.CustomerRefundReq
	(*CustomerRefundResp)(nil),                 // 93: customer.CustomerRefundResp
	(*TransactionPushReq)(nil),                 // 94: customer.TransactionPushReq
	(*TransactionSetStateReq)(nil),             // 95: customer.TransactionSetStateReq
	(*TransactionNotifyReq)(nil),               // 96: customer.TransactionNotifyReq
	(*TransactionNotifyResp)(nil),              // 97: customer.TransactionNotifyResp
	(*ModifyReq)(nil),                          // 98: customer.ModifyReq
	(*ModifyResp)(nil),                         // 99: customer.ModifyResp
	(*BindVINReq)(nil),                         // 100: customer.BindVINReq
	(*BindVINResp)(nil),                        // 101: customer.BindVINResp
	(*UnbindVINReq)(nil),                       // 102: customer.UnbindVINReq
	(*UnbindVINResp)(nil),                      // 103: customer.UnbindVINResp
	(*CardInfoReq)(nil),                        // 104: customer.CardInfoReq
	(*CardInfoResp)(nil),                       // 105: customer.CardInfoResp
	(*BindCardReq)(nil),                        // 106: customer.BindCardReq
	(*BindCardResp)(nil),                       // 107: customer.BindCardResp
	(*UnbindCardReq)(nil),                      // 108: customer.UnbindCardReq
	(*UnbindCardResp)(nil),                     // 109: customer.UnbindCardResp
	(*ReportLostCardReq)(nil),                  // 110: customer.ReportLostCardReq
	(*ReportLostCardResp)(nil),                 // 111: customer.ReportLostCardResp
	(*ListsReq)(nil),                           // 112: customer.ListsReq
	(*ListsResp)(nil),                          // 113: customer.ListsResp
	(*ListsByIDsReq)(nil),                      // 114: customer.ListsByIDsReq
	(*ListsByIDsResp)(nil),                     // 115: customer.ListsByIDsResp
	(*ListsByPhoneReq)(nil),                    // 116: customer.ListsByPhoneReq
	(*ListsByPhoneResp)(nil),                   // 117: customer.ListsByPhoneResp
	(*ListsByLicensePlateNumberReq)(nil),       // 118: customer.ListsByLicensePlateNumberReq
	(*ListsByLicensePlateNumberResp)(nil),      // 119: customer.ListsByLicensePlateNumberResp
	(*ListsByOperatorReq)(nil),                 // 120: customer.ListsByOperatorReq
	(*ListsByOperatorResp)(nil),                // 121: customer.ListsByOperatorResp
	(*SetCustomerStatusReq)(nil),               // 122: customer.SetCustomerStatusReq
	(*SetCustomerStatusResp)(nil),              // 123: customer.SetCustomerStatusResp
	(*GetCardsReq)(nil),                        // 124: customer.GetCardsReq
	(*GetCardsResp)(nil),                       // 125: customer.GetCardsResp
	(*GetInfoAndCardsReq)(nil),                 // 126: customer.GetInfoAndCardsReq
	(*GetInfoAndCardsResp)(nil),                // 127: customer.GetInfoAndCardsResp
	(*CustomerInfo)(nil),                       // 128: customer.CustomerInfo
	(*CardEditReq)(nil),                        // 129: customer.CardEditReq
	(*GetChargeDelayConfigReq)(nil),            // 130: customer.GetChargeDelayConfigReq
	(*GetChargeDelayConfigResp)(nil),           // 131: customer.GetChargeDelayConfigResp
	(*SetChargeDelayConfigReq)(nil),            // 132: customer.SetChargeDelayConfigReq
	(*SetChargeDelayConfigResp)(nil),           // 133: customer.SetChargeDelayConfigResp
	(*DelChargeDelayConfigReq)(nil),            // 134: customer.DelChargeDelayConfigReq
	(*DelChargeDelayConfigResp)(nil),           // 135: customer.DelChargeDelayConfigResp
	(*GetRefundDelayConfigReq)(nil),            // 136: customer.GetRefundDelayConfigReq
	(*GetRefundDelayConfigResp)(nil),           // 137: customer.GetRefundDelayConfigResp
	(*SetRefundDelayConfigReq)(nil),            // 138: customer.SetRefundDelayConfigReq
	(*SetRefundDelayConfigResp)(nil),           // 139: customer.SetRefundDelayConfigResp
	(*CardListReq)(nil),                        // 140: customer.CardListReq
	(*CardsByCustomerReq)(nil),                 // 141: customer.CardsByCustomerReq
	(*CardsByGroupReq)(nil),                    // 142: customer.CardsByGroupReq
	(*CardListResp)(nil),                       // 143: customer.CardListResp
	(*CardDelayExpiredConfig)(nil),             // 144: customer.CardDelayExpiredConfig
	(*CardBindReq)(nil),                        // 145: customer.CardBindReq
	(*CardInfo)(nil),                           // 146: customer.CardInfo
	(*CardChargeApplyReq)(nil),                 // 147: customer.CardChargeApplyReq
	(*CardChargeApplyResp)(nil),                // 148: customer.CardChargeApplyResp
	(*CardChargeCallbackReq)(nil),              // 149: customer.CardChargeCallbackReq
	(*CardChargeCallbackResp)(nil),             // 150: customer.CardChargeCallbackResp
	(*CardChargeResp)(nil),                     // 151: customer.CardChargeResp
	(*CardChargeReq)(nil),                      // 152: customer.CardChargeReq
	(*CardWithholdReq)(nil),                    // 153: customer.CardWithholdReq
	(*CardWithholdResp)(nil),                   // 154: customer.CardWithholdResp
	(*RefundToUserBalanceReq)(nil),             // 155: customer.RefundToUserBalanceReq
	(*RefundToUserBalanceResp)(nil),            // 156: customer.RefundToUserBalanceResp
	(*SetCardExceptionStatusReq)(nil),          // 157: customer.SetCardExceptionStatusReq
	nil,                                        // 158: customer.StatementElem.ChargeDetailEntry
	nil,                                        // 159: customer.StatementElem.ConsumeDetailEntry
	(*common.PageReq)(nil),                     // 160: common.PageReq
	(*common.PageResp)(nil),                    // 161: common.PageResp
	(common.PayMode)(0),                        // 162: common.PayMode
	(common.PayChannel)(0),                     // 163: common.PayChannel
	(*common.SearchFilter)(nil),                // 164: common.SearchFilter
	(common.RefundMode)(0),                     // 165: common.RefundMode
	(common.CustomerRegChannel)(0),             // 166: common.CustomerRegChannel
}
var file_customer_proto_depIdxs = []int32{
	160, // 0: customer.VINListByOperatorReq.pagereq:type_name -> common.PageReq
	160, // 1: customer.VINListByCustomerReq.pagereq:type_name -> common.PageReq
	80,  // 2: customer.VINListByCustomerReq.customer:type_name -> customer.CustomerReq
	160, // 3: customer.VINListByGroupReq.pagereq:type_name -> common.PageReq
	161, // 4: customer.ListVINsResp.pageresp:type_name -> common.PageResp
	26,  // 5: customer.ListVINsResp.vin_infos:type_name -> customer.VINInfo
	20,  // 6: customer.VINAddReq.vin_req:type_name -> customer.VINReq
	20,  // 7: customer.VINEditReq.vin_req:type_name -> customer.VINReq
	20,  // 8: customer.VINBindReq.vin_req:type_name -> customer.VINReq
	20,  // 9: customer.SetVINExceptionStatusReq.vin_req:type_name -> customer.VINReq
	6,   // 10: customer.SetVINExceptionStatusReq.Pos:type_name -> customer.AccountExceptionStatusBit
	20,  // 11: customer.VINChargeReq.vin_req:type_name -> customer.VINReq
	162, // 12: customer.VINChargeReq.pay_mode:type_name -> common.PayMode
	163, // 13: customer.VINChargeReq.pay_channel:type_name -> common.PayChannel
	3,   // 14: customer.VINChargeReq.op_balance_type:type_name -> customer.BalanceType
	20,  // 15: customer.VINWithholdReq.vin_req:type_name -> customer.VINReq
	3,   // 16: customer.VINWithholdReq.op_balance_type:type_name -> customer.BalanceType
	128, // 17: customer.VINInfo.customer:type_name -> customer.CustomerInfo
	34,  // 18: customer.VINInfo.group:type_name -> customer.Group
	0,   // 19: customer.AddGroupReq.group_type:type_name -> customer.GroupType
	0,   // 20: customer.EditGroupReq.group_type:type_name -> customer.GroupType
	160, // 21: customer.ListGroupsReq.pagereq:type_name -> common.PageReq
	161, // 22: customer.ListGroupsResp.pageresp:type_name -> common.PageResp
	34,  // 23: customer.ListGroupsResp.groups:type_name -> customer.Group
	34,  // 24: customer.GetGroupInfoResp.groups:type_name -> customer.Group
	0,   // 25: customer.Group.group_type:type_name -> customer.GroupType
	36,  // 26: customer.GroupMember.bus_extra:type_name -> customer.GroupMemberBusExtra
	1,   // 27: customer.GroupMember.member_resource_type:type_name -> customer.GroupMemberResourceType
	128, // 28: customer.GroupMember.customer_info:type_name -> customer.CustomerInfo
	146, // 29: customer.GroupMember.card_info:type_name -> customer.CardInfo
	26,  // 30: customer.GroupMember.vin_info:type_name -> customer.VINInfo
	20,  // 31: customer.GetMemberInfoByVINReq.vin_req:type_name -> customer.VINReq
	78,  // 32: customer.GetMemberInfoByCardReq.card_req:type_name -> customer.CardReq
	41,  // 33: customer.AddMemeberReq.member_req:type_name -> customer.GroupMemberReq
	36,  // 34: customer.AddMemeberReq.bus_extra:type_name -> customer.GroupMemberBusExtra
	1,   // 35: customer.AddMemeberReq.member_resource_type:type_name -> customer.GroupMemberResourceType
	80,  // 36: customer.AddMemeberReq.custoemr_req:type_name -> customer.CustomerReq
	78,  // 37: customer.AddMemeberReq.card_req:type_name -> customer.CardReq
	20,  // 38: customer.AddMemeberReq.vin_req:type_name -> customer.VINReq
	41,  // 39: customer.EditMemeberReq.member_req:type_name -> customer.GroupMemberReq
	36,  // 40: customer.EditMemeberReq.bus_extra:type_name -> customer.GroupMemberBusExtra
	160, // 41: customer.MemebersReq.pagereq:type_name -> common.PageReq
	1,   // 42: customer.MemebersReq.member_resource_type:type_name -> customer.GroupMemberResourceType
	161, // 43: customer.MemebersResp.pageresp:type_name -> common.PageResp
	35,  // 44: customer.MemebersResp.members:type_name -> customer.GroupMember
	162, // 45: customer.GroupChargeReq.pay_mode:type_name -> common.PayMode
	163, // 46: customer.GroupChargeReq.pay_channel:type_name -> common.PayChannel
	80,  // 47: customer.BindMerchantReq.customer:type_name -> customer.CustomerReq
	80,  // 48: customer.CustomerChargeReq.customer:type_name -> customer.CustomerReq
	3,   // 49: customer.CustomerChargeReq.op_balance_type:type_name -> customer.BalanceType
	80,  // 50: customer.CustomerWithholdReq.customer:type_name -> customer.CustomerReq
	3,   // 51: customer.CustomerWithholdReq.op_balance_type:type_name -> customer.BalanceType
	160, // 52: customer.GetActivityByOperatorIDReq.pagereq:type_name -> common.PageReq
	11,  // 53: customer.GetActivityByOperatorIDReq.type:type_name -> customer.ActivityType
	12,  // 54: customer.GetActivityByOperatorIDReq.status:type_name -> customer.ActivityStatus
	161, // 55: customer.GetActivityByOperatorIDResp.pageresp:type_name -> common.PageResp
	64,  // 56: customer.GetActivityByOperatorIDResp.activitys:type_name -> customer.Activity
	11,  // 57: customer.SetActivityReq.type:type_name -> customer.ActivityType
	65,  // 58: customer.SetActivityReq.ub_charge_gifts_rule:type_name -> customer.ActivityUserBalanceChargeGiftsRule
	11,  // 59: customer.Activity.type:type_name -> customer.ActivityType
	12,  // 60: customer.Activity.status:type_name -> customer.ActivityStatus
	65,  // 61: customer.Activity.ub_charge_gifts_rule:type_name -> customer.ActivityUserBalanceChargeGiftsRule
	160, // 62: customer.TransactionQueryByCustomerReq.pagereq:type_name -> common.PageReq
	80,  // 63: customer.TransactionQueryByCustomerReq.customer:type_name -> customer.CustomerReq
	164, // 64: customer.TransactionQueryByCustomerReq.search_filter:type_name -> common.SearchFilter
	160, // 65: customer.TransactionQueryByOperatorReq.pagereq:type_name -> common.PageReq
	164, // 66: customer.TransactionQueryByOperatorReq.search_filter:type_name -> common.SearchFilter
	160, // 67: customer.TransactionQueryByStationReq.pagereq:type_name -> common.PageReq
	164, // 68: customer.TransactionQueryByStationReq.search_filter:type_name -> common.SearchFilter
	161, // 69: customer.TransactionsResp.pageresp:type_name -> common.PageResp
	72,  // 70: customer.TransactionsResp.transactions:type_name -> customer.Transaction
	8,   // 71: customer.Transaction.flag_type:type_name -> customer.TransactionFlag
	162, // 72: customer.Transaction.pay_mode:type_name -> common.PayMode
	163, // 73: customer.Transaction.pay_channel:type_name -> common.PayChannel
	9,   // 74: customer.Transaction.transact_type:type_name -> customer.TransactionType
	7,   // 75: customer.Transaction.state:type_name -> customer.TransactionStatus
	10,  // 76: customer.Transaction.notify_status:type_name -> customer.TransactionNotifyStatus
	165, // 77: customer.Transaction.refund_mode:type_name -> common.RefundMode
	80,  // 78: customer.BackPayReq.customer:type_name -> customer.CustomerReq
	162, // 79: customer.BackPayReq.first_pay_mode:type_name -> common.PayMode
	163, // 80: customer.BackPayReq.first_pay_channel:type_name -> common.PayChannel
	162, // 81: customer.BackPayReq.pay_mode:type_name -> common.PayMode
	163, // 82: customer.BackPayReq.pay_channel:type_name -> common.PayChannel
	80,  // 83: customer.StatementReq.customer:type_name -> customer.CustomerReq
	164, // 84: customer.StatementReq.search_filter:type_name -> common.SearchFilter
	77,  // 85: customer.StatementResp.statements:type_name -> customer.StatementElem
	8,   // 86: customer.StatementElem.flag_type:type_name -> customer.TransactionFlag
	158, // 87: customer.StatementElem.charge_detail:type_name -> customer.StatementElem.ChargeDetailEntry
	159, // 88: customer.StatementElem.consume_detail:type_name -> customer.StatementElem.ConsumeDetailEntry
	4,   // 89: customer.CardReq.type:type_name -> customer.CardType
	78,  // 90: customer.CardAddReq.card_req:type_name -> customer.CardReq
	128, // 91: customer.SyncReq.customer:type_name -> customer.CustomerInfo
	128, // 92: customer.SyncResp.customer:type_name -> customer.CustomerInfo
	80,  // 93: customer.CustomerInfoReq.customer:type_name -> customer.CustomerReq
	128, // 94: customer.CustomerInfoResp.customer:type_name -> customer.CustomerInfo
	80,  // 95: customer.CustomerChargeApplyReq.customer:type_name -> customer.CustomerReq
	162, // 96: customer.CustomerChargeApplyReq.pay_mode:type_name -> common.PayMode
	163, // 97: customer.CustomerChargeApplyReq.pay_channel:type_name -> common.PayChannel
	128, // 98: customer.CustomerChargeCallbackResp.customer:type_name -> customer.CustomerInfo
	72,  // 99: customer.CustomerChargeCallbackResp.transaction:type_name -> customer.Transaction
	80,  // 100: customer.CustomerPayReq.customer:type_name -> customer.CustomerReq
	7,   // 101: customer.CustomerPayResp.status:type_name -> customer.TransactionStatus
	7,   // 102: customer.CustomerRefundResp.status:type_name -> customer.TransactionStatus
	7,   // 103: customer.TransactionSetStateReq.status:type_name -> customer.TransactionStatus
	80,  // 104: customer.TransactionNotifyReq.customer:type_name -> customer.CustomerReq
	9,   // 105: customer.TransactionNotifyReq.type:type_name -> customer.TransactionType
	7,   // 106: customer.TransactionNotifyReq.status:type_name -> customer.TransactionStatus
	162, // 107: customer.TransactionNotifyReq.pay_mode:type_name -> common.PayMode
	163, // 108: customer.TransactionNotifyReq.pay_channel:type_name -> common.PayChannel
	165, // 109: customer.TransactionNotifyReq.refund_mode:type_name -> common.RefundMode
	128, // 110: customer.ModifyReq.customer:type_name -> customer.CustomerInfo
	128, // 111: customer.ModifyResp.customer:type_name -> customer.CustomerInfo
	80,  // 112: customer.BindVINReq.customer:type_name -> customer.CustomerReq
	80,  // 113: customer.UnbindVINReq.customer:type_name -> customer.CustomerReq
	78,  // 114: customer.CardInfoReq.card:type_name -> customer.CardReq
	146, // 115: customer.CardInfoResp.card_info:type_name -> customer.CardInfo
	80,  // 116: customer.BindCardReq.customer:type_name -> customer.CustomerReq
	78,  // 117: customer.BindCardReq.card:type_name -> customer.CardReq
	146, // 118: customer.BindCardResp.card_info:type_name -> customer.CardInfo
	80,  // 119: customer.UnbindCardReq.customer:type_name -> customer.CustomerReq
	78,  // 120: customer.UnbindCardReq.card:type_name -> customer.CardReq
	80,  // 121: customer.ReportLostCardReq.customer:type_name -> customer.CustomerReq
	78,  // 122: customer.ReportLostCardReq.card:type_name -> customer.CardReq
	160, // 123: customer.ListsReq.pagereq:type_name -> common.PageReq
	161, // 124: customer.ListsResp.pageresp:type_name -> common.PageResp
	128, // 125: customer.ListsResp.user_infos:type_name -> customer.CustomerInfo
	128, // 126: customer.ListsByIDsResp.user_infos:type_name -> customer.CustomerInfo
	128, // 127: customer.ListsByPhoneResp.user_infos:type_name -> customer.CustomerInfo
	128, // 128: customer.ListsByLicensePlateNumberResp.user_infos:type_name -> customer.CustomerInfo
	160, // 129: customer.ListsByOperatorReq.pagereq:type_name -> common.PageReq
	161, // 130: customer.ListsByOperatorResp.pageresp:type_name -> common.PageResp
	128, // 131: customer.ListsByOperatorResp.user_infos:type_name -> customer.CustomerInfo
	80,  // 132: customer.SetCustomerStatusReq.customer:type_name -> customer.CustomerReq
	5,   // 133: customer.SetCustomerStatusReq.status:type_name -> customer.CustomerStatus
	128, // 134: customer.SetCustomerStatusResp.customer_info:type_name -> customer.CustomerInfo
	80,  // 135: customer.GetCardsReq.customer:type_name -> customer.CustomerReq
	146, // 136: customer.GetCardsResp.card_infos:type_name -> customer.CardInfo
	80,  // 137: customer.GetInfoAndCardsReq.customer:type_name -> customer.CustomerReq
	128, // 138: customer.GetInfoAndCardsResp.customer_info:type_name -> customer.CustomerInfo
	146, // 139: customer.GetInfoAndCardsResp.cards:type_name -> customer.CardInfo
	2,   // 140: customer.CustomerInfo.sex:type_name -> customer.Sex
	5,   // 141: customer.CustomerInfo.status:type_name -> customer.CustomerStatus
	34,  // 142: customer.CustomerInfo.group_info:type_name -> customer.Group
	166, // 143: customer.CustomerInfo.reg_channel:type_name -> common.CustomerRegChannel
	78,  // 144: customer.CardEditReq.card:type_name -> customer.CardReq
	160, // 145: customer.GetChargeDelayConfigReq.pagereq:type_name -> common.PageReq
	161, // 146: customer.GetChargeDelayConfigResp.pageresp:type_name -> common.PageResp
	144, // 147: customer.GetChargeDelayConfigResp.card_delay_expired_configs:type_name -> customer.CardDelayExpiredConfig
	144, // 148: customer.SetChargeDelayConfigReq.card_delay_expired_config:type_name -> customer.CardDelayExpiredConfig
	160, // 149: customer.GetRefundDelayConfigReq.pagereq:type_name -> common.PageReq
	161, // 150: customer.GetRefundDelayConfigResp.pageresp:type_name -> common.PageResp
	144, // 151: customer.GetRefundDelayConfigResp.card_delay_expired_configs:type_name -> customer.CardDelayExpiredConfig
	144, // 152: customer.SetRefundDelayConfigReq.card_delay_expired_config:type_name -> customer.CardDelayExpiredConfig
	160, // 153: customer.CardListReq.pagereq:type_name -> common.PageReq
	160, // 154: customer.CardsByCustomerReq.pagereq:type_name -> common.PageReq
	80,  // 155: customer.CardsByCustomerReq.customer:type_name -> customer.CustomerReq
	160, // 156: customer.CardsByGroupReq.pagereq:type_name -> common.PageReq
	161, // 157: customer.CardListResp.pageresp:type_name -> common.PageResp
	146, // 158: customer.CardListResp.cards:type_name -> customer.CardInfo
	78,  // 159: customer.CardBindReq.card_req:type_name -> customer.CardReq
	128, // 160: customer.CardInfo.customer:type_name -> customer.CustomerInfo
	34,  // 161: customer.CardInfo.group_info:type_name -> customer.Group
	80,  // 162: customer.CardChargeApplyReq.customer:type_name -> customer.CustomerReq
	78,  // 163: customer.CardChargeApplyReq.card:type_name -> customer.CardReq
	162, // 164: customer.CardChargeApplyReq.pay_mode:type_name -> common.PayMode
	163, // 165: customer.CardChargeApplyReq.pay_channel:type_name -> common.PayChannel
	146, // 166: customer.CardChargeCallbackResp.card_info:type_name -> customer.CardInfo
	72,  // 167: customer.CardChargeCallbackResp.transaction:type_name -> customer.Transaction
	146, // 168: customer.CardChargeResp.card_info:type_name -> customer.CardInfo
	78,  // 169: customer.CardChargeReq.card:type_name -> customer.CardReq
	162, // 170: customer.CardChargeReq.pay_mode:type_name -> common.PayMode
	163, // 171: customer.CardChargeReq.pay_channel:type_name -> common.PayChannel
	3,   // 172: customer.CardChargeReq.op_balance_type:type_name -> customer.BalanceType
	78,  // 173: customer.CardWithholdReq.card:type_name -> customer.CardReq
	3,   // 174: customer.CardWithholdReq.op_balance_type:type_name -> customer.BalanceType
	146, // 175: customer.CardWithholdResp.card_info:type_name -> customer.CardInfo
	80,  // 176: customer.RefundToUserBalanceReq.customer:type_name -> customer.CustomerReq
	78,  // 177: customer.RefundToUserBalanceReq.card:type_name -> customer.CardReq
	78,  // 178: customer.SetCardExceptionStatusReq.card:type_name -> customer.CardReq
	6,   // 179: customer.SetCardExceptionStatusReq.Pos:type_name -> customer.AccountExceptionStatusBit
	81,  // 180: customer.UserService.Sync:input_type -> customer.SyncReq
	83,  // 181: customer.UserService.Info:input_type -> customer.CustomerInfoReq
	53,  // 182: customer.UserService.Charge:input_type -> customer.CustomerChargeReq
	55,  // 183: customer.UserService.Withhold:input_type -> customer.CustomerWithholdReq
	85,  // 184: customer.UserService.ChargeApply:input_type -> customer.CustomerChargeApplyReq
	87,  // 185: customer.UserService.ChargeCallback:input_type -> customer.CustomerChargeCallbackReq
	89,  // 186: customer.UserService.Pay:input_type -> customer.CustomerPayReq
	90,  // 187: customer.UserService.QueryPay:input_type -> customer.CustomerQueryPayReq
	92,  // 188: customer.UserService.RefundToBalance:input_type -> customer.CustomerRefundReq
	112, // 189: customer.UserService.Lists:input_type -> customer.ListsReq
	120, // 190: customer.UserService.ListsByOperator:input_type -> customer.ListsByOperatorReq
	114, // 191: customer.UserService.ListsByIDs:input_type -> customer.ListsByIDsReq
	116, // 192: customer.UserService.ListsByPhone:input_type -> customer.ListsByPhoneReq
	118, // 193: customer.UserService.ListsByLicensePlateNumber:input_type -> customer.ListsByLicensePlateNumberReq
	122, // 194: customer.UserService.SetStatus:input_type -> customer.SetCustomerStatusReq
	50,  // 195: customer.UserService.BindMerchant:input_type -> customer.BindMerchantReq
	15,  // 196: customer.VINService.ListByOperator:input_type -> customer.VINListByOperatorReq
	16,  // 197: customer.VINService.ListByCustomer:input_type -> customer.VINListByCustomerReq
	17,  // 198: customer.VINService.ListByGroup:input_type -> customer.VINListByGroupReq
	20,  // 199: customer.VINService.Info:input_type -> customer.VINReq
	19,  // 200: customer.VINService.Add:input_type -> customer.VINAddReq
	21,  // 201: customer.VINService.Edit:input_type -> customer.VINEditReq
	22,  // 202: customer.VINService.Bind:input_type -> customer.VINBindReq
	20,  // 203: customer.VINService.Unbind:input_type -> customer.VINReq
	23,  // 204: customer.VINService.SetExceptionStatus:input_type -> customer.SetVINExceptionStatusReq
	24,  // 205: customer.VINService.Charge:input_type -> customer.VINChargeReq
	25,  // 206: customer.VINService.Withhold:input_type -> customer.VINWithholdReq
	140, // 207: customer.CardService.List:input_type -> customer.CardListReq
	141, // 208: customer.CardService.ListByCustomer:input_type -> customer.CardsByCustomerReq
	142, // 209: customer.CardService.ListByGroup:input_type -> customer.CardsByGroupReq
	145, // 210: customer.CardService.Bind:input_type -> customer.CardBindReq
	78,  // 211: customer.CardService.Unbind:input_type -> customer.CardReq
	78,  // 212: customer.CardService.ReportLost:input_type -> customer.CardReq
	78,  // 213: customer.CardService.Info:input_type -> customer.CardReq
	79,  // 214: customer.CardService.Add:input_type -> customer.CardAddReq
	129, // 215: customer.CardService.Edit:input_type -> customer.CardEditReq
	78,  // 216: customer.CardService.ImportCard:input_type -> customer.CardReq
	152, // 217: customer.CardService.Charge:input_type -> customer.CardChargeReq
	153, // 218: customer.CardService.Withhold:input_type -> customer.CardWithholdReq
	155, // 219: customer.CardService.RefundToUserBalance:input_type -> customer.RefundToUserBalanceReq
	147, // 220: customer.CardService.ChargeApply:input_type -> customer.CardChargeApplyReq
	149, // 221: customer.CardService.ChargeCallback:input_type -> customer.CardChargeCallbackReq
	157, // 222: customer.CardService.SetCardExceptionStatus:input_type -> customer.SetCardExceptionStatusReq
	130, // 223: customer.CardService.GetChargeDelayConfig:input_type -> customer.GetChargeDelayConfigReq
	132, // 224: customer.CardService.SetChargeDelayConfig:input_type -> customer.SetChargeDelayConfigReq
	134, // 225: customer.CardService.DelChargeDelayConfig:input_type -> customer.DelChargeDelayConfigReq
	136, // 226: customer.CardService.GetRefundDelayConfig:input_type -> customer.GetRefundDelayConfigReq
	138, // 227: customer.CardService.SetRefundDelayConfig:input_type -> customer.SetRefundDelayConfigReq
	96,  // 228: customer.TransactionService.Notify:input_type -> customer.TransactionNotifyReq
	66,  // 229: customer.TransactionService.Refresh:input_type -> customer.TransactionRefreshReq
	94,  // 230: customer.TransactionService.Push:input_type -> customer.TransactionPushReq
	95,  // 231: customer.TransactionService.SetState:input_type -> customer.TransactionSetStateReq
	67,  // 232: customer.TransactionService.QueryByCustomer:input_type -> customer.TransactionQueryByCustomerReq
	68,  // 233: customer.TransactionService.QueryByOperator:input_type -> customer.TransactionQueryByOperatorReq
	69,  // 234: customer.TransactionService.QueryByStation:input_type -> customer.TransactionQueryByStationReq
	70,  // 235: customer.TransactionService.QueryByOrderID:input_type -> customer.TransactionQueryByOrderIDReq
	75,  // 236: customer.TransactionService.Statement:input_type -> customer.StatementReq
	73,  // 237: customer.TransactionService.BackPay:input_type -> customer.BackPayReq
	62,  // 238: customer.ActivityService.Set:input_type -> customer.SetActivityReq
	57,  // 239: customer.ActivityService.SetActivityOpen:input_type -> customer.SetActivityOpenReq
	59,  // 240: customer.ActivityService.GetByID:input_type -> customer.GetActivityByIDReq
	60,  // 241: customer.ActivityService.GetByOperatorID:input_type -> customer.GetActivityByOperatorIDReq
	27,  // 242: customer.GroupServices.AddGroup:input_type -> customer.AddGroupReq
	28,  // 243: customer.GroupServices.EditGroup:input_type -> customer.EditGroupReq
	29,  // 244: customer.GroupServices.ListGroups:input_type -> customer.ListGroupsReq
	31,  // 245: customer.GroupServices.SetGroupState:input_type -> customer.SetGroupStateReq
	32,  // 246: customer.GroupServices.GetGroupInfo:input_type -> customer.GroupIDReq
	42,  // 247: customer.GroupServices.AddMemeber:input_type -> customer.AddMemeberReq
	43,  // 248: customer.GroupServices.EditMemeber:input_type -> customer.EditMemeberReq
	45,  // 249: customer.GroupServices.DelMemeber:input_type -> customer.DelMemeberReq
	47,  // 250: customer.GroupServices.Memebers:input_type -> customer.MemebersReq
	44,  // 251: customer.GroupServices.SetMemeberState:input_type -> customer.SetMemeberStateReq
	37,  // 252: customer.GroupServices.GetMemberInfoByCustomer:input_type -> customer.GetMemberInfoByCustomerReq
	38,  // 253: customer.GroupServices.GetMemberInfoByID:input_type -> customer.GetMemberInfoByIDReq
	39,  // 254: customer.GroupServices.GetMemberInfoByVIN:input_type -> customer.GetMemberInfoByVINReq
	40,  // 255: customer.GroupServices.GetMemberInfoByCard:input_type -> customer.GetMemberInfoByCardReq
	49,  // 256: customer.GroupServices.Charge:input_type -> customer.GroupChargeReq
	82,  // 257: customer.UserService.Sync:output_type -> customer.SyncResp
	84,  // 258: customer.UserService.Info:output_type -> customer.CustomerInfoResp
	54,  // 259: customer.UserService.Charge:output_type -> customer.CustomerChargeResp
	56,  // 260: customer.UserService.Withhold:output_type -> customer.CustomerWithholdResp
	86,  // 261: customer.UserService.ChargeApply:output_type -> customer.CustomerChargeApplyResp
	88,  // 262: customer.UserService.ChargeCallback:output_type -> customer.CustomerChargeCallbackResp
	91,  // 263: customer.UserService.Pay:output_type -> customer.CustomerPayResp
	91,  // 264: customer.UserService.QueryPay:output_type -> customer.CustomerPayResp
	93,  // 265: customer.UserService.RefundToBalance:output_type -> customer.CustomerRefundResp
	113, // 266: customer.UserService.Lists:output_type -> customer.ListsResp
	121, // 267: customer.UserService.ListsByOperator:output_type -> customer.ListsByOperatorResp
	115, // 268: customer.UserService.ListsByIDs:output_type -> customer.ListsByIDsResp
	117, // 269: customer.UserService.ListsByPhone:output_type -> customer.ListsByPhoneResp
	119, // 270: customer.UserService.ListsByLicensePlateNumber:output_type -> customer.ListsByLicensePlateNumberResp
	123, // 271: customer.UserService.SetStatus:output_type -> customer.SetCustomerStatusResp
	51,  // 272: customer.UserService.BindMerchant:output_type -> customer.BindMerchantResp
	18,  // 273: customer.VINService.ListByOperator:output_type -> customer.ListVINsResp
	18,  // 274: customer.VINService.ListByCustomer:output_type -> customer.ListVINsResp
	18,  // 275: customer.VINService.ListByGroup:output_type -> customer.ListVINsResp
	26,  // 276: customer.VINService.Info:output_type -> customer.VINInfo
	26,  // 277: customer.VINService.Add:output_type -> customer.VINInfo
	26,  // 278: customer.VINService.Edit:output_type -> customer.VINInfo
	26,  // 279: customer.VINService.Bind:output_type -> customer.VINInfo
	26,  // 280: customer.VINService.Unbind:output_type -> customer.VINInfo
	26,  // 281: customer.VINService.SetExceptionStatus:output_type -> customer.VINInfo
	26,  // 282: customer.VINService.Charge:output_type -> customer.VINInfo
	26,  // 283: customer.VINService.Withhold:output_type -> customer.VINInfo
	143, // 284: customer.CardService.List:output_type -> customer.CardListResp
	143, // 285: customer.CardService.ListByCustomer:output_type -> customer.CardListResp
	143, // 286: customer.CardService.ListByGroup:output_type -> customer.CardListResp
	146, // 287: customer.CardService.Bind:output_type -> customer.CardInfo
	146, // 288: customer.CardService.Unbind:output_type -> customer.CardInfo
	146, // 289: customer.CardService.ReportLost:output_type -> customer.CardInfo
	146, // 290: customer.CardService.Info:output_type -> customer.CardInfo
	146, // 291: customer.CardService.Add:output_type -> customer.CardInfo
	146, // 292: customer.CardService.Edit:output_type -> customer.CardInfo
	52,  // 293: customer.CardService.ImportCard:output_type -> customer.ImportCardResp
	151, // 294: customer.CardService.Charge:output_type -> customer.CardChargeResp
	154, // 295: customer.CardService.Withhold:output_type -> customer.CardWithholdResp
	156, // 296: customer.CardService.RefundToUserBalance:output_type -> customer.RefundToUserBalanceResp
	148, // 297: customer.CardService.ChargeApply:output_type -> customer.CardChargeApplyResp
	150, // 298: customer.CardService.ChargeCallback:output_type -> customer.CardChargeCallbackResp
	146, // 299: customer.CardService.SetCardExceptionStatus:output_type -> customer.CardInfo
	131, // 300: customer.CardService.GetChargeDelayConfig:output_type -> customer.GetChargeDelayConfigResp
	133, // 301: customer.CardService.SetChargeDelayConfig:output_type -> customer.SetChargeDelayConfigResp
	135, // 302: customer.CardService.DelChargeDelayConfig:output_type -> customer.DelChargeDelayConfigResp
	137, // 303: customer.CardService.GetRefundDelayConfig:output_type -> customer.GetRefundDelayConfigResp
	139, // 304: customer.CardService.SetRefundDelayConfig:output_type -> customer.SetRefundDelayConfigResp
	97,  // 305: customer.TransactionService.Notify:output_type -> customer.TransactionNotifyResp
	72,  // 306: customer.TransactionService.Refresh:output_type -> customer.Transaction
	72,  // 307: customer.TransactionService.Push:output_type -> customer.Transaction
	72,  // 308: customer.TransactionService.SetState:output_type -> customer.Transaction
	71,  // 309: customer.TransactionService.QueryByCustomer:output_type -> customer.TransactionsResp
	71,  // 310: customer.TransactionService.QueryByOperator:output_type -> customer.TransactionsResp
	71,  // 311: customer.TransactionService.QueryByStation:output_type -> customer.TransactionsResp
	71,  // 312: customer.TransactionService.QueryByOrderID:output_type -> customer.TransactionsResp
	76,  // 313: customer.TransactionService.Statement:output_type -> customer.StatementResp
	74,  // 314: customer.TransactionService.BackPay:output_type -> customer.BackPayResp
	63,  // 315: customer.ActivityService.Set:output_type -> customer.SetActivityResp
	58,  // 316: customer.ActivityService.SetActivityOpen:output_type -> customer.SetActivityOpenResp
	64,  // 317: customer.ActivityService.GetByID:output_type -> customer.Activity
	61,  // 318: customer.ActivityService.GetByOperatorID:output_type -> customer.GetActivityByOperatorIDResp
	34,  // 319: customer.GroupServices.AddGroup:output_type -> customer.Group
	34,  // 320: customer.GroupServices.EditGroup:output_type -> customer.Group
	30,  // 321: customer.GroupServices.ListGroups:output_type -> customer.ListGroupsResp
	34,  // 322: customer.GroupServices.SetGroupState:output_type -> customer.Group
	33,  // 323: customer.GroupServices.GetGroupInfo:output_type -> customer.GetGroupInfoResp
	35,  // 324: customer.GroupServices.AddMemeber:output_type -> customer.GroupMember
	35,  // 325: customer.GroupServices.EditMemeber:output_type -> customer.GroupMember
	46,  // 326: customer.GroupServices.DelMemeber:output_type -> customer.DelMemeberResp
	48,  // 327: customer.GroupServices.Memebers:output_type -> customer.MemebersResp
	35,  // 328: customer.GroupServices.SetMemeberState:output_type -> customer.GroupMember
	35,  // 329: customer.GroupServices.GetMemberInfoByCustomer:output_type -> customer.GroupMember
	35,  // 330: customer.GroupServices.GetMemberInfoByID:output_type -> customer.GroupMember
	35,  // 331: customer.GroupServices.GetMemberInfoByVIN:output_type -> customer.GroupMember
	35,  // 332: customer.GroupServices.GetMemberInfoByCard:output_type -> customer.GroupMember
	34,  // 333: customer.GroupServices.Charge:output_type -> customer.Group
	257, // [257:334] is the sub-list for method output_type
	180, // [180:257] is the sub-list for method input_type
	180, // [180:180] is the sub-list for extension type_name
	180, // [180:180] is the sub-list for extension extendee
	0,   // [0:180] is the sub-list for field type_name
}

func init() { file_customer_proto_init() }
func file_customer_proto_init() {
	if File_customer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_customer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanCacheResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINListByOperatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINListByCustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINListByGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVINsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVINExceptionStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINChargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINWithholdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VINInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberBusExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberInfoByCustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberInfoByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberInfoByVINReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemberInfoByCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemeberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMemeberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMemeberStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMemeberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelMemeberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemebersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemebersResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindMerchantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindMerchantResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerChargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerChargeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerWithholdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerWithholdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivityOpenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivityOpenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityByOperatorIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityByOperatorIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActivityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityUserBalanceChargeGiftsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRefreshReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionQueryByCustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionQueryByOperatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionQueryByStationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionQueryByOrderIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerChargeApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerChargeApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerChargeCallbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerChargeCallbackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerQueryPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerRefundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerRefundResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPushReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSetStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionNotifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionNotifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindVINReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindVINResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindVINReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindVINResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportLostCardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportLostCardResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByIDsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByPhoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByPhoneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByLicensePlateNumberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByLicensePlateNumberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByOperatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByOperatorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCustomerStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCustomerStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCardsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoAndCardsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoAndCardsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChargeDelayConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChargeDelayConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChargeDelayConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChargeDelayConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChargeDelayConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChargeDelayConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRefundDelayConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRefundDelayConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRefundDelayConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRefundDelayConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardsByCustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardsByGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardDelayExpiredConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardChargeApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardChargeApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardChargeCallbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardChargeCallbackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardChargeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardChargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardWithholdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardWithholdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundToUserBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundToUserBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCardExceptionStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_customer_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*GroupMember_CustomerInfo)(nil),
		(*GroupMember_CardInfo)(nil),
		(*GroupMember_VinInfo)(nil),
	}
	file_customer_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*AddMemeberReq_CustoemrReq)(nil),
		(*AddMemeberReq_CardReq)(nil),
		(*AddMemeberReq_VinReq)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_customer_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   147,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_customer_proto_goTypes,
		DependencyIndexes: file_customer_proto_depIdxs,
		EnumInfos:         file_customer_proto_enumTypes,
		MessageInfos:      file_customer_proto_msgTypes,
	}.Build()
	File_customer_proto = out.File
	file_customer_proto_rawDesc = nil
	file_customer_proto_goTypes = nil
	file_customer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// 同步用户信息，登录时候触发
	Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*SyncResp, error)
	// 用户基本信息
	Info(ctx context.Context, in *CustomerInfoReq, opts ...grpc.CallOption) (*CustomerInfoResp, error)
	// 后台直接充值
	Charge(ctx context.Context, in *CustomerChargeReq, opts ...grpc.CallOption) (*CustomerChargeResp, error)
	// 后台直接扣款
	Withhold(ctx context.Context, in *CustomerWithholdReq, opts ...grpc.CallOption) (*CustomerWithholdResp, error)
	// 用户余额充值申请
	ChargeApply(ctx context.Context, in *CustomerChargeApplyReq, opts ...grpc.CallOption) (*CustomerChargeApplyResp, error)
	// 用户余额充值, 微信/支付宝支付成功后回调
	ChargeCallback(ctx context.Context, in *CustomerChargeCallbackReq, opts ...grpc.CallOption) (*CustomerChargeCallbackResp, error)
	// 用户余额支付
	Pay(ctx context.Context, in *CustomerPayReq, opts ...grpc.CallOption) (*CustomerPayResp, error)
	// 查询余额支付
	QueryPay(ctx context.Context, in *CustomerQueryPayReq, opts ...grpc.CallOption) (*CustomerPayResp, error)
	// 退到用户余额
	RefundToBalance(ctx context.Context, in *CustomerRefundReq, opts ...grpc.CallOption) (*CustomerRefundResp, error)
	// 获取全部客户列表
	Lists(ctx context.Context, in *ListsReq, opts ...grpc.CallOption) (*ListsResp, error)
	// 获取运营商客户列表
	ListsByOperator(ctx context.Context, in *ListsByOperatorReq, opts ...grpc.CallOption) (*ListsByOperatorResp, error)
	// 根据ID获取客户列表
	ListsByIDs(ctx context.Context, in *ListsByIDsReq, opts ...grpc.CallOption) (*ListsByIDsResp, error)
	// 根据电话获取客户列表
	ListsByPhone(ctx context.Context, in *ListsByPhoneReq, opts ...grpc.CallOption) (*ListsByPhoneResp, error)
	// 根据车牌号获取客户列表
	ListsByLicensePlateNumber(ctx context.Context, in *ListsByLicensePlateNumberReq, opts ...grpc.CallOption) (*ListsByLicensePlateNumberResp, error)
	// 设置用户状态
	SetStatus(ctx context.Context, in *SetCustomerStatusReq, opts ...grpc.CallOption) (*SetCustomerStatusResp, error)
	// 绑定桩主
	BindMerchant(ctx context.Context, in *BindMerchantReq, opts ...grpc.CallOption) (*BindMerchantResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (*SyncResp, error) {
	out := new(SyncResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Info(ctx context.Context, in *CustomerInfoReq, opts ...grpc.CallOption) (*CustomerInfoResp, error) {
	out := new(CustomerInfoResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Charge(ctx context.Context, in *CustomerChargeReq, opts ...grpc.CallOption) (*CustomerChargeResp, error) {
	out := new(CustomerChargeResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/Charge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Withhold(ctx context.Context, in *CustomerWithholdReq, opts ...grpc.CallOption) (*CustomerWithholdResp, error) {
	out := new(CustomerWithholdResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/Withhold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChargeApply(ctx context.Context, in *CustomerChargeApplyReq, opts ...grpc.CallOption) (*CustomerChargeApplyResp, error) {
	out := new(CustomerChargeApplyResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/ChargeApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChargeCallback(ctx context.Context, in *CustomerChargeCallbackReq, opts ...grpc.CallOption) (*CustomerChargeCallbackResp, error) {
	out := new(CustomerChargeCallbackResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/ChargeCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Pay(ctx context.Context, in *CustomerPayReq, opts ...grpc.CallOption) (*CustomerPayResp, error) {
	out := new(CustomerPayResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryPay(ctx context.Context, in *CustomerQueryPayReq, opts ...grpc.CallOption) (*CustomerPayResp, error) {
	out := new(CustomerPayResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/QueryPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefundToBalance(ctx context.Context, in *CustomerRefundReq, opts ...grpc.CallOption) (*CustomerRefundResp, error) {
	out := new(CustomerRefundResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/RefundToBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Lists(ctx context.Context, in *ListsReq, opts ...grpc.CallOption) (*ListsResp, error) {
	out := new(ListsResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/Lists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListsByOperator(ctx context.Context, in *ListsByOperatorReq, opts ...grpc.CallOption) (*ListsByOperatorResp, error) {
	out := new(ListsByOperatorResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/ListsByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListsByIDs(ctx context.Context, in *ListsByIDsReq, opts ...grpc.CallOption) (*ListsByIDsResp, error) {
	out := new(ListsByIDsResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/ListsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListsByPhone(ctx context.Context, in *ListsByPhoneReq, opts ...grpc.CallOption) (*ListsByPhoneResp, error) {
	out := new(ListsByPhoneResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/ListsByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListsByLicensePlateNumber(ctx context.Context, in *ListsByLicensePlateNumberReq, opts ...grpc.CallOption) (*ListsByLicensePlateNumberResp, error) {
	out := new(ListsByLicensePlateNumberResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/ListsByLicensePlateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetStatus(ctx context.Context, in *SetCustomerStatusReq, opts ...grpc.CallOption) (*SetCustomerStatusResp, error) {
	out := new(SetCustomerStatusResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BindMerchant(ctx context.Context, in *BindMerchantReq, opts ...grpc.CallOption) (*BindMerchantResp, error) {
	out := new(BindMerchantResp)
	err := c.cc.Invoke(ctx, "/customer.UserService/BindMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// 同步用户信息，登录时候触发
	Sync(context.Context, *SyncReq) (*SyncResp, error)
	// 用户基本信息
	Info(context.Context, *CustomerInfoReq) (*CustomerInfoResp, error)
	// 后台直接充值
	Charge(context.Context, *CustomerChargeReq) (*CustomerChargeResp, error)
	// 后台直接扣款
	Withhold(context.Context, *CustomerWithholdReq) (*CustomerWithholdResp, error)
	// 用户余额充值申请
	ChargeApply(context.Context, *CustomerChargeApplyReq) (*CustomerChargeApplyResp, error)
	// 用户余额充值, 微信/支付宝支付成功后回调
	ChargeCallback(context.Context, *CustomerChargeCallbackReq) (*CustomerChargeCallbackResp, error)
	// 用户余额支付
	Pay(context.Context, *CustomerPayReq) (*CustomerPayResp, error)
	// 查询余额支付
	QueryPay(context.Context, *CustomerQueryPayReq) (*CustomerPayResp, error)
	// 退到用户余额
	RefundToBalance(context.Context, *CustomerRefundReq) (*CustomerRefundResp, error)
	// 获取全部客户列表
	Lists(context.Context, *ListsReq) (*ListsResp, error)
	// 获取运营商客户列表
	ListsByOperator(context.Context, *ListsByOperatorReq) (*ListsByOperatorResp, error)
	// 根据ID获取客户列表
	ListsByIDs(context.Context, *ListsByIDsReq) (*ListsByIDsResp, error)
	// 根据电话获取客户列表
	ListsByPhone(context.Context, *ListsByPhoneReq) (*ListsByPhoneResp, error)
	// 根据车牌号获取客户列表
	ListsByLicensePlateNumber(context.Context, *ListsByLicensePlateNumberReq) (*ListsByLicensePlateNumberResp, error)
	// 设置用户状态
	SetStatus(context.Context, *SetCustomerStatusReq) (*SetCustomerStatusResp, error)
	// 绑定桩主
	BindMerchant(context.Context, *BindMerchantReq) (*BindMerchantResp, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Sync(context.Context, *SyncReq) (*SyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedUserServiceServer) Info(context.Context, *CustomerInfoReq) (*CustomerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedUserServiceServer) Charge(context.Context, *CustomerChargeReq) (*CustomerChargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}
func (*UnimplementedUserServiceServer) Withhold(context.Context, *CustomerWithholdReq) (*CustomerWithholdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withhold not implemented")
}
func (*UnimplementedUserServiceServer) ChargeApply(context.Context, *CustomerChargeApplyReq) (*CustomerChargeApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeApply not implemented")
}
func (*UnimplementedUserServiceServer) ChargeCallback(context.Context, *CustomerChargeCallbackReq) (*CustomerChargeCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeCallback not implemented")
}
func (*UnimplementedUserServiceServer) Pay(context.Context, *CustomerPayReq) (*CustomerPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (*UnimplementedUserServiceServer) QueryPay(context.Context, *CustomerQueryPayReq) (*CustomerPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPay not implemented")
}
func (*UnimplementedUserServiceServer) RefundToBalance(context.Context, *CustomerRefundReq) (*CustomerRefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundToBalance not implemented")
}
func (*UnimplementedUserServiceServer) Lists(context.Context, *ListsReq) (*ListsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lists not implemented")
}
func (*UnimplementedUserServiceServer) ListsByOperator(context.Context, *ListsByOperatorReq) (*ListsByOperatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListsByOperator not implemented")
}
func (*UnimplementedUserServiceServer) ListsByIDs(context.Context, *ListsByIDsReq) (*ListsByIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListsByIDs not implemented")
}
func (*UnimplementedUserServiceServer) ListsByPhone(context.Context, *ListsByPhoneReq) (*ListsByPhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListsByPhone not implemented")
}
func (*UnimplementedUserServiceServer) ListsByLicensePlateNumber(context.Context, *ListsByLicensePlateNumberReq) (*ListsByLicensePlateNumberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListsByLicensePlateNumber not implemented")
}
func (*UnimplementedUserServiceServer) SetStatus(context.Context, *SetCustomerStatusReq) (*SetCustomerStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (*UnimplementedUserServiceServer) BindMerchant(context.Context, *BindMerchantReq) (*BindMerchantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindMerchant not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Sync(ctx, req.(*SyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Info(ctx, req.(*CustomerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Charge(ctx, req.(*CustomerChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Withhold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerWithholdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Withhold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/Withhold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Withhold(ctx, req.(*CustomerWithholdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChargeApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerChargeApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChargeApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/ChargeApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChargeApply(ctx, req.(*CustomerChargeApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChargeCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerChargeCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChargeCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/ChargeCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChargeCallback(ctx, req.(*CustomerChargeCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Pay(ctx, req.(*CustomerPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerQueryPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/QueryPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryPay(ctx, req.(*CustomerQueryPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefundToBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefundToBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/RefundToBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefundToBalance(ctx, req.(*CustomerRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Lists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Lists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/Lists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Lists(ctx, req.(*ListsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListsByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListsByOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListsByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/ListsByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListsByOperator(ctx, req.(*ListsByOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListsByIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/ListsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListsByIDs(ctx, req.(*ListsByIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListsByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListsByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListsByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/ListsByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListsByPhone(ctx, req.(*ListsByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListsByLicensePlateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListsByLicensePlateNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListsByLicensePlateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/ListsByLicensePlateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListsByLicensePlateNumber(ctx, req.(*ListsByLicensePlateNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomerStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetStatus(ctx, req.(*SetCustomerStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BindMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindMerchantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BindMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.UserService/BindMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BindMerchant(ctx, req.(*BindMerchantReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _UserService_Sync_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _UserService_Info_Handler,
		},
		{
			MethodName: "Charge",
			Handler:    _UserService_Charge_Handler,
		},
		{
			MethodName: "Withhold",
			Handler:    _UserService_Withhold_Handler,
		},
		{
			MethodName: "ChargeApply",
			Handler:    _UserService_ChargeApply_Handler,
		},
		{
			MethodName: "ChargeCallback",
			Handler:    _UserService_ChargeCallback_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _UserService_Pay_Handler,
		},
		{
			MethodName: "QueryPay",
			Handler:    _UserService_QueryPay_Handler,
		},
		{
			MethodName: "RefundToBalance",
			Handler:    _UserService_RefundToBalance_Handler,
		},
		{
			MethodName: "Lists",
			Handler:    _UserService_Lists_Handler,
		},
		{
			MethodName: "ListsByOperator",
			Handler:    _UserService_ListsByOperator_Handler,
		},
		{
			MethodName: "ListsByIDs",
			Handler:    _UserService_ListsByIDs_Handler,
		},
		{
			MethodName: "ListsByPhone",
			Handler:    _UserService_ListsByPhone_Handler,
		},
		{
			MethodName: "ListsByLicensePlateNumber",
			Handler:    _UserService_ListsByLicensePlateNumber_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _UserService_SetStatus_Handler,
		},
		{
			MethodName: "BindMerchant",
			Handler:    _UserService_BindMerchant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}

// VINServiceClient is the client API for VINService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VINServiceClient interface {
	ListByOperator(ctx context.Context, in *VINListByOperatorReq, opts ...grpc.CallOption) (*ListVINsResp, error)
	ListByCustomer(ctx context.Context, in *VINListByCustomerReq, opts ...grpc.CallOption) (*ListVINsResp, error)
	ListByGroup(ctx context.Context, in *VINListByGroupReq, opts ...grpc.CallOption) (*ListVINsResp, error)
	// 获取VIN信息
	Info(ctx context.Context, in *VINReq, opts ...grpc.CallOption) (*VINInfo, error)
	// 添加
	Add(ctx context.Context, in *VINAddReq, opts ...grpc.CallOption) (*VINInfo, error)
	// 编辑
	Edit(ctx context.Context, in *VINEditReq, opts ...grpc.CallOption) (*VINInfo, error)
	// 绑定VIN
	Bind(ctx context.Context, in *VINBindReq, opts ...grpc.CallOption) (*VINInfo, error)
	// 解绑VIN
	Unbind(ctx context.Context, in *VINReq, opts ...grpc.CallOption) (*VINInfo, error)
	// 设置卡的异常状态
	SetExceptionStatus(ctx context.Context, in *SetVINExceptionStatusReq, opts ...grpc.CallOption) (*VINInfo, error)
	// VIN充值
	Charge(ctx context.Context, in *VINChargeReq, opts ...grpc.CallOption) (*VINInfo, error)
	// 后台直接扣款
	Withhold(ctx context.Context, in *VINWithholdReq, opts ...grpc.CallOption) (*VINInfo, error)
}

type vINServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVINServiceClient(cc grpc.ClientConnInterface) VINServiceClient {
	return &vINServiceClient{cc}
}

func (c *vINServiceClient) ListByOperator(ctx context.Context, in *VINListByOperatorReq, opts ...grpc.CallOption) (*ListVINsResp, error) {
	out := new(ListVINsResp)
	err := c.cc.Invoke(ctx, "/customer.VINService/ListByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) ListByCustomer(ctx context.Context, in *VINListByCustomerReq, opts ...grpc.CallOption) (*ListVINsResp, error) {
	out := new(ListVINsResp)
	err := c.cc.Invoke(ctx, "/customer.VINService/ListByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) ListByGroup(ctx context.Context, in *VINListByGroupReq, opts ...grpc.CallOption) (*ListVINsResp, error) {
	out := new(ListVINsResp)
	err := c.cc.Invoke(ctx, "/customer.VINService/ListByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) Info(ctx context.Context, in *VINReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) Add(ctx context.Context, in *VINAddReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) Edit(ctx context.Context, in *VINEditReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) Bind(ctx context.Context, in *VINBindReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) Unbind(ctx context.Context, in *VINReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/Unbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) SetExceptionStatus(ctx context.Context, in *SetVINExceptionStatusReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/SetExceptionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) Charge(ctx context.Context, in *VINChargeReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/Charge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vINServiceClient) Withhold(ctx context.Context, in *VINWithholdReq, opts ...grpc.CallOption) (*VINInfo, error) {
	out := new(VINInfo)
	err := c.cc.Invoke(ctx, "/customer.VINService/Withhold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VINServiceServer is the server API for VINService service.
type VINServiceServer interface {
	ListByOperator(context.Context, *VINListByOperatorReq) (*ListVINsResp, error)
	ListByCustomer(context.Context, *VINListByCustomerReq) (*ListVINsResp, error)
	ListByGroup(context.Context, *VINListByGroupReq) (*ListVINsResp, error)
	// 获取VIN信息
	Info(context.Context, *VINReq) (*VINInfo, error)
	// 添加
	Add(context.Context, *VINAddReq) (*VINInfo, error)
	// 编辑
	Edit(context.Context, *VINEditReq) (*VINInfo, error)
	// 绑定VIN
	Bind(context.Context, *VINBindReq) (*VINInfo, error)
	// 解绑VIN
	Unbind(context.Context, *VINReq) (*VINInfo, error)
	// 设置卡的异常状态
	SetExceptionStatus(context.Context, *SetVINExceptionStatusReq) (*VINInfo, error)
	// VIN充值
	Charge(context.Context, *VINChargeReq) (*VINInfo, error)
	// 后台直接扣款
	Withhold(context.Context, *VINWithholdReq) (*VINInfo, error)
}

// UnimplementedVINServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVINServiceServer struct {
}

func (*UnimplementedVINServiceServer) ListByOperator(context.Context, *VINListByOperatorReq) (*ListVINsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByOperator not implemented")
}
func (*UnimplementedVINServiceServer) ListByCustomer(context.Context, *VINListByCustomerReq) (*ListVINsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByCustomer not implemented")
}
func (*UnimplementedVINServiceServer) ListByGroup(context.Context, *VINListByGroupReq) (*ListVINsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByGroup not implemented")
}
func (*UnimplementedVINServiceServer) Info(context.Context, *VINReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedVINServiceServer) Add(context.Context, *VINAddReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedVINServiceServer) Edit(context.Context, *VINEditReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedVINServiceServer) Bind(context.Context, *VINBindReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (*UnimplementedVINServiceServer) Unbind(context.Context, *VINReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (*UnimplementedVINServiceServer) SetExceptionStatus(context.Context, *SetVINExceptionStatusReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExceptionStatus not implemented")
}
func (*UnimplementedVINServiceServer) Charge(context.Context, *VINChargeReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}
func (*UnimplementedVINServiceServer) Withhold(context.Context, *VINWithholdReq) (*VINInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withhold not implemented")
}

func RegisterVINServiceServer(s *grpc.Server, srv VINServiceServer) {
	s.RegisterService(&_VINService_serviceDesc, srv)
}

func _VINService_ListByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINListByOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).ListByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/ListByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).ListByOperator(ctx, req.(*VINListByOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_ListByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINListByCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).ListByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/ListByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).ListByCustomer(ctx, req.(*VINListByCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_ListByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINListByGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).ListByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/ListByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).ListByGroup(ctx, req.(*VINListByGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).Info(ctx, req.(*VINReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).Add(ctx, req.(*VINAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).Edit(ctx, req.(*VINEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).Bind(ctx, req.(*VINBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).Unbind(ctx, req.(*VINReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_SetExceptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVINExceptionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).SetExceptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/SetExceptionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).SetExceptionStatus(ctx, req.(*SetVINExceptionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).Charge(ctx, req.(*VINChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VINService_Withhold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VINWithholdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VINServiceServer).Withhold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.VINService/Withhold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VINServiceServer).Withhold(ctx, req.(*VINWithholdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _VINService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.VINService",
	HandlerType: (*VINServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListByOperator",
			Handler:    _VINService_ListByOperator_Handler,
		},
		{
			MethodName: "ListByCustomer",
			Handler:    _VINService_ListByCustomer_Handler,
		},
		{
			MethodName: "ListByGroup",
			Handler:    _VINService_ListByGroup_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _VINService_Info_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _VINService_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _VINService_Edit_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _VINService_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _VINService_Unbind_Handler,
		},
		{
			MethodName: "SetExceptionStatus",
			Handler:    _VINService_SetExceptionStatus_Handler,
		},
		{
			MethodName: "Charge",
			Handler:    _VINService_Charge_Handler,
		},
		{
			MethodName: "Withhold",
			Handler:    _VINService_Withhold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CardServiceClient interface {
	// 卡列表
	List(ctx context.Context, in *CardListReq, opts ...grpc.CallOption) (*CardListResp, error)
	// 用户卡
	ListByCustomer(ctx context.Context, in *CardsByCustomerReq, opts ...grpc.CallOption) (*CardListResp, error)
	// 用户卡
	ListByGroup(ctx context.Context, in *CardsByGroupReq, opts ...grpc.CallOption) (*CardListResp, error)
	// 绑定卡
	Bind(ctx context.Context, in *CardBindReq, opts ...grpc.CallOption) (*CardInfo, error)
	// 解绑卡
	Unbind(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardInfo, error)
	// 挂失卡
	ReportLost(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardInfo, error)
	// 获取卡信息
	Info(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardInfo, error)
	// 添加
	Add(ctx context.Context, in *CardAddReq, opts ...grpc.CallOption) (*CardInfo, error)
	// 编辑
	Edit(ctx context.Context, in *CardEditReq, opts ...grpc.CallOption) (*CardInfo, error)
	// 导入卡片（一般用于鉴权卡）
	ImportCard(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*ImportCardResp, error)
	// 卡充值
	Charge(ctx context.Context, in *CardChargeReq, opts ...grpc.CallOption) (*CardChargeResp, error)
	// 后台直接扣款
	Withhold(ctx context.Context, in *CardWithholdReq, opts ...grpc.CallOption) (*CardWithholdResp, error)
	// 将卡余额移动用户余额
	RefundToUserBalance(ctx context.Context, in *RefundToUserBalanceReq, opts ...grpc.CallOption) (*RefundToUserBalanceResp, error)
	// 卡充值申请
	ChargeApply(ctx context.Context, in *CardChargeApplyReq, opts ...grpc.CallOption) (*CardChargeApplyResp, error)
	// 卡充值 微信/支付宝支付成功回调
	ChargeCallback(ctx context.Context, in *CardChargeCallbackReq, opts ...grpc.CallOption) (*CardChargeCallbackResp, error)
	// 设置卡的异常状态
	SetCardExceptionStatus(ctx context.Context, in *SetCardExceptionStatusReq, opts ...grpc.CallOption) (*CardInfo, error)
	// 获取卡充值延时配置
	GetChargeDelayConfig(ctx context.Context, in *GetChargeDelayConfigReq, opts ...grpc.CallOption) (*GetChargeDelayConfigResp, error)
	// 添加卡充值延时配置
	SetChargeDelayConfig(ctx context.Context, in *SetChargeDelayConfigReq, opts ...grpc.CallOption) (*SetChargeDelayConfigResp, error)
	// 删除卡充值延时配置
	DelChargeDelayConfig(ctx context.Context, in *DelChargeDelayConfigReq, opts ...grpc.CallOption) (*DelChargeDelayConfigResp, error)
	// 获取卡退款延时配置
	GetRefundDelayConfig(ctx context.Context, in *GetRefundDelayConfigReq, opts ...grpc.CallOption) (*GetRefundDelayConfigResp, error)
	// 添加卡退款延时配置
	SetRefundDelayConfig(ctx context.Context, in *SetRefundDelayConfigReq, opts ...grpc.CallOption) (*SetRefundDelayConfigResp, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) List(ctx context.Context, in *CardListReq, opts ...grpc.CallOption) (*CardListResp, error) {
	out := new(CardListResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ListByCustomer(ctx context.Context, in *CardsByCustomerReq, opts ...grpc.CallOption) (*CardListResp, error) {
	out := new(CardListResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/ListByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ListByGroup(ctx context.Context, in *CardsByGroupReq, opts ...grpc.CallOption) (*CardListResp, error) {
	out := new(CardListResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/ListByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Bind(ctx context.Context, in *CardBindReq, opts ...grpc.CallOption) (*CardInfo, error) {
	out := new(CardInfo)
	err := c.cc.Invoke(ctx, "/customer.CardService/Bind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Unbind(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardInfo, error) {
	out := new(CardInfo)
	err := c.cc.Invoke(ctx, "/customer.CardService/Unbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ReportLost(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardInfo, error) {
	out := new(CardInfo)
	err := c.cc.Invoke(ctx, "/customer.CardService/ReportLost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Info(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardInfo, error) {
	out := new(CardInfo)
	err := c.cc.Invoke(ctx, "/customer.CardService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Add(ctx context.Context, in *CardAddReq, opts ...grpc.CallOption) (*CardInfo, error) {
	out := new(CardInfo)
	err := c.cc.Invoke(ctx, "/customer.CardService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Edit(ctx context.Context, in *CardEditReq, opts ...grpc.CallOption) (*CardInfo, error) {
	out := new(CardInfo)
	err := c.cc.Invoke(ctx, "/customer.CardService/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ImportCard(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*ImportCardResp, error) {
	out := new(ImportCardResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/ImportCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Charge(ctx context.Context, in *CardChargeReq, opts ...grpc.CallOption) (*CardChargeResp, error) {
	out := new(CardChargeResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/Charge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) Withhold(ctx context.Context, in *CardWithholdReq, opts ...grpc.CallOption) (*CardWithholdResp, error) {
	out := new(CardWithholdResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/Withhold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) RefundToUserBalance(ctx context.Context, in *RefundToUserBalanceReq, opts ...grpc.CallOption) (*RefundToUserBalanceResp, error) {
	out := new(RefundToUserBalanceResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/RefundToUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ChargeApply(ctx context.Context, in *CardChargeApplyReq, opts ...grpc.CallOption) (*CardChargeApplyResp, error) {
	out := new(CardChargeApplyResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/ChargeApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) ChargeCallback(ctx context.Context, in *CardChargeCallbackReq, opts ...grpc.CallOption) (*CardChargeCallbackResp, error) {
	out := new(CardChargeCallbackResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/ChargeCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) SetCardExceptionStatus(ctx context.Context, in *SetCardExceptionStatusReq, opts ...grpc.CallOption) (*CardInfo, error) {
	out := new(CardInfo)
	err := c.cc.Invoke(ctx, "/customer.CardService/SetCardExceptionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetChargeDelayConfig(ctx context.Context, in *GetChargeDelayConfigReq, opts ...grpc.CallOption) (*GetChargeDelayConfigResp, error) {
	out := new(GetChargeDelayConfigResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/GetChargeDelayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) SetChargeDelayConfig(ctx context.Context, in *SetChargeDelayConfigReq, opts ...grpc.CallOption) (*SetChargeDelayConfigResp, error) {
	out := new(SetChargeDelayConfigResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/SetChargeDelayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DelChargeDelayConfig(ctx context.Context, in *DelChargeDelayConfigReq, opts ...grpc.CallOption) (*DelChargeDelayConfigResp, error) {
	out := new(DelChargeDelayConfigResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/DelChargeDelayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetRefundDelayConfig(ctx context.Context, in *GetRefundDelayConfigReq, opts ...grpc.CallOption) (*GetRefundDelayConfigResp, error) {
	out := new(GetRefundDelayConfigResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/GetRefundDelayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) SetRefundDelayConfig(ctx context.Context, in *SetRefundDelayConfigReq, opts ...grpc.CallOption) (*SetRefundDelayConfigResp, error) {
	out := new(SetRefundDelayConfigResp)
	err := c.cc.Invoke(ctx, "/customer.CardService/SetRefundDelayConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServiceServer is the server API for CardService service.
type CardServiceServer interface {
	// 卡列表
	List(context.Context, *CardListReq) (*CardListResp, error)
	// 用户卡
	ListByCustomer(context.Context, *CardsByCustomerReq) (*CardListResp, error)
	// 用户卡
	ListByGroup(context.Context, *CardsByGroupReq) (*CardListResp, error)
	// 绑定卡
	Bind(context.Context, *CardBindReq) (*CardInfo, error)
	// 解绑卡
	Unbind(context.Context, *CardReq) (*CardInfo, error)
	// 挂失卡
	ReportLost(context.Context, *CardReq) (*CardInfo, error)
	// 获取卡信息
	Info(context.Context, *CardReq) (*CardInfo, error)
	// 添加
	Add(context.Context, *CardAddReq) (*CardInfo, error)
	// 编辑
	Edit(context.Context, *CardEditReq) (*CardInfo, error)
	// 导入卡片（一般用于鉴权卡）
	ImportCard(context.Context, *CardReq) (*ImportCardResp, error)
	// 卡充值
	Charge(context.Context, *CardChargeReq) (*CardChargeResp, error)
	// 后台直接扣款
	Withhold(context.Context, *CardWithholdReq) (*CardWithholdResp, error)
	// 将卡余额移动用户余额
	RefundToUserBalance(context.Context, *RefundToUserBalanceReq) (*RefundToUserBalanceResp, error)
	// 卡充值申请
	ChargeApply(context.Context, *CardChargeApplyReq) (*CardChargeApplyResp, error)
	// 卡充值 微信/支付宝支付成功回调
	ChargeCallback(context.Context, *CardChargeCallbackReq) (*CardChargeCallbackResp, error)
	// 设置卡的异常状态
	SetCardExceptionStatus(context.Context, *SetCardExceptionStatusReq) (*CardInfo, error)
	// 获取卡充值延时配置
	GetChargeDelayConfig(context.Context, *GetChargeDelayConfigReq) (*GetChargeDelayConfigResp, error)
	// 添加卡充值延时配置
	SetChargeDelayConfig(context.Context, *SetChargeDelayConfigReq) (*SetChargeDelayConfigResp, error)
	// 删除卡充值延时配置
	DelChargeDelayConfig(context.Context, *DelChargeDelayConfigReq) (*DelChargeDelayConfigResp, error)
	// 获取卡退款延时配置
	GetRefundDelayConfig(context.Context, *GetRefundDelayConfigReq) (*GetRefundDelayConfigResp, error)
	// 添加卡退款延时配置
	SetRefundDelayConfig(context.Context, *SetRefundDelayConfigReq) (*SetRefundDelayConfigResp, error)
}

// UnimplementedCardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (*UnimplementedCardServiceServer) List(context.Context, *CardListReq) (*CardListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCardServiceServer) ListByCustomer(context.Context, *CardsByCustomerReq) (*CardListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByCustomer not implemented")
}
func (*UnimplementedCardServiceServer) ListByGroup(context.Context, *CardsByGroupReq) (*CardListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByGroup not implemented")
}
func (*UnimplementedCardServiceServer) Bind(context.Context, *CardBindReq) (*CardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind not implemented")
}
func (*UnimplementedCardServiceServer) Unbind(context.Context, *CardReq) (*CardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (*UnimplementedCardServiceServer) ReportLost(context.Context, *CardReq) (*CardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLost not implemented")
}
func (*UnimplementedCardServiceServer) Info(context.Context, *CardReq) (*CardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedCardServiceServer) Add(context.Context, *CardAddReq) (*CardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCardServiceServer) Edit(context.Context, *CardEditReq) (*CardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedCardServiceServer) ImportCard(context.Context, *CardReq) (*ImportCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCard not implemented")
}
func (*UnimplementedCardServiceServer) Charge(context.Context, *CardChargeReq) (*CardChargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}
func (*UnimplementedCardServiceServer) Withhold(context.Context, *CardWithholdReq) (*CardWithholdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withhold not implemented")
}
func (*UnimplementedCardServiceServer) RefundToUserBalance(context.Context, *RefundToUserBalanceReq) (*RefundToUserBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundToUserBalance not implemented")
}
func (*UnimplementedCardServiceServer) ChargeApply(context.Context, *CardChargeApplyReq) (*CardChargeApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeApply not implemented")
}
func (*UnimplementedCardServiceServer) ChargeCallback(context.Context, *CardChargeCallbackReq) (*CardChargeCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeCallback not implemented")
}
func (*UnimplementedCardServiceServer) SetCardExceptionStatus(context.Context, *SetCardExceptionStatusReq) (*CardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCardExceptionStatus not implemented")
}
func (*UnimplementedCardServiceServer) GetChargeDelayConfig(context.Context, *GetChargeDelayConfigReq) (*GetChargeDelayConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargeDelayConfig not implemented")
}
func (*UnimplementedCardServiceServer) SetChargeDelayConfig(context.Context, *SetChargeDelayConfigReq) (*SetChargeDelayConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChargeDelayConfig not implemented")
}
func (*UnimplementedCardServiceServer) DelChargeDelayConfig(context.Context, *DelChargeDelayConfigReq) (*DelChargeDelayConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChargeDelayConfig not implemented")
}
func (*UnimplementedCardServiceServer) GetRefundDelayConfig(context.Context, *GetRefundDelayConfigReq) (*GetRefundDelayConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundDelayConfig not implemented")
}
func (*UnimplementedCardServiceServer) SetRefundDelayConfig(context.Context, *SetRefundDelayConfigReq) (*SetRefundDelayConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRefundDelayConfig not implemented")
}

func RegisterCardServiceServer(s *grpc.Server, srv CardServiceServer) {
	s.RegisterService(&_CardService_serviceDesc, srv)
}

func _CardService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).List(ctx, req.(*CardListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ListByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardsByCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ListByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/ListByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ListByCustomer(ctx, req.(*CardsByCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ListByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardsByGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ListByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/ListByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ListByGroup(ctx, req.(*CardsByGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Bind(ctx, req.(*CardBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Unbind(ctx, req.(*CardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ReportLost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ReportLost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/ReportLost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ReportLost(ctx, req.(*CardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Info(ctx, req.(*CardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Add(ctx, req.(*CardAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Edit(ctx, req.(*CardEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ImportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ImportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/ImportCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ImportCard(ctx, req.(*CardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Charge(ctx, req.(*CardChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_Withhold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardWithholdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).Withhold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/Withhold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).Withhold(ctx, req.(*CardWithholdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_RefundToUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundToUserBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).RefundToUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/RefundToUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).RefundToUserBalance(ctx, req.(*RefundToUserBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ChargeApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardChargeApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ChargeApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/ChargeApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ChargeApply(ctx, req.(*CardChargeApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_ChargeCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardChargeCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).ChargeCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/ChargeCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).ChargeCallback(ctx, req.(*CardChargeCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_SetCardExceptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCardExceptionStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).SetCardExceptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/SetCardExceptionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).SetCardExceptionStatus(ctx, req.(*SetCardExceptionStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetChargeDelayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChargeDelayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetChargeDelayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/GetChargeDelayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetChargeDelayConfig(ctx, req.(*GetChargeDelayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_SetChargeDelayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChargeDelayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).SetChargeDelayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/SetChargeDelayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).SetChargeDelayConfig(ctx, req.(*SetChargeDelayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DelChargeDelayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChargeDelayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DelChargeDelayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/DelChargeDelayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DelChargeDelayConfig(ctx, req.(*DelChargeDelayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetRefundDelayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefundDelayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetRefundDelayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/GetRefundDelayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetRefundDelayConfig(ctx, req.(*GetRefundDelayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_SetRefundDelayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRefundDelayConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).SetRefundDelayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CardService/SetRefundDelayConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).SetRefundDelayConfig(ctx, req.(*SetRefundDelayConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CardService_List_Handler,
		},
		{
			MethodName: "ListByCustomer",
			Handler:    _CardService_ListByCustomer_Handler,
		},
		{
			MethodName: "ListByGroup",
			Handler:    _CardService_ListByGroup_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _CardService_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _CardService_Unbind_Handler,
		},
		{
			MethodName: "ReportLost",
			Handler:    _CardService_ReportLost_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _CardService_Info_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _CardService_Add_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _CardService_Edit_Handler,
		},
		{
			MethodName: "ImportCard",
			Handler:    _CardService_ImportCard_Handler,
		},
		{
			MethodName: "Charge",
			Handler:    _CardService_Charge_Handler,
		},
		{
			MethodName: "Withhold",
			Handler:    _CardService_Withhold_Handler,
		},
		{
			MethodName: "RefundToUserBalance",
			Handler:    _CardService_RefundToUserBalance_Handler,
		},
		{
			MethodName: "ChargeApply",
			Handler:    _CardService_ChargeApply_Handler,
		},
		{
			MethodName: "ChargeCallback",
			Handler:    _CardService_ChargeCallback_Handler,
		},
		{
			MethodName: "SetCardExceptionStatus",
			Handler:    _CardService_SetCardExceptionStatus_Handler,
		},
		{
			MethodName: "GetChargeDelayConfig",
			Handler:    _CardService_GetChargeDelayConfig_Handler,
		},
		{
			MethodName: "SetChargeDelayConfig",
			Handler:    _CardService_SetChargeDelayConfig_Handler,
		},
		{
			MethodName: "DelChargeDelayConfig",
			Handler:    _CardService_DelChargeDelayConfig_Handler,
		},
		{
			MethodName: "GetRefundDelayConfig",
			Handler:    _CardService_GetRefundDelayConfig_Handler,
		},
		{
			MethodName: "SetRefundDelayConfig",
			Handler:    _CardService_SetRefundDelayConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// 交易通知
	Notify(ctx context.Context, in *TransactionNotifyReq, opts ...grpc.CallOption) (*TransactionNotifyResp, error)
	// 交易刷新
	Refresh(ctx context.Context, in *TransactionRefreshReq, opts ...grpc.CallOption) (*Transaction, error)
	// 交易推送
	Push(ctx context.Context, in *TransactionPushReq, opts ...grpc.CallOption) (*Transaction, error)
	// 设置交易状态
	SetState(ctx context.Context, in *TransactionSetStateReq, opts ...grpc.CallOption) (*Transaction, error)
	// 交易查询
	QueryByCustomer(ctx context.Context, in *TransactionQueryByCustomerReq, opts ...grpc.CallOption) (*TransactionsResp, error)
	QueryByOperator(ctx context.Context, in *TransactionQueryByOperatorReq, opts ...grpc.CallOption) (*TransactionsResp, error)
	QueryByStation(ctx context.Context, in *TransactionQueryByStationReq, opts ...grpc.CallOption) (*TransactionsResp, error)
	QueryByOrderID(ctx context.Context, in *TransactionQueryByOrderIDReq, opts ...grpc.CallOption) (*TransactionsResp, error)
	// 对账单
	Statement(ctx context.Context, in *StatementReq, opts ...grpc.CallOption) (*StatementResp, error)
	// 补缴流水处理
	BackPay(ctx context.Context, in *BackPayReq, opts ...grpc.CallOption) (*BackPayResp, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) Notify(ctx context.Context, in *TransactionNotifyReq, opts ...grpc.CallOption) (*TransactionNotifyResp, error) {
	out := new(TransactionNotifyResp)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Refresh(ctx context.Context, in *TransactionRefreshReq, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Push(ctx context.Context, in *TransactionPushReq, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) SetState(ctx context.Context, in *TransactionSetStateReq, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) QueryByCustomer(ctx context.Context, in *TransactionQueryByCustomerReq, opts ...grpc.CallOption) (*TransactionsResp, error) {
	out := new(TransactionsResp)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/QueryByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) QueryByOperator(ctx context.Context, in *TransactionQueryByOperatorReq, opts ...grpc.CallOption) (*TransactionsResp, error) {
	out := new(TransactionsResp)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/QueryByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) QueryByStation(ctx context.Context, in *TransactionQueryByStationReq, opts ...grpc.CallOption) (*TransactionsResp, error) {
	out := new(TransactionsResp)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/QueryByStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) QueryByOrderID(ctx context.Context, in *TransactionQueryByOrderIDReq, opts ...grpc.CallOption) (*TransactionsResp, error) {
	out := new(TransactionsResp)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/QueryByOrderID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) Statement(ctx context.Context, in *StatementReq, opts ...grpc.CallOption) (*StatementResp, error) {
	out := new(StatementResp)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/Statement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) BackPay(ctx context.Context, in *BackPayReq, opts ...grpc.CallOption) (*BackPayResp, error) {
	out := new(BackPayResp)
	err := c.cc.Invoke(ctx, "/customer.TransactionService/BackPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
type TransactionServiceServer interface {
	// 交易通知
	Notify(context.Context, *TransactionNotifyReq) (*TransactionNotifyResp, error)
	// 交易刷新
	Refresh(context.Context, *TransactionRefreshReq) (*Transaction, error)
	// 交易推送
	Push(context.Context, *TransactionPushReq) (*Transaction, error)
	// 设置交易状态
	SetState(context.Context, *TransactionSetStateReq) (*Transaction, error)
	// 交易查询
	QueryByCustomer(context.Context, *TransactionQueryByCustomerReq) (*TransactionsResp, error)
	QueryByOperator(context.Context, *TransactionQueryByOperatorReq) (*TransactionsResp, error)
	QueryByStation(context.Context, *TransactionQueryByStationReq) (*TransactionsResp, error)
	QueryByOrderID(context.Context, *TransactionQueryByOrderIDReq) (*TransactionsResp, error)
	// 对账单
	Statement(context.Context, *StatementReq) (*StatementResp, error)
	// 补缴流水处理
	BackPay(context.Context, *BackPayReq) (*BackPayResp, error)
}

// UnimplementedTransactionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (*UnimplementedTransactionServiceServer) Notify(context.Context, *TransactionNotifyReq) (*TransactionNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedTransactionServiceServer) Refresh(context.Context, *TransactionRefreshReq) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedTransactionServiceServer) Push(context.Context, *TransactionPushReq) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedTransactionServiceServer) SetState(context.Context, *TransactionSetStateReq) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (*UnimplementedTransactionServiceServer) QueryByCustomer(context.Context, *TransactionQueryByCustomerReq) (*TransactionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByCustomer not implemented")
}
func (*UnimplementedTransactionServiceServer) QueryByOperator(context.Context, *TransactionQueryByOperatorReq) (*TransactionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByOperator not implemented")
}
func (*UnimplementedTransactionServiceServer) QueryByStation(context.Context, *TransactionQueryByStationReq) (*TransactionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByStation not implemented")
}
func (*UnimplementedTransactionServiceServer) QueryByOrderID(context.Context, *TransactionQueryByOrderIDReq) (*TransactionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByOrderID not implemented")
}
func (*UnimplementedTransactionServiceServer) Statement(context.Context, *StatementReq) (*StatementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statement not implemented")
}
func (*UnimplementedTransactionServiceServer) BackPay(context.Context, *BackPayReq) (*BackPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackPay not implemented")
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Notify(ctx, req.(*TransactionNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Refresh(ctx, req.(*TransactionRefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Push(ctx, req.(*TransactionPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionSetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).SetState(ctx, req.(*TransactionSetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_QueryByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQueryByCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).QueryByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/QueryByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).QueryByCustomer(ctx, req.(*TransactionQueryByCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_QueryByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQueryByOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).QueryByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/QueryByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).QueryByOperator(ctx, req.(*TransactionQueryByOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_QueryByStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQueryByStationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).QueryByStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/QueryByStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).QueryByStation(ctx, req.(*TransactionQueryByStationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_QueryByOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQueryByOrderIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).QueryByOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/QueryByOrderID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).QueryByOrderID(ctx, req.(*TransactionQueryByOrderIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_Statement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).Statement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/Statement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).Statement(ctx, req.(*StatementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_BackPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).BackPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.TransactionService/BackPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).BackPay(ctx, req.(*BackPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _TransactionService_Notify_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _TransactionService_Refresh_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _TransactionService_Push_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _TransactionService_SetState_Handler,
		},
		{
			MethodName: "QueryByCustomer",
			Handler:    _TransactionService_QueryByCustomer_Handler,
		},
		{
			MethodName: "QueryByOperator",
			Handler:    _TransactionService_QueryByOperator_Handler,
		},
		{
			MethodName: "QueryByStation",
			Handler:    _TransactionService_QueryByStation_Handler,
		},
		{
			MethodName: "QueryByOrderID",
			Handler:    _TransactionService_QueryByOrderID_Handler,
		},
		{
			MethodName: "Statement",
			Handler:    _TransactionService_Statement_Handler,
		},
		{
			MethodName: "BackPay",
			Handler:    _TransactionService_BackPay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActivityServiceClient interface {
	// 设置活动信息
	Set(ctx context.Context, in *SetActivityReq, opts ...grpc.CallOption) (*SetActivityResp, error)
	// 设置活动是否打开
	SetActivityOpen(ctx context.Context, in *SetActivityOpenReq, opts ...grpc.CallOption) (*SetActivityOpenResp, error)
	//  根据id获得活动
	GetByID(ctx context.Context, in *GetActivityByIDReq, opts ...grpc.CallOption) (*Activity, error)
	//  根据运营商id获得活动
	GetByOperatorID(ctx context.Context, in *GetActivityByOperatorIDReq, opts ...grpc.CallOption) (*GetActivityByOperatorIDResp, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) Set(ctx context.Context, in *SetActivityReq, opts ...grpc.CallOption) (*SetActivityResp, error) {
	out := new(SetActivityResp)
	err := c.cc.Invoke(ctx, "/customer.ActivityService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) SetActivityOpen(ctx context.Context, in *SetActivityOpenReq, opts ...grpc.CallOption) (*SetActivityOpenResp, error) {
	out := new(SetActivityOpenResp)
	err := c.cc.Invoke(ctx, "/customer.ActivityService/SetActivityOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetByID(ctx context.Context, in *GetActivityByIDReq, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/customer.ActivityService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetByOperatorID(ctx context.Context, in *GetActivityByOperatorIDReq, opts ...grpc.CallOption) (*GetActivityByOperatorIDResp, error) {
	out := new(GetActivityByOperatorIDResp)
	err := c.cc.Invoke(ctx, "/customer.ActivityService/GetByOperatorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
type ActivityServiceServer interface {
	// 设置活动信息
	Set(context.Context, *SetActivityReq) (*SetActivityResp, error)
	// 设置活动是否打开
	SetActivityOpen(context.Context, *SetActivityOpenReq) (*SetActivityOpenResp, error)
	//  根据id获得活动
	GetByID(context.Context, *GetActivityByIDReq) (*Activity, error)
	//  根据运营商id获得活动
	GetByOperatorID(context.Context, *GetActivityByOperatorIDReq) (*GetActivityByOperatorIDResp, error)
}

// UnimplementedActivityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (*UnimplementedActivityServiceServer) Set(context.Context, *SetActivityReq) (*SetActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedActivityServiceServer) SetActivityOpen(context.Context, *SetActivityOpenReq) (*SetActivityOpenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActivityOpen not implemented")
}
func (*UnimplementedActivityServiceServer) GetByID(context.Context, *GetActivityByIDReq) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (*UnimplementedActivityServiceServer) GetByOperatorID(context.Context, *GetActivityByOperatorIDReq) (*GetActivityByOperatorIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByOperatorID not implemented")
}

func RegisterActivityServiceServer(s *grpc.Server, srv ActivityServiceServer) {
	s.RegisterService(&_ActivityService_serviceDesc, srv)
}

func _ActivityService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.ActivityService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).Set(ctx, req.(*SetActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_SetActivityOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActivityOpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).SetActivityOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.ActivityService/SetActivityOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).SetActivityOpen(ctx, req.(*SetActivityOpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.ActivityService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetByID(ctx, req.(*GetActivityByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetByOperatorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityByOperatorIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetByOperatorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.ActivityService/GetByOperatorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetByOperatorID(ctx, req.(*GetActivityByOperatorIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActivityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _ActivityService_Set_Handler,
		},
		{
			MethodName: "SetActivityOpen",
			Handler:    _ActivityService_SetActivityOpen_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ActivityService_GetByID_Handler,
		},
		{
			MethodName: "GetByOperatorID",
			Handler:    _ActivityService_GetByOperatorID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}

// GroupServicesClient is the client API for GroupServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupServicesClient interface {
	// 添加集团
	AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*Group, error)
	// 编辑集团
	EditGroup(ctx context.Context, in *EditGroupReq, opts ...grpc.CallOption) (*Group, error)
	// 获取集团列表
	ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error)
	// 设置集团状态
	SetGroupState(ctx context.Context, in *SetGroupStateReq, opts ...grpc.CallOption) (*Group, error)
	// 获取集团信息
	GetGroupInfo(ctx context.Context, in *GroupIDReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error)
	// 添加集团成员
	AddMemeber(ctx context.Context, in *AddMemeberReq, opts ...grpc.CallOption) (*GroupMember, error)
	// 修改集团成员
	EditMemeber(ctx context.Context, in *EditMemeberReq, opts ...grpc.CallOption) (*GroupMember, error)
	// 删除集团成员
	DelMemeber(ctx context.Context, in *DelMemeberReq, opts ...grpc.CallOption) (*DelMemeberResp, error)
	// 集团成员列表
	Memebers(ctx context.Context, in *MemebersReq, opts ...grpc.CallOption) (*MemebersResp, error)
	// 设置集团成员状态
	SetMemeberState(ctx context.Context, in *SetMemeberStateReq, opts ...grpc.CallOption) (*GroupMember, error)
	// 根据用户获取集团成员信息
	GetMemberInfoByCustomer(ctx context.Context, in *GetMemberInfoByCustomerReq, opts ...grpc.CallOption) (*GroupMember, error)
	// 根据用户获取集团成员信息
	GetMemberInfoByID(ctx context.Context, in *GetMemberInfoByIDReq, opts ...grpc.CallOption) (*GroupMember, error)
	// 根据VIN集团获取集团成员信息
	GetMemberInfoByVIN(ctx context.Context, in *GetMemberInfoByVINReq, opts ...grpc.CallOption) (*GroupMember, error)
	// 根据VIN集团获取集团成员信息
	GetMemberInfoByCard(ctx context.Context, in *GetMemberInfoByCardReq, opts ...grpc.CallOption) (*GroupMember, error)
	// 集团充值
	Charge(ctx context.Context, in *GroupChargeReq, opts ...grpc.CallOption) (*Group, error)
}

type groupServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServicesClient(cc grpc.ClientConnInterface) GroupServicesClient {
	return &groupServicesClient{cc}
}

func (c *groupServicesClient) AddGroup(ctx context.Context, in *AddGroupReq, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) EditGroup(ctx context.Context, in *EditGroupReq, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/EditGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) ListGroups(ctx context.Context, in *ListGroupsReq, opts ...grpc.CallOption) (*ListGroupsResp, error) {
	out := new(ListGroupsResp)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) SetGroupState(ctx context.Context, in *SetGroupStateReq, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/SetGroupState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) GetGroupInfo(ctx context.Context, in *GroupIDReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error) {
	out := new(GetGroupInfoResp)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/GetGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) AddMemeber(ctx context.Context, in *AddMemeberReq, opts ...grpc.CallOption) (*GroupMember, error) {
	out := new(GroupMember)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/AddMemeber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) EditMemeber(ctx context.Context, in *EditMemeberReq, opts ...grpc.CallOption) (*GroupMember, error) {
	out := new(GroupMember)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/EditMemeber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) DelMemeber(ctx context.Context, in *DelMemeberReq, opts ...grpc.CallOption) (*DelMemeberResp, error) {
	out := new(DelMemeberResp)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/DelMemeber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) Memebers(ctx context.Context, in *MemebersReq, opts ...grpc.CallOption) (*MemebersResp, error) {
	out := new(MemebersResp)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/Memebers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) SetMemeberState(ctx context.Context, in *SetMemeberStateReq, opts ...grpc.CallOption) (*GroupMember, error) {
	out := new(GroupMember)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/SetMemeberState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) GetMemberInfoByCustomer(ctx context.Context, in *GetMemberInfoByCustomerReq, opts ...grpc.CallOption) (*GroupMember, error) {
	out := new(GroupMember)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/GetMemberInfoByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) GetMemberInfoByID(ctx context.Context, in *GetMemberInfoByIDReq, opts ...grpc.CallOption) (*GroupMember, error) {
	out := new(GroupMember)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/GetMemberInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) GetMemberInfoByVIN(ctx context.Context, in *GetMemberInfoByVINReq, opts ...grpc.CallOption) (*GroupMember, error) {
	out := new(GroupMember)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/GetMemberInfoByVIN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) GetMemberInfoByCard(ctx context.Context, in *GetMemberInfoByCardReq, opts ...grpc.CallOption) (*GroupMember, error) {
	out := new(GroupMember)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/GetMemberInfoByCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServicesClient) Charge(ctx context.Context, in *GroupChargeReq, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/customer.GroupServices/Charge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServicesServer is the server API for GroupServices service.
type GroupServicesServer interface {
	// 添加集团
	AddGroup(context.Context, *AddGroupReq) (*Group, error)
	// 编辑集团
	EditGroup(context.Context, *EditGroupReq) (*Group, error)
	// 获取集团列表
	ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error)
	// 设置集团状态
	SetGroupState(context.Context, *SetGroupStateReq) (*Group, error)
	// 获取集团信息
	GetGroupInfo(context.Context, *GroupIDReq) (*GetGroupInfoResp, error)
	// 添加集团成员
	AddMemeber(context.Context, *AddMemeberReq) (*GroupMember, error)
	// 修改集团成员
	EditMemeber(context.Context, *EditMemeberReq) (*GroupMember, error)
	// 删除集团成员
	DelMemeber(context.Context, *DelMemeberReq) (*DelMemeberResp, error)
	// 集团成员列表
	Memebers(context.Context, *MemebersReq) (*MemebersResp, error)
	// 设置集团成员状态
	SetMemeberState(context.Context, *SetMemeberStateReq) (*GroupMember, error)
	// 根据用户获取集团成员信息
	GetMemberInfoByCustomer(context.Context, *GetMemberInfoByCustomerReq) (*GroupMember, error)
	// 根据用户获取集团成员信息
	GetMemberInfoByID(context.Context, *GetMemberInfoByIDReq) (*GroupMember, error)
	// 根据VIN集团获取集团成员信息
	GetMemberInfoByVIN(context.Context, *GetMemberInfoByVINReq) (*GroupMember, error)
	// 根据VIN集团获取集团成员信息
	GetMemberInfoByCard(context.Context, *GetMemberInfoByCardReq) (*GroupMember, error)
	// 集团充值
	Charge(context.Context, *GroupChargeReq) (*Group, error)
}

// UnimplementedGroupServicesServer can be embedded to have forward compatible implementations.
type UnimplementedGroupServicesServer struct {
}

func (*UnimplementedGroupServicesServer) AddGroup(context.Context, *AddGroupReq) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (*UnimplementedGroupServicesServer) EditGroup(context.Context, *EditGroupReq) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGroup not implemented")
}
func (*UnimplementedGroupServicesServer) ListGroups(context.Context, *ListGroupsReq) (*ListGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (*UnimplementedGroupServicesServer) SetGroupState(context.Context, *SetGroupStateReq) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupState not implemented")
}
func (*UnimplementedGroupServicesServer) GetGroupInfo(context.Context, *GroupIDReq) (*GetGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (*UnimplementedGroupServicesServer) AddMemeber(context.Context, *AddMemeberReq) (*GroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemeber not implemented")
}
func (*UnimplementedGroupServicesServer) EditMemeber(context.Context, *EditMemeberReq) (*GroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMemeber not implemented")
}
func (*UnimplementedGroupServicesServer) DelMemeber(context.Context, *DelMemeberReq) (*DelMemeberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMemeber not implemented")
}
func (*UnimplementedGroupServicesServer) Memebers(context.Context, *MemebersReq) (*MemebersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Memebers not implemented")
}
func (*UnimplementedGroupServicesServer) SetMemeberState(context.Context, *SetMemeberStateReq) (*GroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemeberState not implemented")
}
func (*UnimplementedGroupServicesServer) GetMemberInfoByCustomer(context.Context, *GetMemberInfoByCustomerReq) (*GroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberInfoByCustomer not implemented")
}
func (*UnimplementedGroupServicesServer) GetMemberInfoByID(context.Context, *GetMemberInfoByIDReq) (*GroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberInfoByID not implemented")
}
func (*UnimplementedGroupServicesServer) GetMemberInfoByVIN(context.Context, *GetMemberInfoByVINReq) (*GroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberInfoByVIN not implemented")
}
func (*UnimplementedGroupServicesServer) GetMemberInfoByCard(context.Context, *GetMemberInfoByCardReq) (*GroupMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberInfoByCard not implemented")
}
func (*UnimplementedGroupServicesServer) Charge(context.Context, *GroupChargeReq) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}

func RegisterGroupServicesServer(s *grpc.Server, srv GroupServicesServer) {
	s.RegisterService(&_GroupServices_serviceDesc, srv)
}

func _GroupServices_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).AddGroup(ctx, req.(*AddGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_EditGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).EditGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/EditGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).EditGroup(ctx, req.(*EditGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).ListGroups(ctx, req.(*ListGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_SetGroupState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).SetGroupState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/SetGroupState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).SetGroupState(ctx, req.(*SetGroupStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/GetGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).GetGroupInfo(ctx, req.(*GroupIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_AddMemeber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemeberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).AddMemeber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/AddMemeber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).AddMemeber(ctx, req.(*AddMemeberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_EditMemeber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMemeberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).EditMemeber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/EditMemeber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).EditMemeber(ctx, req.(*EditMemeberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_DelMemeber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMemeberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).DelMemeber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/DelMemeber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).DelMemeber(ctx, req.(*DelMemeberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_Memebers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemebersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).Memebers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/Memebers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).Memebers(ctx, req.(*MemebersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_SetMemeberState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemeberStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).SetMemeberState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/SetMemeberState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).SetMemeberState(ctx, req.(*SetMemeberStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_GetMemberInfoByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberInfoByCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).GetMemberInfoByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/GetMemberInfoByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).GetMemberInfoByCustomer(ctx, req.(*GetMemberInfoByCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_GetMemberInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberInfoByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).GetMemberInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/GetMemberInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).GetMemberInfoByID(ctx, req.(*GetMemberInfoByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_GetMemberInfoByVIN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberInfoByVINReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).GetMemberInfoByVIN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/GetMemberInfoByVIN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).GetMemberInfoByVIN(ctx, req.(*GetMemberInfoByVINReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_GetMemberInfoByCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberInfoByCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).GetMemberInfoByCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/GetMemberInfoByCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).GetMemberInfoByCard(ctx, req.(*GetMemberInfoByCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServices_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServicesServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.GroupServices/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServicesServer).Charge(ctx, req.(*GroupChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.GroupServices",
	HandlerType: (*GroupServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroup",
			Handler:    _GroupServices_AddGroup_Handler,
		},
		{
			MethodName: "EditGroup",
			Handler:    _GroupServices_EditGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _GroupServices_ListGroups_Handler,
		},
		{
			MethodName: "SetGroupState",
			Handler:    _GroupServices_SetGroupState_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _GroupServices_GetGroupInfo_Handler,
		},
		{
			MethodName: "AddMemeber",
			Handler:    _GroupServices_AddMemeber_Handler,
		},
		{
			MethodName: "EditMemeber",
			Handler:    _GroupServices_EditMemeber_Handler,
		},
		{
			MethodName: "DelMemeber",
			Handler:    _GroupServices_DelMemeber_Handler,
		},
		{
			MethodName: "Memebers",
			Handler:    _GroupServices_Memebers_Handler,
		},
		{
			MethodName: "SetMemeberState",
			Handler:    _GroupServices_SetMemeberState_Handler,
		},
		{
			MethodName: "GetMemberInfoByCustomer",
			Handler:    _GroupServices_GetMemberInfoByCustomer_Handler,
		},
		{
			MethodName: "GetMemberInfoByID",
			Handler:    _GroupServices_GetMemberInfoByID_Handler,
		},
		{
			MethodName: "GetMemberInfoByVIN",
			Handler:    _GroupServices_GetMemberInfoByVIN_Handler,
		},
		{
			MethodName: "GetMemberInfoByCard",
			Handler:    _GroupServices_GetMemberInfoByCard_Handler,
		},
		{
			MethodName: "Charge",
			Handler:    _GroupServices_Charge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.proto",
}
