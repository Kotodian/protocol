// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: coregw.proto

package coregw

import (
	context "context"
	common "github.com/Kotodian/protocol/golang/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RemoteStartType int32

const (
	RemoteStartType_WechatOrAli RemoteStartType = 0 // 微信或支付宝
	RemoteStartType_Balance     RemoteStartType = 1 // 余额
	RemoteStartType_Group       RemoteStartType = 2 // 集团
	RemoteStartType_Partner     RemoteStartType = 3 // 合作方
)

// Enum value maps for RemoteStartType.
var (
	RemoteStartType_name = map[int32]string{
		0: "WechatOrAli",
		1: "Balance",
		2: "Group",
		3: "Partner",
	}
	RemoteStartType_value = map[string]int32{
		"WechatOrAli": 0,
		"Balance":     1,
		"Group":       2,
		"Partner":     3,
	}
)

func (x RemoteStartType) Enum() *RemoteStartType {
	p := new(RemoteStartType)
	*p = x
	return p
}

func (x RemoteStartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteStartType) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[0].Descriptor()
}

func (RemoteStartType) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[0]
}

func (x RemoteStartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteStartType.Descriptor instead.
func (RemoteStartType) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{0}
}

type CouponTypePos int32

const (
	CouponTypePos_CTP_Unknown        CouponTypePos = 0 // 白名单
	CouponTypePos_CTP_DiscountCoupon CouponTypePos = 2 // 折扣卷
	CouponTypePos_CTP_CashCoupon     CouponTypePos = 3 // 现金卷
)

// Enum value maps for CouponTypePos.
var (
	CouponTypePos_name = map[int32]string{
		0: "CTP_Unknown",
		2: "CTP_DiscountCoupon",
		3: "CTP_CashCoupon",
	}
	CouponTypePos_value = map[string]int32{
		"CTP_Unknown":        0,
		"CTP_DiscountCoupon": 2,
		"CTP_CashCoupon":     3,
	}
)

func (x CouponTypePos) Enum() *CouponTypePos {
	p := new(CouponTypePos)
	*p = x
	return p
}

func (x CouponTypePos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponTypePos) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[1].Descriptor()
}

func (CouponTypePos) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[1]
}

func (x CouponTypePos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponTypePos.Descriptor instead.
func (CouponTypePos) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{1}
}

type VehicleType int32

const (
	VehicleType_Unknown       VehicleType = 0 //
	VehicleType_Bicycle       VehicleType = 1 // 电动单车
	VehicleType_Car           VehicleType = 2 // 电动小汽车
	VehicleType_BicycleAndCar VehicleType = 3 // 两者都有
)

// Enum value maps for VehicleType.
var (
	VehicleType_name = map[int32]string{
		0: "Unknown",
		1: "Bicycle",
		2: "Car",
		3: "BicycleAndCar",
	}
	VehicleType_value = map[string]int32{
		"Unknown":       0,
		"Bicycle":       1,
		"Car":           2,
		"BicycleAndCar": 3,
	}
)

func (x VehicleType) Enum() *VehicleType {
	p := new(VehicleType)
	*p = x
	return p
}

func (x VehicleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleType) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[2].Descriptor()
}

func (VehicleType) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[2]
}

func (x VehicleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleType.Descriptor instead.
func (VehicleType) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{2}
}

type EvseType int32

const (
	EvseType_EvseTypeUnknown EvseType = 0 //未知
	EvseType_EvseTypeDC      EvseType = 1 //汽车交流
	EvseType_EvseTypeAC      EvseType = 2 //汽车直流
)

// Enum value maps for EvseType.
var (
	EvseType_name = map[int32]string{
		0: "EvseTypeUnknown",
		1: "EvseTypeDC",
		2: "EvseTypeAC",
	}
	EvseType_value = map[string]int32{
		"EvseTypeUnknown": 0,
		"EvseTypeDC":      1,
		"EvseTypeAC":      2,
	}
)

func (x EvseType) Enum() *EvseType {
	p := new(EvseType)
	*p = x
	return p
}

func (x EvseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseType) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[3].Descriptor()
}

func (EvseType) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[3]
}

func (x EvseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseType.Descriptor instead.
func (EvseType) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{3}
}

type EvseComponentPOS int32

const (
	EvseComponentPOS_ECP_ScheduleTimeCharging EvseComponentPOS = 0  // 定时充电
	EvseComponentPOS_ECP_FeeDetail            EvseComponentPOS = 32 //支持分段计费明细
)

// Enum value maps for EvseComponentPOS.
var (
	EvseComponentPOS_name = map[int32]string{
		0:  "ECP_ScheduleTimeCharging",
		32: "ECP_FeeDetail",
	}
	EvseComponentPOS_value = map[string]int32{
		"ECP_ScheduleTimeCharging": 0,
		"ECP_FeeDetail":            32,
	}
)

func (x EvseComponentPOS) Enum() *EvseComponentPOS {
	p := new(EvseComponentPOS)
	*p = x
	return p
}

func (x EvseComponentPOS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvseComponentPOS) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[4].Descriptor()
}

func (EvseComponentPOS) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[4]
}

func (x EvseComponentPOS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvseComponentPOS.Descriptor instead.
func (EvseComponentPOS) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{4}
}

type IdTokenEnumType int32

const (
	IdTokenEnumType_ITE_Central         IdTokenEnumType = 0 // A centrally, in the CSMS (or other server) generated id (for example used for a remotely started transaction that is activated by SMS). No format defined, might be a UUID.
	IdTokenEnumType_ITE_eMAID           IdTokenEnumType = 1 // Electro-mobility account id as defined in ISO 15118
	IdTokenEnumType_ITE_ISO14443        IdTokenEnumType = 2 // ISO 14443 UID of RFID card. It is represented as an array of 4 or 7 bytes in hexadecimal representation.
	IdTokenEnumType_ITE_ISO15693        IdTokenEnumType = 3 // ISO 15693 UID of RFID card. It is represented as an array of 8 bytes in hexadecimal representation.
	IdTokenEnumType_ITE_KeyCode         IdTokenEnumType = 4 // User use a private key-code to authorize a charging transaction. For example: Pin-code.
	IdTokenEnumType_ITE_Local           IdTokenEnumType = 5 // A locally generated id (e.g. internal id created by the Charging Station). No format defined, might be a UUID
	IdTokenEnumType_ITE_MacAddress      IdTokenEnumType = 6
	IdTokenEnumType_ITE_NoAuthorization IdTokenEnumType = 7 // Transaction is started and no authorization possible. Charging Station only has a start button or mechanical key etc. IdToken field SHALL be left empty.
)

// Enum value maps for IdTokenEnumType.
var (
	IdTokenEnumType_name = map[int32]string{
		0: "ITE_Central",
		1: "ITE_eMAID",
		2: "ITE_ISO14443",
		3: "ITE_ISO15693",
		4: "ITE_KeyCode",
		5: "ITE_Local",
		6: "ITE_MacAddress",
		7: "ITE_NoAuthorization",
	}
	IdTokenEnumType_value = map[string]int32{
		"ITE_Central":         0,
		"ITE_eMAID":           1,
		"ITE_ISO14443":        2,
		"ITE_ISO15693":        3,
		"ITE_KeyCode":         4,
		"ITE_Local":           5,
		"ITE_MacAddress":      6,
		"ITE_NoAuthorization": 7,
	}
)

func (x IdTokenEnumType) Enum() *IdTokenEnumType {
	p := new(IdTokenEnumType)
	*p = x
	return p
}

func (x IdTokenEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdTokenEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[5].Descriptor()
}

func (IdTokenEnumType) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[5]
}

func (x IdTokenEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdTokenEnumType.Descriptor instead.
func (IdTokenEnumType) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{5}
}

//*
// AuthorizationStatusEnumType 鉴权状态
type AuthorizationStatusEnumType int32

const (
	AuthorizationStatusEnumType_AS_Accepted           AuthorizationStatusEnumType = 0  //鉴权通过，允许用户充电
	AuthorizationStatusEnumType_AS_Blocked            AuthorizationStatusEnumType = 1  //鉴权被挡住，不允许充电
	AuthorizationStatusEnumType_AS_Expired            AuthorizationStatusEnumType = 2  //账户过期，不允许充电
	AuthorizationStatusEnumType_AS_Invalid            AuthorizationStatusEnumType = 3  //账户无法识别，无效，不允许充电
	AuthorizationStatusEnumType_AS_ConcurrentTx       AuthorizationStatusEnumType = 4  //账户有未结算的订单，不能同时开启多个订单，不允许充电
	AuthorizationStatusEnumType_AS_Insufficient       AuthorizationStatusEnumType = 5  //账户余额不足，不允许充电
	AuthorizationStatusEnumType_AS_PasswordError      AuthorizationStatusEnumType = 6  //用户密码错误
	AuthorizationStatusEnumType_AS_SystemError        AuthorizationStatusEnumType = 7  //系统错误
	AuthorizationStatusEnumType_AS_NoCredit           AuthorizationStatusEnumType = 8  // 信用额度不足
	AuthorizationStatusEnumType_AS_NotAllowedTypeEVSE AuthorizationStatusEnumType = 9  // 不可在此设备充电，Identifier is valid, but not allowed to charge at this type of EVSE.
	AuthorizationStatusEnumType_AS_NotAtThisLocation  AuthorizationStatusEnumType = 10 // 不可在此站充电
	AuthorizationStatusEnumType_AS_NotAtThisTime      AuthorizationStatusEnumType = 11 // 不可在此时充电
	AuthorizationStatusEnumType_AS_Unknown            AuthorizationStatusEnumType = 99 // 未知
)

// Enum value maps for AuthorizationStatusEnumType.
var (
	AuthorizationStatusEnumType_name = map[int32]string{
		0:  "AS_Accepted",
		1:  "AS_Blocked",
		2:  "AS_Expired",
		3:  "AS_Invalid",
		4:  "AS_ConcurrentTx",
		5:  "AS_Insufficient",
		6:  "AS_PasswordError",
		7:  "AS_SystemError",
		8:  "AS_NoCredit",
		9:  "AS_NotAllowedTypeEVSE",
		10: "AS_NotAtThisLocation",
		11: "AS_NotAtThisTime",
		99: "AS_Unknown",
	}
	AuthorizationStatusEnumType_value = map[string]int32{
		"AS_Accepted":           0,
		"AS_Blocked":            1,
		"AS_Expired":            2,
		"AS_Invalid":            3,
		"AS_ConcurrentTx":       4,
		"AS_Insufficient":       5,
		"AS_PasswordError":      6,
		"AS_SystemError":        7,
		"AS_NoCredit":           8,
		"AS_NotAllowedTypeEVSE": 9,
		"AS_NotAtThisLocation":  10,
		"AS_NotAtThisTime":      11,
		"AS_Unknown":            99,
	}
)

func (x AuthorizationStatusEnumType) Enum() *AuthorizationStatusEnumType {
	p := new(AuthorizationStatusEnumType)
	*p = x
	return p
}

func (x AuthorizationStatusEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationStatusEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[6].Descriptor()
}

func (AuthorizationStatusEnumType) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[6]
}

func (x AuthorizationStatusEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationStatusEnumType.Descriptor instead.
func (AuthorizationStatusEnumType) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{6}
}

type ReserveNowResp_Status int32

const (
	ReserveNowResp_Accepted    ReserveNowResp_Status = 0 //接受
	ReserveNowResp_Faulted     ReserveNowResp_Status = 1 //未预约成功，枪故障
	ReserveNowResp_Occupied    ReserveNowResp_Status = 2 //未预约成功，枪被占用
	ReserveNowResp_Rejected    ReserveNowResp_Status = 3 //未预约成功，设备不支持预约功能
	ReserveNowResp_Unavailable ReserveNowResp_Status = 4 //未预约成功，枪不可用
)

// Enum value maps for ReserveNowResp_Status.
var (
	ReserveNowResp_Status_name = map[int32]string{
		0: "Accepted",
		1: "Faulted",
		2: "Occupied",
		3: "Rejected",
		4: "Unavailable",
	}
	ReserveNowResp_Status_value = map[string]int32{
		"Accepted":    0,
		"Faulted":     1,
		"Occupied":    2,
		"Rejected":    3,
		"Unavailable": 4,
	}
)

func (x ReserveNowResp_Status) Enum() *ReserveNowResp_Status {
	p := new(ReserveNowResp_Status)
	*p = x
	return p
}

func (x ReserveNowResp_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReserveNowResp_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[7].Descriptor()
}

func (ReserveNowResp_Status) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[7]
}

func (x ReserveNowResp_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReserveNowResp_Status.Descriptor instead.
func (ReserveNowResp_Status) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{116, 0}
}

type CancelReservationResp_Status int32

const (
	CancelReservationResp_Accepted CancelReservationResp_Status = 0 //接受
	CancelReservationResp_Rejected CancelReservationResp_Status = 1 //未取消预约成功
)

// Enum value maps for CancelReservationResp_Status.
var (
	CancelReservationResp_Status_name = map[int32]string{
		0: "Accepted",
		1: "Rejected",
	}
	CancelReservationResp_Status_value = map[string]int32{
		"Accepted": 0,
		"Rejected": 1,
	}
)

func (x CancelReservationResp_Status) Enum() *CancelReservationResp_Status {
	p := new(CancelReservationResp_Status)
	*p = x
	return p
}

func (x CancelReservationResp_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelReservationResp_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_coregw_proto_enumTypes[8].Descriptor()
}

func (CancelReservationResp_Status) Type() protoreflect.EnumType {
	return &file_coregw_proto_enumTypes[8]
}

func (x CancelReservationResp_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelReservationResp_Status.Descriptor instead.
func (CancelReservationResp_Status) EnumDescriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{118, 0}
}

//  core申请订单, api申请订单xa调用
type ApplyOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId          uint64         `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                               // 订单ID
	CustomerId       uint64         `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`                      // 客户ID
	ConnectorId      uint64         `protobuf:"varint,3,opt,name=connectorId,proto3" json:"connectorId,omitempty"`                                      // 枪头id
	Pin              string         `protobuf:"bytes,4,opt,name=pin,proto3" json:"pin,omitempty"`                                                       // pin
	AuthorizeMode    int32          `protobuf:"varint,5,opt,name=authorize_mode,json=authorizeMode,proto3" json:"authorize_mode,omitempty"`             // 授权模式(用户远程启动，刷卡启动..., 等同于charger.AuthorizationMode)
	AuthorizationId  string         `protobuf:"bytes,6,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`        // 授权id(根据授权模式来定，例如：authorize_mode=用户远程启动，authorize_id=customer_id)
	PayMode          common.PayMode `protobuf:"varint,7,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`           // 支付模式
	PaymentChannel   string         `protobuf:"bytes,8,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`           // 支付渠道
	ServiceMode      int32          `protobuf:"varint,9,opt,name=service_mode,json=serviceMode,proto3" json:"service_mode,omitempty"`                   // 启动充电的模式
	AllowedKwh       float64        `protobuf:"fixed64,10,opt,name=allowed_kwh,json=allowedKwh,proto3" json:"allowed_kwh,omitempty"`                    // 最大充电电量，最大150度电，既150.00
	AllowedMinute    int32          `protobuf:"varint,11,opt,name=allowed_minute,json=allowedMinute,proto3" json:"allowed_minute,omitempty"`            // 最大充电时间，默认24小时，既1440分钟
	IsPrepay         bool           `protobuf:"varint,12,opt,name=is_prepay,json=isPrepay,proto3" json:"is_prepay,omitempty"`                           // 是否预付费
	Prepayment       float64        `protobuf:"fixed64,13,opt,name=prepayment,proto3" json:"prepayment,omitempty"`                                      // 预付充电费用(元)
	TariffId         uint64         `protobuf:"varint,14,opt,name=tariff_id,json=tariffId,proto3" json:"tariff_id,omitempty"`                           // 计费模版id
	CouponType       int32          `protobuf:"varint,15,opt,name=coupon_type,json=couponType,proto3" json:"coupon_type,omitempty"`                     // 优惠类型(只有现金券或者折扣券两种，参考CouponTypePos)
	CouponValue      float64        `protobuf:"fixed64,16,opt,name=coupon_value,json=couponValue,proto3" json:"coupon_value,omitempty"`                 // 优惠券信息,根据coupon_type来解析此值，分别表示金额或者折扣两种
	ScheduleTime     int32          `protobuf:"varint,17,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`               // 定时充电时间戳(秒), 0表示即时充电
	Check            bool           `protobuf:"varint,18,opt,name=check,proto3" json:"check,omitempty"`                                                 // 检查枪状态，如果在启动充电的时候就要检查枪的状态，否则不需要检查，可直接创建订单
	NeedConfirm      bool           `protobuf:"varint,19,opt,name=need_confirm,json=needConfirm,proto3" json:"need_confirm,omitempty"`                  //是否需要外部系统对订单做一次确认,一般用于互联互通
	NeedIntervalPush bool           `protobuf:"varint,20,opt,name=need_interval_push,json=needIntervalPush,proto3" json:"need_interval_push,omitempty"` //是否需要定期推送到第三方系统
	PreFrozenAmount  int32          `protobuf:"varint,21,opt,name=pre_frozen_amount,json=preFrozenAmount,proto3" json:"pre_frozen_amount,omitempty"`    // 预冻结金额，单位分
}

func (x *ApplyOrderReq) Reset() {
	*x = ApplyOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrderReq) ProtoMessage() {}

func (x *ApplyOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrderReq.ProtoReflect.Descriptor instead.
func (*ApplyOrderReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyOrderReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ApplyOrderReq) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *ApplyOrderReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *ApplyOrderReq) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *ApplyOrderReq) GetAuthorizeMode() int32 {
	if x != nil {
		return x.AuthorizeMode
	}
	return 0
}

func (x *ApplyOrderReq) GetAuthorizationId() string {
	if x != nil {
		return x.AuthorizationId
	}
	return ""
}

func (x *ApplyOrderReq) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *ApplyOrderReq) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *ApplyOrderReq) GetServiceMode() int32 {
	if x != nil {
		return x.ServiceMode
	}
	return 0
}

func (x *ApplyOrderReq) GetAllowedKwh() float64 {
	if x != nil {
		return x.AllowedKwh
	}
	return 0
}

func (x *ApplyOrderReq) GetAllowedMinute() int32 {
	if x != nil {
		return x.AllowedMinute
	}
	return 0
}

func (x *ApplyOrderReq) GetIsPrepay() bool {
	if x != nil {
		return x.IsPrepay
	}
	return false
}

func (x *ApplyOrderReq) GetPrepayment() float64 {
	if x != nil {
		return x.Prepayment
	}
	return 0
}

func (x *ApplyOrderReq) GetTariffId() uint64 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *ApplyOrderReq) GetCouponType() int32 {
	if x != nil {
		return x.CouponType
	}
	return 0
}

func (x *ApplyOrderReq) GetCouponValue() float64 {
	if x != nil {
		return x.CouponValue
	}
	return 0
}

func (x *ApplyOrderReq) GetScheduleTime() int32 {
	if x != nil {
		return x.ScheduleTime
	}
	return 0
}

func (x *ApplyOrderReq) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

func (x *ApplyOrderReq) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *ApplyOrderReq) GetNeedIntervalPush() bool {
	if x != nil {
		return x.NeedIntervalPush
	}
	return false
}

func (x *ApplyOrderReq) GetPreFrozenAmount() int32 {
	if x != nil {
		return x.PreFrozenAmount
	}
	return 0
}

type ApplyOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"` // 订单信息
}

func (x *ApplyOrderResp) Reset() {
	*x = ApplyOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOrderResp) ProtoMessage() {}

func (x *ApplyOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOrderResp.ProtoReflect.Descriptor instead.
func (*ApplyOrderResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyOrderResp) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// 设置订单支付
type SetOrderPayStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   uint64  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`       // 订单ID
	PayStatus int32   `protobuf:"varint,2,opt,name=pay_status,json=payStatus,proto3" json:"pay_status,omitempty"` // 支付状态 (具体值参考coregw.KindOrderPayState)
	PayTime   int64   `protobuf:"varint,3,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`       // 支付时间
	Balance   float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`                     // 余额（后付费在支付的时候，填写支付后余额到订单）
	Remark    string  `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`                         // 备注
}

func (x *SetOrderPayStatusReq) Reset() {
	*x = SetOrderPayStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderPayStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderPayStatusReq) ProtoMessage() {}

func (x *SetOrderPayStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderPayStatusReq.ProtoReflect.Descriptor instead.
func (*SetOrderPayStatusReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{2}
}

func (x *SetOrderPayStatusReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SetOrderPayStatusReq) GetPayStatus() int32 {
	if x != nil {
		return x.PayStatus
	}
	return 0
}

func (x *SetOrderPayStatusReq) GetPayTime() int64 {
	if x != nil {
		return x.PayTime
	}
	return 0
}

func (x *SetOrderPayStatusReq) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SetOrderPayStatusReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type SetOrderPayStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOrderPayStatusResp) Reset() {
	*x = SetOrderPayStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderPayStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderPayStatusResp) ProtoMessage() {}

func (x *SetOrderPayStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderPayStatusResp.ProtoReflect.Descriptor instead.
func (*SetOrderPayStatusResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{3}
}

type SetOrderRefundStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId      uint64  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	RefundStatus int32   `protobuf:"varint,2,opt,name=refund_status,json=refundStatus,proto3" json:"refund_status,omitempty"`
	Balance      float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// int64 refund_time = 4;
	Remark string `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *SetOrderRefundStatusReq) Reset() {
	*x = SetOrderRefundStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderRefundStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderRefundStatusReq) ProtoMessage() {}

func (x *SetOrderRefundStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderRefundStatusReq.ProtoReflect.Descriptor instead.
func (*SetOrderRefundStatusReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{4}
}

func (x *SetOrderRefundStatusReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SetOrderRefundStatusReq) GetRefundStatus() int32 {
	if x != nil {
		return x.RefundStatus
	}
	return 0
}

func (x *SetOrderRefundStatusReq) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SetOrderRefundStatusReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type SetOrderRefundStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOrderRefundStatusResp) Reset() {
	*x = SetOrderRefundStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderRefundStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderRefundStatusResp) ProtoMessage() {}

func (x *SetOrderRefundStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderRefundStatusResp.ProtoReflect.Descriptor instead.
func (*SetOrderRefundStatusResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{5}
}

type RebuildEsOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebuildEsOrderReq) Reset() {
	*x = RebuildEsOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildEsOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildEsOrderReq) ProtoMessage() {}

func (x *RebuildEsOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildEsOrderReq.ProtoReflect.Descriptor instead.
func (*RebuildEsOrderReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{6}
}

type RebuildEsOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebuildEsOrderResp) Reset() {
	*x = RebuildEsOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildEsOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildEsOrderResp) ProtoMessage() {}

func (x *RebuildEsOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildEsOrderResp.ProtoReflect.Descriptor instead.
func (*RebuildEsOrderResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{7}
}

type RebuildEsEvseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebuildEsEvseReq) Reset() {
	*x = RebuildEsEvseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildEsEvseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildEsEvseReq) ProtoMessage() {}

func (x *RebuildEsEvseReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildEsEvseReq.ProtoReflect.Descriptor instead.
func (*RebuildEsEvseReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{8}
}

type RebuildEsEvseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebuildEsEvseResp) Reset() {
	*x = RebuildEsEvseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebuildEsEvseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildEsEvseResp) ProtoMessage() {}

func (x *RebuildEsEvseResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildEsEvseResp.ProtoReflect.Descriptor instead.
func (*RebuildEsEvseResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{9}
}

type TriggerDeviceCMDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   int32  `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`       // 触发的设备命令
	ConnectorId uint64 `protobuf:"varint,2,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` // 枪头ID
}

func (x *TriggerDeviceCMDReq) Reset() {
	*x = TriggerDeviceCMDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDeviceCMDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDeviceCMDReq) ProtoMessage() {}

func (x *TriggerDeviceCMDReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDeviceCMDReq.ProtoReflect.Descriptor instead.
func (*TriggerDeviceCMDReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{10}
}

func (x *TriggerDeviceCMDReq) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *TriggerDeviceCMDReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

type TriggerDeviceCMDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerDeviceCMDResp) Reset() {
	*x = TriggerDeviceCMDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDeviceCMDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDeviceCMDResp) ProtoMessage() {}

func (x *TriggerDeviceCMDResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDeviceCMDResp.ProtoReflect.Descriptor instead.
func (*TriggerDeviceCMDResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{11}
}

type EditOrderDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                        // 订单id
	Electricity      float64 `protobuf:"fixed64,2,opt,name=electricity,proto3" json:"electricity,omitempty"`                                     // 电量
	TotalElecCost    float64 `protobuf:"fixed64,3,opt,name=total_elec_cost,json=totalElecCost,proto3" json:"total_elec_cost,omitempty"`          // 总电费
	TotalServiceCost float64 `protobuf:"fixed64,4,opt,name=total_service_cost,json=totalServiceCost,proto3" json:"total_service_cost,omitempty"` // 总服务费
	DiscountAmount   float64 `protobuf:"fixed64,5,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`         // 优化金额
	PayAmount        float64 `protobuf:"fixed64,6,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`                        // 支付金额
}

func (x *EditOrderDataReq) Reset() {
	*x = EditOrderDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditOrderDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditOrderDataReq) ProtoMessage() {}

func (x *EditOrderDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditOrderDataReq.ProtoReflect.Descriptor instead.
func (*EditOrderDataReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{12}
}

func (x *EditOrderDataReq) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *EditOrderDataReq) GetElectricity() float64 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *EditOrderDataReq) GetTotalElecCost() float64 {
	if x != nil {
		return x.TotalElecCost
	}
	return 0
}

func (x *EditOrderDataReq) GetTotalServiceCost() float64 {
	if x != nil {
		return x.TotalServiceCost
	}
	return 0
}

func (x *EditOrderDataReq) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *EditOrderDataReq) GetPayAmount() float64 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

type EditOrderDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EditOrderDataResp) Reset() {
	*x = EditOrderDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditOrderDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditOrderDataResp) ProtoMessage() {}

func (x *EditOrderDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditOrderDataResp.ProtoReflect.Descriptor instead.
func (*EditOrderDataResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{13}
}

type ManualOrderSettlementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                // 订单id
	Electricity      float64 `protobuf:"fixed64,2,opt,name=electricity,proto3" json:"electricity,omitempty"`                             // 电量
	TotalElecCost    float64 `protobuf:"fixed64,3,opt,name=totalElecCost,proto3" json:"totalElecCost,omitempty"`                         // 总电费
	TotalServiceCost float64 `protobuf:"fixed64,4,opt,name=totalServiceCost,proto3" json:"totalServiceCost,omitempty"`                   // 总服务费
	DiscountAmount   float64 `protobuf:"fixed64,5,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"` // 优化金额
	// int64   stopDate        = 5;    // 停止时间
	Reason int32 `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"` // 理由
}

func (x *ManualOrderSettlementReq) Reset() {
	*x = ManualOrderSettlementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualOrderSettlementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualOrderSettlementReq) ProtoMessage() {}

func (x *ManualOrderSettlementReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualOrderSettlementReq.ProtoReflect.Descriptor instead.
func (*ManualOrderSettlementReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{14}
}

func (x *ManualOrderSettlementReq) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ManualOrderSettlementReq) GetElectricity() float64 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *ManualOrderSettlementReq) GetTotalElecCost() float64 {
	if x != nil {
		return x.TotalElecCost
	}
	return 0
}

func (x *ManualOrderSettlementReq) GetTotalServiceCost() float64 {
	if x != nil {
		return x.TotalServiceCost
	}
	return 0
}

func (x *ManualOrderSettlementReq) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *ManualOrderSettlementReq) GetReason() int32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type ManualOrderSettlementResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManualOrderSettlementResp) Reset() {
	*x = ManualOrderSettlementResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualOrderSettlementResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualOrderSettlementResp) ProtoMessage() {}

func (x *ManualOrderSettlementResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualOrderSettlementResp.ProtoReflect.Descriptor instead.
func (*ManualOrderSettlementResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{15}
}

type SetOrderSettlementedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOrderSettlementedResp) Reset() {
	*x = SetOrderSettlementedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderSettlementedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderSettlementedResp) ProtoMessage() {}

func (x *SetOrderSettlementedResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderSettlementedResp.ProtoReflect.Descriptor instead.
func (*SetOrderSettlementedResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{16}
}

type OrderStateTimelineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ID     uint64 `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *OrderStateTimelineReq) Reset() {
	*x = OrderStateTimelineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStateTimelineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateTimelineReq) ProtoMessage() {}

func (x *OrderStateTimelineReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateTimelineReq.ProtoReflect.Descriptor instead.
func (*OrderStateTimelineReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{17}
}

func (x *OrderStateTimelineReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *OrderStateTimelineReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *OrderStateTimelineReq) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type OrderStateTimelineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRow int32                     `protobuf:"varint,1,opt,name=total_row,json=totalRow,proto3" json:"total_row,omitempty"`
	Rows     []*OrderStateTimelineData `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *OrderStateTimelineResp) Reset() {
	*x = OrderStateTimelineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStateTimelineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateTimelineResp) ProtoMessage() {}

func (x *OrderStateTimelineResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateTimelineResp.ProtoReflect.Descriptor instead.
func (*OrderStateTimelineResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{18}
}

func (x *OrderStateTimelineResp) GetTotalRow() int32 {
	if x != nil {
		return x.TotalRow
	}
	return 0
}

func (x *OrderStateTimelineResp) GetRows() []*OrderStateTimelineData {
	if x != nil {
		return x.Rows
	}
	return nil
}

type OrderStateTimelineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"` //时间
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`  //内容
}

func (x *OrderStateTimelineData) Reset() {
	*x = OrderStateTimelineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStateTimelineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateTimelineData) ProtoMessage() {}

func (x *OrderStateTimelineData) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateTimelineData.ProtoReflect.Descriptor instead.
func (*OrderStateTimelineData) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{19}
}

func (x *OrderStateTimelineData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *OrderStateTimelineData) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ConnectorBindQRCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseId uint64   `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"` //设备ID
	Codes  []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`                  //自定义二维码编号
}

func (x *ConnectorBindQRCodeReq) Reset() {
	*x = ConnectorBindQRCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorBindQRCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorBindQRCodeReq) ProtoMessage() {}

func (x *ConnectorBindQRCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorBindQRCodeReq.ProtoReflect.Descriptor instead.
func (*ConnectorBindQRCodeReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectorBindQRCodeReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *ConnectorBindQRCodeReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type ConnectorBindQRCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectorBindQRCodeResp) Reset() {
	*x = ConnectorBindQRCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorBindQRCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorBindQRCodeResp) ProtoMessage() {}

func (x *ConnectorBindQRCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorBindQRCodeResp.ProtoReflect.Descriptor instead.
func (*ConnectorBindQRCodeResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{21}
}

// 启动充电
type RemoteStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId     uint64        `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单id
	PriceScheme *SetTariffReq `protobuf:"bytes,2,opt,name=priceScheme,proto3" json:"priceScheme,omitempty"`         // 计费模版
}

func (x *RemoteStartReq) Reset() {
	*x = RemoteStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStartReq) ProtoMessage() {}

func (x *RemoteStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStartReq.ProtoReflect.Descriptor instead.
func (*RemoteStartReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{22}
}

func (x *RemoteStartReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *RemoteStartReq) GetPriceScheme() *SetTariffReq {
	if x != nil {
		return x.PriceScheme
	}
	return nil
}

type RemoteStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"` // 订单信息
}

func (x *RemoteStartResp) Reset() {
	*x = RemoteStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStartResp) ProtoMessage() {}

func (x *RemoteStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStartResp.ProtoReflect.Descriptor instead.
func (*RemoteStartResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{23}
}

func (x *RemoteStartResp) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

// 停止充电
type RemoteStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"` // 平台交易id
}

func (x *RemoteStopReq) Reset() {
	*x = RemoteStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStopReq) ProtoMessage() {}

func (x *RemoteStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStopReq.ProtoReflect.Descriptor instead.
func (*RemoteStopReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{24}
}

func (x *RemoteStopReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type RemoteStopResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    uint64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                         //ID
	StationName           string  `protobuf:"bytes,2,opt,name=stationName,proto3" json:"stationName,omitempty"`                        //站点
	EvseID                uint64  `protobuf:"varint,3,opt,name=evseID,proto3" json:"evseID,omitempty"`                                 //设备ID
	ConnectorID           uint64  `protobuf:"varint,4,opt,name=connectorID,proto3" json:"connectorID,omitempty"`                       //枪头ID
	RecordID              string  `protobuf:"bytes,5,opt,name=recordID,proto3" json:"recordID,omitempty"`                              //硬件充电流水号
	State                 int32   `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`                                   //订单状态
	StateTime             uint32  `protobuf:"varint,7,opt,name=stateTime,proto3" json:"stateTime,omitempty"`                           //订单变更时间（时间戳）
	Pin                   string  `protobuf:"bytes,8,opt,name=pin,proto3" json:"pin,omitempty"`                                        //pin
	AuthorizationMode     int32   `protobuf:"varint,9,opt,name=authorizationMode,proto3" json:"authorizationMode,omitempty"`           //授权启动方式
	AuthorizationID       string  `protobuf:"bytes,10,opt,name=authorizationID,proto3" json:"authorizationID,omitempty"`               //授权用户的ID
	ServiceMode           int32   `protobuf:"varint,11,opt,name=serviceMode,proto3" json:"serviceMode,omitempty"`                      //充电服务模式
	IsOfflineSync         int32   `protobuf:"varint,12,opt,name=isOfflineSync,proto3" json:"isOfflineSync,omitempty"`                  //是否离线订单
	TotalCost             float64 `protobuf:"fixed64,13,opt,name=totalCost,proto3" json:"totalCost,omitempty"`                         //总费用
	TotalElectricity      float64 `protobuf:"fixed64,14,opt,name=totalElectricity,proto3" json:"totalElectricity,omitempty"`           //总电量
	SharpElectricity      float64 `protobuf:"fixed64,15,opt,name=sharpElectricity,proto3" json:"sharpElectricity,omitempty"`           //“尖”时刻电量
	PeakElectricity       float64 `protobuf:"fixed64,16,opt,name=peakElectricity,proto3" json:"peakElectricity,omitempty"`             //“峰”时刻电量
	FlatElectricity       float64 `protobuf:"fixed64,17,opt,name=flatElectricity,proto3" json:"flatElectricity,omitempty"`             //“平”时刻电量
	ValleyElectricity     float64 `protobuf:"fixed64,18,opt,name=valleyElectricity,proto3" json:"valleyElectricity,omitempty"`         //“谷”时刻电量
	SharpElectricityCost  float64 `protobuf:"fixed64,19,opt,name=sharpElectricityCost,proto3" json:"sharpElectricityCost,omitempty"`   //“尖”时刻电费
	PeakElectricityCost   float64 `protobuf:"fixed64,20,opt,name=peakElectricityCost,proto3" json:"peakElectricityCost,omitempty"`     //“峰”时刻电费
	FlatElectricityCost   float64 `protobuf:"fixed64,21,opt,name=flatElectricityCost,proto3" json:"flatElectricityCost,omitempty"`     //“平”时刻电费
	ValleyElectricityCost float64 `protobuf:"fixed64,22,opt,name=valleyElectricityCost,proto3" json:"valleyElectricityCost,omitempty"` //“谷”时刻电费
	SharpServicesCost     float64 `protobuf:"fixed64,23,opt,name=sharpServicesCost,proto3" json:"sharpServicesCost,omitempty"`         //“尖”时刻服务费
	PeakServicesCost      float64 `protobuf:"fixed64,24,opt,name=peakServicesCost,proto3" json:"peakServicesCost,omitempty"`           //“峰”时刻服务费
	FlatServicesCost      float64 `protobuf:"fixed64,25,opt,name=flatServicesCost,proto3" json:"flatServicesCost,omitempty"`           //“平”时刻服务费
	ValleyServicesCost    float64 `protobuf:"fixed64,26,opt,name=valleyServicesCost,proto3" json:"valleyServicesCost,omitempty"`       //“谷”时刻服务费
	StartElectricity      float64 `protobuf:"fixed64,27,opt,name=startElectricity,proto3" json:"startElectricity,omitempty"`           //启动时的电量
	StopElectricity       float64 `protobuf:"fixed64,28,opt,name=stopElectricity,proto3" json:"stopElectricity,omitempty"`             //结束时的电量
	StopReason            string  `protobuf:"bytes,29,opt,name=stopReason,proto3" json:"stopReason,omitempty"`                         //停止原因
	ChargeStartTime       int32   `protobuf:"varint,30,opt,name=chargeStartTime,proto3" json:"chargeStartTime,omitempty"`              //开始时间
	ChargeStopTime        int32   `protobuf:"varint,31,opt,name=chargeStopTime,proto3" json:"chargeStopTime,omitempty"`                //结束时间
	EndTime               int32   `protobuf:"varint,32,opt,name=endTime,proto3" json:"endTime,omitempty"`                              //订单结束时间
	PriceSchemeID         uint64  `protobuf:"varint,33,opt,name=priceSchemeID,proto3" json:"priceSchemeID,omitempty"`                  //计费模板ID
}

func (x *RemoteStopResp) Reset() {
	*x = RemoteStopResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStopResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStopResp) ProtoMessage() {}

func (x *RemoteStopResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStopResp.ProtoReflect.Descriptor instead.
func (*RemoteStopResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{25}
}

func (x *RemoteStopResp) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RemoteStopResp) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

func (x *RemoteStopResp) GetEvseID() uint64 {
	if x != nil {
		return x.EvseID
	}
	return 0
}

func (x *RemoteStopResp) GetConnectorID() uint64 {
	if x != nil {
		return x.ConnectorID
	}
	return 0
}

func (x *RemoteStopResp) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *RemoteStopResp) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *RemoteStopResp) GetStateTime() uint32 {
	if x != nil {
		return x.StateTime
	}
	return 0
}

func (x *RemoteStopResp) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *RemoteStopResp) GetAuthorizationMode() int32 {
	if x != nil {
		return x.AuthorizationMode
	}
	return 0
}

func (x *RemoteStopResp) GetAuthorizationID() string {
	if x != nil {
		return x.AuthorizationID
	}
	return ""
}

func (x *RemoteStopResp) GetServiceMode() int32 {
	if x != nil {
		return x.ServiceMode
	}
	return 0
}

func (x *RemoteStopResp) GetIsOfflineSync() int32 {
	if x != nil {
		return x.IsOfflineSync
	}
	return 0
}

func (x *RemoteStopResp) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *RemoteStopResp) GetTotalElectricity() float64 {
	if x != nil {
		return x.TotalElectricity
	}
	return 0
}

func (x *RemoteStopResp) GetSharpElectricity() float64 {
	if x != nil {
		return x.SharpElectricity
	}
	return 0
}

func (x *RemoteStopResp) GetPeakElectricity() float64 {
	if x != nil {
		return x.PeakElectricity
	}
	return 0
}

func (x *RemoteStopResp) GetFlatElectricity() float64 {
	if x != nil {
		return x.FlatElectricity
	}
	return 0
}

func (x *RemoteStopResp) GetValleyElectricity() float64 {
	if x != nil {
		return x.ValleyElectricity
	}
	return 0
}

func (x *RemoteStopResp) GetSharpElectricityCost() float64 {
	if x != nil {
		return x.SharpElectricityCost
	}
	return 0
}

func (x *RemoteStopResp) GetPeakElectricityCost() float64 {
	if x != nil {
		return x.PeakElectricityCost
	}
	return 0
}

func (x *RemoteStopResp) GetFlatElectricityCost() float64 {
	if x != nil {
		return x.FlatElectricityCost
	}
	return 0
}

func (x *RemoteStopResp) GetValleyElectricityCost() float64 {
	if x != nil {
		return x.ValleyElectricityCost
	}
	return 0
}

func (x *RemoteStopResp) GetSharpServicesCost() float64 {
	if x != nil {
		return x.SharpServicesCost
	}
	return 0
}

func (x *RemoteStopResp) GetPeakServicesCost() float64 {
	if x != nil {
		return x.PeakServicesCost
	}
	return 0
}

func (x *RemoteStopResp) GetFlatServicesCost() float64 {
	if x != nil {
		return x.FlatServicesCost
	}
	return 0
}

func (x *RemoteStopResp) GetValleyServicesCost() float64 {
	if x != nil {
		return x.ValleyServicesCost
	}
	return 0
}

func (x *RemoteStopResp) GetStartElectricity() float64 {
	if x != nil {
		return x.StartElectricity
	}
	return 0
}

func (x *RemoteStopResp) GetStopElectricity() float64 {
	if x != nil {
		return x.StopElectricity
	}
	return 0
}

func (x *RemoteStopResp) GetStopReason() string {
	if x != nil {
		return x.StopReason
	}
	return ""
}

func (x *RemoteStopResp) GetChargeStartTime() int32 {
	if x != nil {
		return x.ChargeStartTime
	}
	return 0
}

func (x *RemoteStopResp) GetChargeStopTime() int32 {
	if x != nil {
		return x.ChargeStopTime
	}
	return 0
}

func (x *RemoteStopResp) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RemoteStopResp) GetPriceSchemeID() uint64 {
	if x != nil {
		return x.PriceSchemeID
	}
	return 0
}

// 设置计费模版
type SetTariffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tariffid        uint64           `protobuf:"varint,1,opt,name=tariffid,proto3" json:"tariffid,omitempty"`                                        // 计费模版版本id
	Description     string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                   // 描述
	Chargetariffs   []*TariffCharge  `protobuf:"bytes,3,rep,name=chargetariffs,proto3" json:"chargetariffs,omitempty"`                               //
	Timetariffs     []*TariffTime    `protobuf:"bytes,4,rep,name=timetariffs,proto3" json:"timetariffs,omitempty"`                                   //
	Parkingtariffs  []*TariffParking `protobuf:"bytes,5,rep,name=parkingtariffs,proto3" json:"parkingtariffs,omitempty"`                             //
	Unitprice       int32            `protobuf:"varint,7,opt,name=unitprice,proto3" json:"unitprice,omitempty"`                                      //计费单价，分辨率RMB 0.1分。
	FreeChargerTime int32            `protobuf:"varint,8,opt,name=free_charger_time,json=freeChargerTime,proto3" json:"free_charger_time,omitempty"` //免费充电时间
}

func (x *SetTariffReq) Reset() {
	*x = SetTariffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTariffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTariffReq) ProtoMessage() {}

func (x *SetTariffReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTariffReq.ProtoReflect.Descriptor instead.
func (*SetTariffReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{26}
}

func (x *SetTariffReq) GetTariffid() uint64 {
	if x != nil {
		return x.Tariffid
	}
	return 0
}

func (x *SetTariffReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetTariffReq) GetChargetariffs() []*TariffCharge {
	if x != nil {
		return x.Chargetariffs
	}
	return nil
}

func (x *SetTariffReq) GetTimetariffs() []*TariffTime {
	if x != nil {
		return x.Timetariffs
	}
	return nil
}

func (x *SetTariffReq) GetParkingtariffs() []*TariffParking {
	if x != nil {
		return x.Parkingtariffs
	}
	return nil
}

func (x *SetTariffReq) GetUnitprice() int32 {
	if x != nil {
		return x.Unitprice
	}
	return 0
}

func (x *SetTariffReq) GetFreeChargerTime() int32 {
	if x != nil {
		return x.FreeChargerTime
	}
	return 0
}

type SetPriceSchemeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPriceSchemeResp) Reset() {
	*x = SetPriceSchemeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPriceSchemeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPriceSchemeResp) ProtoMessage() {}

func (x *SetPriceSchemeResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPriceSchemeResp.ProtoReflect.Descriptor instead.
func (*SetPriceSchemeResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{27}
}

// 获取离线订单请求
type GetTransactionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorID uint64 `protobuf:"varint,1,opt,name=connectorID,proto3" json:"connectorID,omitempty"` // 枪头ID
	StartTime   int32  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`     // 开始时间
	EndTime     int32  `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`         // 结束时间
}

func (x *GetTransactionsReq) Reset() {
	*x = GetTransactionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsReq) ProtoMessage() {}

func (x *GetTransactionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsReq.ProtoReflect.Descriptor instead.
func (*GetTransactionsReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{28}
}

func (x *GetTransactionsReq) GetConnectorID() uint64 {
	if x != nil {
		return x.ConnectorID
	}
	return 0
}

func (x *GetTransactionsReq) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTransactionsReq) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetTransactionsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"` // 总计数
}

func (x *GetTransactionsResp) Reset() {
	*x = GetTransactionsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsResp) ProtoMessage() {}

func (x *GetTransactionsResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsResp.ProtoReflect.Descriptor instead.
func (*GetTransactionsResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{29}
}

func (x *GetTransactionsResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 设备绑定站点
type BindEvseStationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationID uint64 `protobuf:"varint,1,opt,name=stationID,proto3" json:"stationID,omitempty"` // 站点id
	ManagerID uint64 `protobuf:"varint,2,opt,name=managerID,proto3" json:"managerID,omitempty"` // 管理员id
}

func (x *BindEvseStationReq) Reset() {
	*x = BindEvseStationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindEvseStationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindEvseStationReq) ProtoMessage() {}

func (x *BindEvseStationReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindEvseStationReq.ProtoReflect.Descriptor instead.
func (*BindEvseStationReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{30}
}

func (x *BindEvseStationReq) GetStationID() uint64 {
	if x != nil {
		return x.StationID
	}
	return 0
}

func (x *BindEvseStationReq) GetManagerID() uint64 {
	if x != nil {
		return x.ManagerID
	}
	return 0
}

type BindEvseStationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindEvseStationResp) Reset() {
	*x = BindEvseStationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindEvseStationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindEvseStationResp) ProtoMessage() {}

func (x *BindEvseStationResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindEvseStationResp.ProtoReflect.Descriptor instead.
func (*BindEvseStationResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{31}
}

// 获取设备信息
type EvseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseID uint64 `protobuf:"varint,1,opt,name=evseID,proto3" json:"evseID,omitempty"` // 设备id
}

func (x *EvseReq) Reset() {
	*x = EvseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseReq) ProtoMessage() {}

func (x *EvseReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseReq.ProtoReflect.Descriptor instead.
func (*EvseReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{32}
}

func (x *EvseReq) GetEvseID() uint64 {
	if x != nil {
		return x.EvseID
	}
	return 0
}

type EvseWithTopicPrefixAndUUIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicPrefix string `protobuf:"bytes,1,opt,name=topic_prefix,json=topicPrefix,proto3" json:"topic_prefix,omitempty"` //topic前缀
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                  //uuid
}

func (x *EvseWithTopicPrefixAndUUIDReq) Reset() {
	*x = EvseWithTopicPrefixAndUUIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseWithTopicPrefixAndUUIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseWithTopicPrefixAndUUIDReq) ProtoMessage() {}

func (x *EvseWithTopicPrefixAndUUIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseWithTopicPrefixAndUUIDReq.ProtoReflect.Descriptor instead.
func (*EvseWithTopicPrefixAndUUIDReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{33}
}

func (x *EvseWithTopicPrefixAndUUIDReq) GetTopicPrefix() string {
	if x != nil {
		return x.TopicPrefix
	}
	return ""
}

func (x *EvseWithTopicPrefixAndUUIDReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type EvseByConnectorIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId uint64 `protobuf:"varint,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
}

func (x *EvseByConnectorIDReq) Reset() {
	*x = EvseByConnectorIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseByConnectorIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseByConnectorIDReq) ProtoMessage() {}

func (x *EvseByConnectorIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseByConnectorIDReq.ProtoReflect.Descriptor instead.
func (*EvseByConnectorIDReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{34}
}

func (x *EvseByConnectorIDReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

type EvseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse       *Evse        `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`             // 设备信息
	Connectors []*Connector `protobuf:"bytes,2,rep,name=connectors,proto3" json:"connectors,omitempty"` // 枪头信息
}

func (x *EvseResp) Reset() {
	*x = EvseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseResp) ProtoMessage() {}

func (x *EvseResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseResp.ProtoReflect.Descriptor instead.
func (*EvseResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{35}
}

func (x *EvseResp) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EvseResp) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

// 远程控制
type RemoteControlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function  string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Parameter string `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *RemoteControlReq) Reset() {
	*x = RemoteControlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteControlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteControlReq) ProtoMessage() {}

func (x *RemoteControlReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteControlReq.ProtoReflect.Descriptor instead.
func (*RemoteControlReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{36}
}

func (x *RemoteControlReq) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *RemoteControlReq) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

type RemoteControlResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RemoteControlResp) Reset() {
	*x = RemoteControlResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteControlResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteControlResp) ProtoMessage() {}

func (x *RemoteControlResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteControlResp.ProtoReflect.Descriptor instead.
func (*RemoteControlResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{37}
}

func (x *RemoteControlResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 获取设备诊断日志
type GetDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Retries       int32  `protobuf:"varint,2,opt,name=retries,proto3" json:"retries,omitempty"`
	RetryInterval int32  `protobuf:"varint,3,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`
	StartTime     int32  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int32  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *GetDiagnosticsReq) Reset() {
	*x = GetDiagnosticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticsReq) ProtoMessage() {}

func (x *GetDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*GetDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{38}
}

func (x *GetDiagnosticsReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetDiagnosticsReq) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *GetDiagnosticsReq) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *GetDiagnosticsReq) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetDiagnosticsReq) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetDiagnosticsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *GetDiagnosticsResp) Reset() {
	*x = GetDiagnosticsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticsResp) ProtoMessage() {}

func (x *GetDiagnosticsResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticsResp.ProtoReflect.Descriptor instead.
func (*GetDiagnosticsResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{39}
}

func (x *GetDiagnosticsResp) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 远程升级
type UpdateFirmwareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Checksum      string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Retries       int32  `protobuf:"varint,4,opt,name=retries,proto3" json:"retries,omitempty"`
	RetryDate     int32  `protobuf:"varint,5,opt,name=retryDate,proto3" json:"retryDate,omitempty"`
	RetryInterval int32  `protobuf:"varint,6,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`
	RequestId     int32  `protobuf:"varint,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateFirmwareReq) Reset() {
	*x = UpdateFirmwareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFirmwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirmwareReq) ProtoMessage() {}

func (x *UpdateFirmwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirmwareReq.ProtoReflect.Descriptor instead.
func (*UpdateFirmwareReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateFirmwareReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFirmwareReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateFirmwareReq) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *UpdateFirmwareReq) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *UpdateFirmwareReq) GetRetryDate() int32 {
	if x != nil {
		return x.RetryDate
	}
	return 0
}

func (x *UpdateFirmwareReq) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *UpdateFirmwareReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type UpdateFirmwareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateFirmwareResp) Reset() {
	*x = UpdateFirmwareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFirmwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirmwareResp) ProtoMessage() {}

func (x *UpdateFirmwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirmwareResp.ProtoReflect.Descriptor instead.
func (*UpdateFirmwareResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateFirmwareResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 设置配置
type ChangeConfigurationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Confs       map[string]string `protobuf:"bytes,1,rep,name=confs,proto3" json:"confs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConnectorId int32             `protobuf:"varint,2,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
}

func (x *ChangeConfigurationReq) Reset() {
	*x = ChangeConfigurationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConfigurationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigurationReq) ProtoMessage() {}

func (x *ChangeConfigurationReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigurationReq.ProtoReflect.Descriptor instead.
func (*ChangeConfigurationReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{42}
}

func (x *ChangeConfigurationReq) GetConfs() map[string]string {
	if x != nil {
		return x.Confs
	}
	return nil
}

func (x *ChangeConfigurationReq) GetConnectorId() int32 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

type ChangeConfigurationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChangeConfigurationResp) Reset() {
	*x = ChangeConfigurationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConfigurationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigurationResp) ProtoMessage() {}

func (x *ChangeConfigurationResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigurationResp.ProtoReflect.Descriptor instead.
func (*ChangeConfigurationResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{43}
}

func (x *ChangeConfigurationResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type MQTTMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic    string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Qos      int32  `protobuf:"varint,2,opt,name=qos,proto3" json:"qos,omitempty"`
	Retained bool   `protobuf:"varint,3,opt,name=retained,proto3" json:"retained,omitempty"`
	Evseid   string `protobuf:"bytes,4,opt,name=evseid,proto3" json:"evseid,omitempty"`
	Payload  []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MQTTMsgReq) Reset() {
	*x = MQTTMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTMsgReq) ProtoMessage() {}

func (x *MQTTMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTMsgReq.ProtoReflect.Descriptor instead.
func (*MQTTMsgReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{44}
}

func (x *MQTTMsgReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MQTTMsgReq) GetQos() int32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

func (x *MQTTMsgReq) GetRetained() bool {
	if x != nil {
		return x.Retained
	}
	return false
}

func (x *MQTTMsgReq) GetEvseid() string {
	if x != nil {
		return x.Evseid
	}
	return ""
}

func (x *MQTTMsgReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MQTTMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MQTTMsgResp) Reset() {
	*x = MQTTMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTMsgResp) ProtoMessage() {}

func (x *MQTTMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTMsgResp.ProtoReflect.Descriptor instead.
func (*MQTTMsgResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{45}
}

// 设备断网
type EvseDisconnectedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`  // 客户端ID
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"` // 原因
}

func (x *EvseDisconnectedReq) Reset() {
	*x = EvseDisconnectedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseDisconnectedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseDisconnectedReq) ProtoMessage() {}

func (x *EvseDisconnectedReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseDisconnectedReq.ProtoReflect.Descriptor instead.
func (*EvseDisconnectedReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{46}
}

func (x *EvseDisconnectedReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EvseDisconnectedReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type EvseDisconnectedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvseDisconnectedResp) Reset() {
	*x = EvseDisconnectedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseDisconnectedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseDisconnectedResp) ProtoMessage() {}

func (x *EvseDisconnectedResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseDisconnectedResp.ProtoReflect.Descriptor instead.
func (*EvseDisconnectedResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{47}
}

// 订单详情
type OrderInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"` // 平台ID
}

func (x *OrderInfoReq) Reset() {
	*x = OrderInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfoReq) ProtoMessage() {}

func (x *OrderInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfoReq.ProtoReflect.Descriptor instead.
func (*OrderInfoReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{48}
}

func (x *OrderInfoReq) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type OrderInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"` //  订单列表
}

func (x *OrderInfoResp) Reset() {
	*x = OrderInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfoResp) ProtoMessage() {}

func (x *OrderInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfoResp.ProtoReflect.Descriptor instead.
func (*OrderInfoResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{49}
}

func (x *OrderInfoResp) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                           // 平台ID
	Bills                  []*Bill    `protobuf:"bytes,2,rep,name=bills,proto3" json:"bills,omitempty"`                                      // 分时收费
	StationName            string     `protobuf:"bytes,3,opt,name=stationName,proto3" json:"stationName,omitempty"`                          // 站点
	Evse                   *Evse      `protobuf:"bytes,4,opt,name=evse,proto3" json:"evse,omitempty"`                                        // 设备信息
	Connector              *Connector `protobuf:"bytes,5,opt,name=connector,proto3" json:"connector,omitempty"`                              // 枪头信息
	RecordID               string     `protobuf:"bytes,6,opt,name=recordID,proto3" json:"recordID,omitempty"`                                // 硬件充电流水号
	State                  int32      `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`                                     // 订单状态
	Pin                    string     `protobuf:"bytes,8,opt,name=pin,proto3" json:"pin,omitempty"`                                          // pin
	OnlineState            int32      `protobuf:"varint,9,opt,name=onlineState,proto3" json:"onlineState,omitempty"`                         // 订单在枪头在线时候的状态，用于在枪头恢复网络时候恢复订单为离线前的状态
	AuthorizationMode      int32      `protobuf:"varint,10,opt,name=authorizationMode,proto3" json:"authorizationMode,omitempty"`            // 授权启动方式
	AuthorizationID        string     `protobuf:"bytes,11,opt,name=authorizationID,proto3" json:"authorizationID,omitempty"`                 // 授权用户的ID
	ServiceMode            int32      `protobuf:"varint,12,opt,name=serviceMode,proto3" json:"serviceMode,omitempty"`                        // 充电服务模式
	IsOfflineSync          int32      `protobuf:"varint,13,opt,name=isOfflineSync,proto3" json:"isOfflineSync,omitempty"`                    // 是否离线订单
	PayAmount              float64    `protobuf:"fixed64,14,opt,name=payAmount,proto3" json:"payAmount,omitempty"`                           // 支付金额 元
	TotalElecCost          float64    `protobuf:"fixed64,15,opt,name=totalElecCost,proto3" json:"totalElecCost,omitempty"`                   // 总电费 元
	TotalServiceCost       float64    `protobuf:"fixed64,16,opt,name=totalServiceCost,proto3" json:"totalServiceCost,omitempty"`             // 总服务费 元
	TotalCost              float64    `protobuf:"fixed64,17,opt,name=totalCost,proto3" json:"totalCost,omitempty"`                           // 总费用(应结费用) 元
	TotalElectricity       float64    `protobuf:"fixed64,18,opt,name=totalElectricity,proto3" json:"totalElectricity,omitempty"`             // 总电量
	SharpElectricity       float64    `protobuf:"fixed64,19,opt,name=sharpElectricity,proto3" json:"sharpElectricity,omitempty"`             // “尖”时刻电量
	PeakElectricity        float64    `protobuf:"fixed64,20,opt,name=peakElectricity,proto3" json:"peakElectricity,omitempty"`               // “峰”时刻电量
	FlatElectricity        float64    `protobuf:"fixed64,21,opt,name=flatElectricity,proto3" json:"flatElectricity,omitempty"`               // “平”时刻电量
	ValleyElectricity      float64    `protobuf:"fixed64,22,opt,name=valleyElectricity,proto3" json:"valleyElectricity,omitempty"`           // “谷”时刻电量
	UnknownElectricity     float64    `protobuf:"fixed64,23,opt,name=unknownElectricity,proto3" json:"unknownElectricity,omitempty"`         // “未知”时刻电量
	SharpElectricityCost   float64    `protobuf:"fixed64,24,opt,name=sharpElectricityCost,proto3" json:"sharpElectricityCost,omitempty"`     // “尖”时刻电费
	PeakElectricityCost    float64    `protobuf:"fixed64,25,opt,name=peakElectricityCost,proto3" json:"peakElectricityCost,omitempty"`       // “峰”时刻电费
	FlatElectricityCost    float64    `protobuf:"fixed64,26,opt,name=flatElectricityCost,proto3" json:"flatElectricityCost,omitempty"`       // “平”时刻电费
	ValleyElectricityCost  float64    `protobuf:"fixed64,27,opt,name=valleyElectricityCost,proto3" json:"valleyElectricityCost,omitempty"`   // “谷”时刻电费
	UnknownElectricityCost float64    `protobuf:"fixed64,28,opt,name=unknownElectricityCost,proto3" json:"unknownElectricityCost,omitempty"` // “未知”时刻电费
	SharpServicesCost      float64    `protobuf:"fixed64,29,opt,name=sharpServicesCost,proto3" json:"sharpServicesCost,omitempty"`           // “尖”时刻服务费
	PeakServicesCost       float64    `protobuf:"fixed64,30,opt,name=peakServicesCost,proto3" json:"peakServicesCost,omitempty"`             // “峰”时刻服务费
	FlatServicesCost       float64    `protobuf:"fixed64,31,opt,name=flatServicesCost,proto3" json:"flatServicesCost,omitempty"`             // “平”时刻服务费
	ValleyServicesCost     float64    `protobuf:"fixed64,32,opt,name=valleyServicesCost,proto3" json:"valleyServicesCost,omitempty"`         // “谷”时刻服务费
	UnknownServicesCost    float64    `protobuf:"fixed64,33,opt,name=unknownServicesCost,proto3" json:"unknownServicesCost,omitempty"`       // “未知”时刻服务费
	StartElectricity       float64    `protobuf:"fixed64,34,opt,name=startElectricity,proto3" json:"startElectricity,omitempty"`             // 启动时的电量
	StopElectricity        float64    `protobuf:"fixed64,35,opt,name=stopElectricity,proto3" json:"stopElectricity,omitempty"`               // 结束时的电量
	StopReasonDesc         string     `protobuf:"bytes,36,opt,name=stopReasonDesc,proto3" json:"stopReasonDesc,omitempty"`                   // 停止原因
	BookTime               int64      `protobuf:"varint,37,opt,name=bookTime,proto3" json:"bookTime,omitempty"`                              // 预约时间
	ParkTime               int64      `protobuf:"varint,38,opt,name=parkTime,proto3" json:"parkTime,omitempty"`                              // 停车时间
	StartTime              int64      `protobuf:"varint,39,opt,name=startTime,proto3" json:"startTime,omitempty"`                            // 订单开始时间
	ChargeStartTime        int64      `protobuf:"varint,40,opt,name=chargeStartTime,proto3" json:"chargeStartTime,omitempty"`                // 开始充电时间
	ChargeStopTime         int64      `protobuf:"varint,41,opt,name=chargeStopTime,proto3" json:"chargeStopTime,omitempty"`                  // 结束充电时间
	EndTime                int64      `protobuf:"varint,42,opt,name=endTime,proto3" json:"endTime,omitempty"`                                // 订单结束时间
	LeaveTime              int64      `protobuf:"varint,43,opt,name=leaveTime,proto3" json:"leaveTime,omitempty"`                            // 离开车位时间
	PriceSchemeID          uint64     `protobuf:"varint,44,opt,name=priceSchemeID,proto3" json:"priceSchemeID,omitempty"`                    // 计费模板ID
	PriceSchemeInfo        string     `protobuf:"bytes,45,opt,name=priceSchemeInfo,proto3" json:"priceSchemeInfo,omitempty"`                 // 计费描述
	CreatedAt              int64      `protobuf:"varint,46,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                            // 创建时间
	StopReasonCode         int32      `protobuf:"varint,47,opt,name=stopReasonCode,proto3" json:"stopReasonCode,omitempty"`                  // 停止原因代码
	// int32       authorization_type = 47;      // 授权类型
	// bool        is_payed = 48;                // 是否已支付
	// bool        is_settlement = 49;           // 是否已结算，用于出对账单，退款后、费用刚好等于支付的费用或费用为0的订单在停止充电后会变更到此状态
	OutOrderId            string            `protobuf:"bytes,50,opt,name=out_order_id,json=outOrderId,proto3" json:"out_order_id,omitempty"`                                  // 订单ID（第三方请求的订单id）
	PayMode               common.PayMode    `protobuf:"varint,51,opt,name=pay_mode,json=payMode,proto3,enum=common.PayMode" json:"pay_mode,omitempty"`                        // 支付方式
	RefundMode            common.RefundMode `protobuf:"varint,52,opt,name=refund_mode,json=refundMode,proto3,enum=common.RefundMode" json:"refund_mode,omitempty"`            // 退款方式
	RemainTime            int64             `protobuf:"varint,53,opt,name=remain_time,json=remainTime,proto3" json:"remain_time,omitempty"`                                   // 剩余充电时间 ，-1，没有值或不支持，单位秒，时间戳格式
	ConsumedElectric      float64           `protobuf:"fixed64,54,opt,name=consumed_electric,json=consumedElectric,proto3" json:"consumed_electric,omitempty"`                // 已充电量
	Soc                   int32             `protobuf:"varint,55,opt,name=soc,proto3" json:"soc,omitempty"`                                                                   // 剩余soc，soc=-1，没有值或不支持，可以展示为"-"，如 55.5 展示为"55.5%"
	ReceivableAmount      float64           `protobuf:"fixed64,56,opt,name=receivable_amount,json=receivableAmount,proto3" json:"receivable_amount,omitempty"`                // 应收费用 元
	DiscountAmount        float64           `protobuf:"fixed64,57,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`                      // 优惠金额
	StartSoc              int32             `protobuf:"varint,58,opt,name=start_soc,json=startSoc,proto3" json:"start_soc,omitempty"`                                         // 启动soc
	StopSoc               int32             `protobuf:"varint,59,opt,name=stop_soc,json=stopSoc,proto3" json:"stop_soc,omitempty"`                                            // 停止soc
	PriceschemeChannelKey string            `protobuf:"bytes,60,opt,name=pricescheme_channel_key,json=priceschemeChannelKey,proto3" json:"pricescheme_channel_key,omitempty"` // 计费策略渠道键值
	ScheduleTime          int32             `protobuf:"varint,61,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`                             // 定时充电时间
	ConflictTotalCost     float64           `protobuf:"fixed64,62,opt,name=conflict_total_cost,json=conflictTotalCost,proto3" json:"conflict_total_cost,omitempty"`           // 冲突费用，单位：元
	PaymentChannel        string            `protobuf:"bytes,63,opt,name=payment_channel,json=paymentChannel,proto3" json:"payment_channel,omitempty"`                        // 支付渠道
	BitCouponType         int32             `protobuf:"varint,64,opt,name=bit_coupon_type,json=bitCouponType,proto3" json:"bit_coupon_type,omitempty"`                        // 折扣类型
	CouponValue           float64           `protobuf:"fixed64,65,opt,name=coupon_value,json=couponValue,proto3" json:"coupon_value,omitempty"`                               // 折扣值
	PayState              int32             `protobuf:"varint,66,opt,name=pay_state,json=payState,proto3" json:"pay_state,omitempty"`                                         // 支付状态
	PayTime               int64             `protobuf:"varint,67,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`                                            // 支付时间
	RefundState           int32             `protobuf:"varint,68,opt,name=refund_state,json=refundState,proto3" json:"refund_state,omitempty"`                                // 退款状态
	BackPayState          int32             `protobuf:"varint,69,opt,name=back_pay_state,json=backPayState,proto3" json:"back_pay_state,omitempty"`                           // 补缴状态
	SettlementState       int32             `protobuf:"varint,70,opt,name=settlement_state,json=settlementState,proto3" json:"settlement_state,omitempty"`                    // 结算状态
	Remark                string            `protobuf:"bytes,71,opt,name=remark,proto3" json:"remark,omitempty"`                                                              // 备注
	PayChannel            common.PayChannel `protobuf:"varint,72,opt,name=pay_channel,json=payChannel,proto3,enum=common.PayChannel" json:"pay_channel,omitempty"`            // 支付渠道（一个支付类型对应多个支付渠道）
	Balance               float64           `protobuf:"fixed64,73,opt,name=balance,proto3" json:"balance,omitempty"`                                                          // 余额
	IsPrepay              bool              `protobuf:"varint,74,opt,name=is_prepay,json=isPrepay,proto3" json:"is_prepay,omitempty"`                                         // 是否先付费
	UpdatedAt             int64             `protobuf:"varint,75,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                      // 更新时间
	GroupId               uint64            `protobuf:"varint,76,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                                            // 集团
	CustomerId            uint64            `protobuf:"varint,77,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`                                   // 客户
	PreFrozenAmount       float64           `protobuf:"fixed64,78,opt,name=pre_frozen_amount,json=preFrozenAmount,proto3" json:"pre_frozen_amount,omitempty"`                 // 预冻结金额，一般用于第三方平台对接
	ChartCurrentVoltage   string            `protobuf:"bytes,100,opt,name=chart_current_voltage,json=chartCurrentVoltage,proto3" json:"chart_current_voltage,omitempty"`      // 电流电压图表
	ChartPowerSocTemp     string            `protobuf:"bytes,101,opt,name=chart_power_soc_temp,json=chartPowerSocTemp,proto3" json:"chart_power_soc_temp,omitempty"`          // 功率、SOC、温度图表
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{50}
}

func (x *Order) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Order) GetBills() []*Bill {
	if x != nil {
		return x.Bills
	}
	return nil
}

func (x *Order) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

func (x *Order) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *Order) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *Order) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *Order) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Order) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *Order) GetOnlineState() int32 {
	if x != nil {
		return x.OnlineState
	}
	return 0
}

func (x *Order) GetAuthorizationMode() int32 {
	if x != nil {
		return x.AuthorizationMode
	}
	return 0
}

func (x *Order) GetAuthorizationID() string {
	if x != nil {
		return x.AuthorizationID
	}
	return ""
}

func (x *Order) GetServiceMode() int32 {
	if x != nil {
		return x.ServiceMode
	}
	return 0
}

func (x *Order) GetIsOfflineSync() int32 {
	if x != nil {
		return x.IsOfflineSync
	}
	return 0
}

func (x *Order) GetPayAmount() float64 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

func (x *Order) GetTotalElecCost() float64 {
	if x != nil {
		return x.TotalElecCost
	}
	return 0
}

func (x *Order) GetTotalServiceCost() float64 {
	if x != nil {
		return x.TotalServiceCost
	}
	return 0
}

func (x *Order) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *Order) GetTotalElectricity() float64 {
	if x != nil {
		return x.TotalElectricity
	}
	return 0
}

func (x *Order) GetSharpElectricity() float64 {
	if x != nil {
		return x.SharpElectricity
	}
	return 0
}

func (x *Order) GetPeakElectricity() float64 {
	if x != nil {
		return x.PeakElectricity
	}
	return 0
}

func (x *Order) GetFlatElectricity() float64 {
	if x != nil {
		return x.FlatElectricity
	}
	return 0
}

func (x *Order) GetValleyElectricity() float64 {
	if x != nil {
		return x.ValleyElectricity
	}
	return 0
}

func (x *Order) GetUnknownElectricity() float64 {
	if x != nil {
		return x.UnknownElectricity
	}
	return 0
}

func (x *Order) GetSharpElectricityCost() float64 {
	if x != nil {
		return x.SharpElectricityCost
	}
	return 0
}

func (x *Order) GetPeakElectricityCost() float64 {
	if x != nil {
		return x.PeakElectricityCost
	}
	return 0
}

func (x *Order) GetFlatElectricityCost() float64 {
	if x != nil {
		return x.FlatElectricityCost
	}
	return 0
}

func (x *Order) GetValleyElectricityCost() float64 {
	if x != nil {
		return x.ValleyElectricityCost
	}
	return 0
}

func (x *Order) GetUnknownElectricityCost() float64 {
	if x != nil {
		return x.UnknownElectricityCost
	}
	return 0
}

func (x *Order) GetSharpServicesCost() float64 {
	if x != nil {
		return x.SharpServicesCost
	}
	return 0
}

func (x *Order) GetPeakServicesCost() float64 {
	if x != nil {
		return x.PeakServicesCost
	}
	return 0
}

func (x *Order) GetFlatServicesCost() float64 {
	if x != nil {
		return x.FlatServicesCost
	}
	return 0
}

func (x *Order) GetValleyServicesCost() float64 {
	if x != nil {
		return x.ValleyServicesCost
	}
	return 0
}

func (x *Order) GetUnknownServicesCost() float64 {
	if x != nil {
		return x.UnknownServicesCost
	}
	return 0
}

func (x *Order) GetStartElectricity() float64 {
	if x != nil {
		return x.StartElectricity
	}
	return 0
}

func (x *Order) GetStopElectricity() float64 {
	if x != nil {
		return x.StopElectricity
	}
	return 0
}

func (x *Order) GetStopReasonDesc() string {
	if x != nil {
		return x.StopReasonDesc
	}
	return ""
}

func (x *Order) GetBookTime() int64 {
	if x != nil {
		return x.BookTime
	}
	return 0
}

func (x *Order) GetParkTime() int64 {
	if x != nil {
		return x.ParkTime
	}
	return 0
}

func (x *Order) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Order) GetChargeStartTime() int64 {
	if x != nil {
		return x.ChargeStartTime
	}
	return 0
}

func (x *Order) GetChargeStopTime() int64 {
	if x != nil {
		return x.ChargeStopTime
	}
	return 0
}

func (x *Order) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Order) GetLeaveTime() int64 {
	if x != nil {
		return x.LeaveTime
	}
	return 0
}

func (x *Order) GetPriceSchemeID() uint64 {
	if x != nil {
		return x.PriceSchemeID
	}
	return 0
}

func (x *Order) GetPriceSchemeInfo() string {
	if x != nil {
		return x.PriceSchemeInfo
	}
	return ""
}

func (x *Order) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Order) GetStopReasonCode() int32 {
	if x != nil {
		return x.StopReasonCode
	}
	return 0
}

func (x *Order) GetOutOrderId() string {
	if x != nil {
		return x.OutOrderId
	}
	return ""
}

func (x *Order) GetPayMode() common.PayMode {
	if x != nil {
		return x.PayMode
	}
	return common.PayMode_PM_Unknown
}

func (x *Order) GetRefundMode() common.RefundMode {
	if x != nil {
		return x.RefundMode
	}
	return common.RefundMode_RM_Unknown
}

func (x *Order) GetRemainTime() int64 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *Order) GetConsumedElectric() float64 {
	if x != nil {
		return x.ConsumedElectric
	}
	return 0
}

func (x *Order) GetSoc() int32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *Order) GetReceivableAmount() float64 {
	if x != nil {
		return x.ReceivableAmount
	}
	return 0
}

func (x *Order) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *Order) GetStartSoc() int32 {
	if x != nil {
		return x.StartSoc
	}
	return 0
}

func (x *Order) GetStopSoc() int32 {
	if x != nil {
		return x.StopSoc
	}
	return 0
}

func (x *Order) GetPriceschemeChannelKey() string {
	if x != nil {
		return x.PriceschemeChannelKey
	}
	return ""
}

func (x *Order) GetScheduleTime() int32 {
	if x != nil {
		return x.ScheduleTime
	}
	return 0
}

func (x *Order) GetConflictTotalCost() float64 {
	if x != nil {
		return x.ConflictTotalCost
	}
	return 0
}

func (x *Order) GetPaymentChannel() string {
	if x != nil {
		return x.PaymentChannel
	}
	return ""
}

func (x *Order) GetBitCouponType() int32 {
	if x != nil {
		return x.BitCouponType
	}
	return 0
}

func (x *Order) GetCouponValue() float64 {
	if x != nil {
		return x.CouponValue
	}
	return 0
}

func (x *Order) GetPayState() int32 {
	if x != nil {
		return x.PayState
	}
	return 0
}

func (x *Order) GetPayTime() int64 {
	if x != nil {
		return x.PayTime
	}
	return 0
}

func (x *Order) GetRefundState() int32 {
	if x != nil {
		return x.RefundState
	}
	return 0
}

func (x *Order) GetBackPayState() int32 {
	if x != nil {
		return x.BackPayState
	}
	return 0
}

func (x *Order) GetSettlementState() int32 {
	if x != nil {
		return x.SettlementState
	}
	return 0
}

func (x *Order) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Order) GetPayChannel() common.PayChannel {
	if x != nil {
		return x.PayChannel
	}
	return common.PayChannel_PC_Unknown
}

func (x *Order) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Order) GetIsPrepay() bool {
	if x != nil {
		return x.IsPrepay
	}
	return false
}

func (x *Order) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Order) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Order) GetCustomerId() uint64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Order) GetPreFrozenAmount() float64 {
	if x != nil {
		return x.PreFrozenAmount
	}
	return 0
}

func (x *Order) GetChartCurrentVoltage() string {
	if x != nil {
		return x.ChartCurrentVoltage
	}
	return ""
}

func (x *Order) GetChartPowerSocTemp() string {
	if x != nil {
		return x.ChartPowerSocTemp
	}
	return ""
}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                               // id
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                           // 名称
	Vendor       string      `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`                                                       // 供应商
	Product      string      `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`                                                     // 产品版本
	Type         string      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`                                                           // 设备类型
	RatedPower   float64     `protobuf:"fixed64,6,opt,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`                           // 额定功率
	RatedCurrent float64     `protobuf:"fixed64,7,opt,name=rated_current,json=ratedCurrent,proto3" json:"rated_current,omitempty"`                     // 额定电流
	RatedVoltage float64     `protobuf:"fixed64,8,opt,name=rated_voltage,json=ratedVoltage,proto3" json:"rated_voltage,omitempty"`                     // 额定电压
	VehicleType  VehicleType `protobuf:"varint,9,opt,name=vehicle_type,json=vehicleType,proto3,enum=coregw.VehicleType" json:"vehicle_type,omitempty"` // 使用车辆类型
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{51}
}

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Model) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Model) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Model) GetRatedPower() float64 {
	if x != nil {
		return x.RatedPower
	}
	return 0
}

func (x *Model) GetRatedCurrent() float64 {
	if x != nil {
		return x.RatedCurrent
	}
	return 0
}

func (x *Model) GetRatedVoltage() float64 {
	if x != nil {
		return x.RatedVoltage
	}
	return 0
}

func (x *Model) GetVehicleType() VehicleType {
	if x != nil {
		return x.VehicleType
	}
	return VehicleType_Unknown
}

// Evse 设备信息
type Evse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                 //ID
	OperatorID uint64 `protobuf:"varint,2,opt,name=operatorID,proto3" json:"operatorID,omitempty"` //运营商ID
	StationID  uint64 `protobuf:"varint,3,opt,name=stationID,proto3" json:"stationID,omitempty"`   //所属站点ID
	// string      model                    = 4; //型号
	// string      vendor                   = 5; //运营商
	Model               *Model `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`                                     //型号信息
	SN                  string `protobuf:"bytes,6,opt,name=SN,proto3" json:"SN,omitempty"`                                           //序列号
	RegisterationCode   string `protobuf:"bytes,7,opt,name=registerationCode,proto3" json:"registerationCode,omitempty"`             //注册码
	ConnectorNumber     int32  `protobuf:"varint,8,opt,name=connectorNumber,proto3" json:"connectorNumber,omitempty"`                //枪头数量
	State               int32  `protobuf:"varint,9,opt,name=state,proto3" json:"state,omitempty"`                                    //状态值
	FirmwareVersion     string `protobuf:"bytes,10,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`                //固件版本号
	ProtocolVersion     string `protobuf:"bytes,11,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`                //通信版本号
	LastLostConnReason  string `protobuf:"bytes,12,opt,name=lastLostConnReason,proto3" json:"lastLostConnReason,omitempty"`          //上次链接断开原因
	LastLostConnTime    int64  `protobuf:"varint,13,opt,name=lastLostConnTime,proto3" json:"lastLostConnTime,omitempty"`             //上次链接断开时间
	JobDiagnosticsID    uint64 `protobuf:"varint,14,opt,name=jobDiagnosticsID,proto3" json:"jobDiagnosticsID,omitempty"`             //诊断任务ID
	JobDiagnosticsState string `protobuf:"bytes,15,opt,name=jobDiagnosticsState,proto3" json:"jobDiagnosticsState,omitempty"`        //诊断任务状态
	UpgradeState        int32  `protobuf:"varint,16,opt,name=upgrade_state,json=upgradeState,proto3" json:"upgrade_state,omitempty"` //固件升级状态
	//    uint64      jobUpgradeID             = 16; //升级任务ID
	//    string      jobUpgradeState          = 17; //升级任务状态
	//    uint64      tariffID                 = 18; //计费策略ID
	TariffInfo               map[int32]string `protobuf:"bytes,19,rep,name=tariffInfo,proto3" json:"tariffInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //计费描述
	CreatedAt                int64            `protobuf:"varint,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                                                                                           //创建时间
	ManagerID                uint64           `protobuf:"varint,21,opt,name=managerID,proto3" json:"managerID,omitempty"`                                                                                           //所属管理员ID，与站点ID对应，冗余字段
	AlarmNums                uint32           `protobuf:"varint,22,opt,name=alarmNums,proto3" json:"alarmNums,omitempty"`                                                                                           //设备告警总数
	TopicPrefix              string           `protobuf:"bytes,23,opt,name=topic_prefix,json=topicPrefix,proto3" json:"topic_prefix,omitempty"`                                                                     //topic的前缀
	Uuid                     string           `protobuf:"bytes,24,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                                                                      //uuid
	ConnectorAvailableNumber int32            `protobuf:"varint,25,opt,name=connectorAvailableNumber,proto3" json:"connectorAvailableNumber,omitempty"`                                                             // 枪头空闲数量
	RSSI                     int32            `protobuf:"varint,26,opt,name=RSSI,proto3" json:"RSSI,omitempty"`                                                                                                     // 信号值
	ICCID                    string           `protobuf:"bytes,27,opt,name=ICCID,proto3" json:"ICCID,omitempty"`                                                                                                    // ICC卡号
	Keepalive                uint32           `protobuf:"varint,28,opt,name=keepalive,proto3" json:"keepalive,omitempty"`                                                                                           // keepalive时间
	DebugMode                bool             `protobuf:"varint,29,opt,name=debug_mode,json=debugMode,proto3" json:"debug_mode,omitempty"`                                                                          // 调式模式
	ExpiredAt                int64            `protobuf:"varint,30,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`                                                                          //证书过期时间
	LicenseId                uint64           `protobuf:"varint,31,opt,name=license_id,json=licenseId,proto3" json:"license_id,omitempty"`                                                                          // 证书ID
	ConnectorOccupyNumber    int32            `protobuf:"varint,32,opt,name=connectorOccupyNumber,proto3" json:"connectorOccupyNumber,omitempty"`                                                                   // 占用中的枪头数量
	ConnectorFaultNumber     int32            `protobuf:"varint,33,opt,name=connectorFaultNumber,proto3" json:"connectorFaultNumber,omitempty"`                                                                     // 故障中的枪头数量
	ConnectorChargingNumber  int32            `protobuf:"varint,34,opt,name=connectorChargingNumber,proto3" json:"connectorChargingNumber,omitempty"`                                                               // 充电中的枪头数量
	ComponentBits            uint64           `protobuf:"varint,35,opt,name=ComponentBits,proto3" json:"ComponentBits,omitempty"`                                                                                   // 功能开关, 以比特位的形式进行传输，0表示基本功能（功能支持，见goiot协议）
	Blocked                  bool             `protobuf:"varint,36,opt,name=blocked,proto3" json:"blocked,omitempty"`                                                                                               //是否屏蔽
	Type                     EvseType         `protobuf:"varint,37,opt,name=type,proto3,enum=coregw.EvseType" json:"type,omitempty"`                                                                                // 设备类型
	RatedPower               float64          `protobuf:"fixed64,38,opt,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`                                                                      // 额定功率
	RatedCurrent             float64          `protobuf:"fixed64,39,opt,name=rated_current,json=ratedCurrent,proto3" json:"rated_current,omitempty"`                                                                // 额定电流
	RatedVoltage             float64          `protobuf:"fixed64,40,opt,name=rated_voltage,json=ratedVoltage,proto3" json:"rated_voltage,omitempty"`                                                                // 额定电压
	VehicleType              VehicleType      `protobuf:"varint,41,opt,name=vehicle_type,json=vehicleType,proto3,enum=coregw.VehicleType" json:"vehicle_type,omitempty"`                                            // 使用车辆类型
	BtMacAddr                string           `protobuf:"bytes,42,opt,name=bt_mac_addr,json=btMacAddr,proto3" json:"bt_mac_addr,omitempty"`                                                                         // BT Mac地址
	BtPwd                    string           `protobuf:"bytes,43,opt,name=bt_pwd,json=btPwd,proto3" json:"bt_pwd,omitempty"`                                                                                       // BT 配对密码
	EvseTime                 int64            `protobuf:"varint,44,opt,name=evse_time,json=evseTime,proto3" json:"evse_time,omitempty"`                                                                             // 桩端时间
}

func (x *Evse) Reset() {
	*x = Evse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evse) ProtoMessage() {}

func (x *Evse) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evse.ProtoReflect.Descriptor instead.
func (*Evse) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{52}
}

func (x *Evse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Evse) GetOperatorID() uint64 {
	if x != nil {
		return x.OperatorID
	}
	return 0
}

func (x *Evse) GetStationID() uint64 {
	if x != nil {
		return x.StationID
	}
	return 0
}

func (x *Evse) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *Evse) GetSN() string {
	if x != nil {
		return x.SN
	}
	return ""
}

func (x *Evse) GetRegisterationCode() string {
	if x != nil {
		return x.RegisterationCode
	}
	return ""
}

func (x *Evse) GetConnectorNumber() int32 {
	if x != nil {
		return x.ConnectorNumber
	}
	return 0
}

func (x *Evse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Evse) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Evse) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *Evse) GetLastLostConnReason() string {
	if x != nil {
		return x.LastLostConnReason
	}
	return ""
}

func (x *Evse) GetLastLostConnTime() int64 {
	if x != nil {
		return x.LastLostConnTime
	}
	return 0
}

func (x *Evse) GetJobDiagnosticsID() uint64 {
	if x != nil {
		return x.JobDiagnosticsID
	}
	return 0
}

func (x *Evse) GetJobDiagnosticsState() string {
	if x != nil {
		return x.JobDiagnosticsState
	}
	return ""
}

func (x *Evse) GetUpgradeState() int32 {
	if x != nil {
		return x.UpgradeState
	}
	return 0
}

func (x *Evse) GetTariffInfo() map[int32]string {
	if x != nil {
		return x.TariffInfo
	}
	return nil
}

func (x *Evse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Evse) GetManagerID() uint64 {
	if x != nil {
		return x.ManagerID
	}
	return 0
}

func (x *Evse) GetAlarmNums() uint32 {
	if x != nil {
		return x.AlarmNums
	}
	return 0
}

func (x *Evse) GetTopicPrefix() string {
	if x != nil {
		return x.TopicPrefix
	}
	return ""
}

func (x *Evse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Evse) GetConnectorAvailableNumber() int32 {
	if x != nil {
		return x.ConnectorAvailableNumber
	}
	return 0
}

func (x *Evse) GetRSSI() int32 {
	if x != nil {
		return x.RSSI
	}
	return 0
}

func (x *Evse) GetICCID() string {
	if x != nil {
		return x.ICCID
	}
	return ""
}

func (x *Evse) GetKeepalive() uint32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *Evse) GetDebugMode() bool {
	if x != nil {
		return x.DebugMode
	}
	return false
}

func (x *Evse) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *Evse) GetLicenseId() uint64 {
	if x != nil {
		return x.LicenseId
	}
	return 0
}

func (x *Evse) GetConnectorOccupyNumber() int32 {
	if x != nil {
		return x.ConnectorOccupyNumber
	}
	return 0
}

func (x *Evse) GetConnectorFaultNumber() int32 {
	if x != nil {
		return x.ConnectorFaultNumber
	}
	return 0
}

func (x *Evse) GetConnectorChargingNumber() int32 {
	if x != nil {
		return x.ConnectorChargingNumber
	}
	return 0
}

func (x *Evse) GetComponentBits() uint64 {
	if x != nil {
		return x.ComponentBits
	}
	return 0
}

func (x *Evse) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *Evse) GetType() EvseType {
	if x != nil {
		return x.Type
	}
	return EvseType_EvseTypeUnknown
}

func (x *Evse) GetRatedPower() float64 {
	if x != nil {
		return x.RatedPower
	}
	return 0
}

func (x *Evse) GetRatedCurrent() float64 {
	if x != nil {
		return x.RatedCurrent
	}
	return 0
}

func (x *Evse) GetRatedVoltage() float64 {
	if x != nil {
		return x.RatedVoltage
	}
	return 0
}

func (x *Evse) GetVehicleType() VehicleType {
	if x != nil {
		return x.VehicleType
	}
	return VehicleType_Unknown
}

func (x *Evse) GetBtMacAddr() string {
	if x != nil {
		return x.BtMacAddr
	}
	return ""
}

func (x *Evse) GetBtPwd() string {
	if x != nil {
		return x.BtPwd
	}
	return ""
}

func (x *Evse) GetEvseTime() int64 {
	if x != nil {
		return x.EvseTime
	}
	return 0
}

// 分时收费
type Bill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID         uint64  `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`                  // 订单id
	TimeStart       int32   `protobuf:"varint,2,opt,name=timeStart,proto3" json:"timeStart,omitempty"`              // 开始时间
	TimeStartDesc   string  `protobuf:"bytes,3,opt,name=timeStartDesc,proto3" json:"timeStartDesc,omitempty"`       // 开始时间描述
	Tag             string  `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`                           // 尖峰平谷
	Electricity     float64 `protobuf:"fixed64,5,opt,name=electricity,proto3" json:"electricity,omitempty"`         // 电量
	ElectricityCost float64 `protobuf:"fixed64,6,opt,name=electricityCost,proto3" json:"electricityCost,omitempty"` // 电费
	ServiceCost     float64 `protobuf:"fixed64,7,opt,name=serviceCost,proto3" json:"serviceCost,omitempty"`         // 服务费
	TotalCost       float64 `protobuf:"fixed64,8,opt,name=totalCost,proto3" json:"totalCost,omitempty"`             // 合计(每一分段的费用)
}

func (x *Bill) Reset() {
	*x = Bill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bill) ProtoMessage() {}

func (x *Bill) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bill.ProtoReflect.Descriptor instead.
func (*Bill) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{53}
}

func (x *Bill) GetOrderID() uint64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *Bill) GetTimeStart() int32 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *Bill) GetTimeStartDesc() string {
	if x != nil {
		return x.TimeStartDesc
	}
	return ""
}

func (x *Bill) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Bill) GetElectricity() float64 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *Bill) GetElectricityCost() float64 {
	if x != nil {
		return x.ElectricityCost
	}
	return 0
}

func (x *Bill) GetServiceCost() float64 {
	if x != nil {
		return x.ServiceCost
	}
	return 0
}

func (x *Bill) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

// 枪头
type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                         // ID
	EvseID             uint64  `protobuf:"varint,2,opt,name=evseID,proto3" json:"evseID,omitempty"`                                                 // 设备ID
	ConnectorID        int32   `protobuf:"varint,3,opt,name=connectorID,proto3" json:"connectorID,omitempty"`                                       // 枪头ID
	OrderID            uint64  `protobuf:"varint,4,opt,name=orderID,proto3" json:"orderID,omitempty"`                                               // 平台的流水号
	RecordID           string  `protobuf:"bytes,5,opt,name=recordID,proto3" json:"recordID,omitempty"`                                              // 硬件的充电流水号
	State              int32   `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`                                                   // 桩当前状态
	Type               int32   `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`                                                     // 接口类型
	InputVoltage       float64 `protobuf:"fixed64,8,opt,name=inputVoltage,proto3" json:"inputVoltage,omitempty"`                                    // 输入电压，单位V，分辨率0.1V
	InputVoltageA      float64 `protobuf:"fixed64,9,opt,name=inputVoltageA,proto3" json:"inputVoltageA,omitempty"`                                  // 输入A相电压，单位V，分辨率0.1V
	InputVoltageB      float64 `protobuf:"fixed64,10,opt,name=inputVoltageB,proto3" json:"inputVoltageB,omitempty"`                                 // 输入B相电压，单位V，分辨率0.1V
	InputVoltageC      float64 `protobuf:"fixed64,11,opt,name=inputVoltageC,proto3" json:"inputVoltageC,omitempty"`                                 // 输入C相电压，单位V，分辨率0.1V
	InputCurrent       float64 `protobuf:"fixed64,12,opt,name=inputCurrent,proto3" json:"inputCurrent,omitempty"`                                   // 输入电流，单位A，分辨率0.1A
	InputCurrentA      float64 `protobuf:"fixed64,13,opt,name=inputCurrentA,proto3" json:"inputCurrentA,omitempty"`                                 // 输入A相电流，单位A，分辨率0.1A
	InputCurrentB      float64 `protobuf:"fixed64,14,opt,name=inputCurrentB,proto3" json:"inputCurrentB,omitempty"`                                 // 输入B相电流，单位B，分辨率0.1A
	InputCurrentC      float64 `protobuf:"fixed64,15,opt,name=inputCurrentC,proto3" json:"inputCurrentC,omitempty"`                                 // 输入C相电流，单位C，分辨率0.1A
	OutputVoltage      float64 `protobuf:"fixed64,16,opt,name=outputVoltage,proto3" json:"outputVoltage,omitempty"`                                 // 输出电压，单位V，分辨率0.1V
	OutputCurrent      float64 `protobuf:"fixed64,17,opt,name=outputCurrent,proto3" json:"outputCurrent,omitempty"`                                 // 输出电流，单位A，分辨率0.1A
	Voltage            float64 `protobuf:"fixed64,18,opt,name=voltage,proto3" json:"voltage,omitempty"`                                             // A相电压，单位V，分辨率0.1V
	VoltageA           float64 `protobuf:"fixed64,19,opt,name=voltageA,proto3" json:"voltageA,omitempty"`                                           // A相电压，单位V，分辨率0.1V
	VoltageB           float64 `protobuf:"fixed64,20,opt,name=voltageB,proto3" json:"voltageB,omitempty"`                                           // B相电压，单位V，分辨率0.1V
	VoltageC           float64 `protobuf:"fixed64,21,opt,name=voltageC,proto3" json:"voltageC,omitempty"`                                           // C相电压，单位V，分辨率0.1V
	Current            float64 `protobuf:"fixed64,22,opt,name=current,proto3" json:"current,omitempty"`                                             // 电流，单位A，分辨率0.1A
	CurrentA           float64 `protobuf:"fixed64,23,opt,name=currentA,proto3" json:"currentA,omitempty"`                                           // A相电流，单位A，分辨率0.1A
	CurrentB           float64 `protobuf:"fixed64,24,opt,name=currentB,proto3" json:"currentB,omitempty"`                                           // B相电流，单位A，分辨率0.1A
	CurrentC           float64 `protobuf:"fixed64,25,opt,name=currentC,proto3" json:"currentC,omitempty"`                                           // C相电流，单位A，分辨率0.1A
	PowerKilowatts     float64 `protobuf:"fixed64,26,opt,name=powerKilowatts,proto3" json:"powerKilowatts,omitempty"`                               // 功率，单位kW，分辨率0.01kW
	Qrcode             string  `protobuf:"bytes,27,opt,name=qrcode,proto3" json:"qrcode,omitempty"`                                                 // qrcode 二维码
	Soc                float64 `protobuf:"fixed64,28,opt,name=soc,proto3" json:"soc,omitempty"`                                                     // soc
	Electricity        float64 `protobuf:"fixed64,29,opt,name=electricity,proto3" json:"electricity,omitempty"`                                     // 电量
	Temp               int32   `protobuf:"varint,30,opt,name=temp,proto3" json:"temp,omitempty"`                                                    // 温度
	No                 string  `protobuf:"bytes,31,opt,name=no,proto3" json:"no,omitempty"`                                                         // 枪头自定义编号
	AuthorizationMode  uint32  `protobuf:"varint,32,opt,name=authorization_mode,json=authorizationMode,proto3" json:"authorization_mode,omitempty"` // 支持授权的方式
	RemoteStartType    uint32  `protobuf:"varint,33,opt,name=remote_start_type,json=remoteStartType,proto3" json:"remote_start_type,omitempty"`     // 远程启动充电的类型，bitmap类型，具体查看 coregw.RemoteStartType
	QrcodeId           uint64  `protobuf:"varint,34,opt,name=qrcode_id,json=qrcodeId,proto3" json:"qrcode_id,omitempty"`                            // 二维码ID
	Evse               *Evse   `protobuf:"bytes,35,opt,name=evse,proto3" json:"evse,omitempty"`
	ChargedElectricity float64 `protobuf:"fixed64,36,opt,name=charged_electricity,json=chargedElectricity,proto3" json:"charged_electricity,omitempty"` //已充电量
	ReserveChargeTime  string  `protobuf:"bytes,37,opt,name=reserve_charge_time,json=reserveChargeTime,proto3" json:"reserve_charge_time,omitempty"`    //定时启动充电时间
	ReserveStatus      bool    `protobuf:"varint,38,opt,name=reserve_status,json=reserveStatus,proto3" json:"reserve_status,omitempty"`                 //是否启动预约定时充电
	ReserveIsCycle     bool    `protobuf:"varint,39,opt,name=reserve_is_cycle,json=reserveIsCycle,proto3" json:"reserve_is_cycle,omitempty"`            //预约是否是周期性
	ReserveStopTime    string  `protobuf:"bytes,40,opt,name=reserve_stop_time,json=reserveStopTime,proto3" json:"reserve_stop_time,omitempty"`          //定时停止充电时间
}

func (x *Connector) Reset() {
	*x = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{54}
}

func (x *Connector) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Connector) GetEvseID() uint64 {
	if x != nil {
		return x.EvseID
	}
	return 0
}

func (x *Connector) GetConnectorID() int32 {
	if x != nil {
		return x.ConnectorID
	}
	return 0
}

func (x *Connector) GetOrderID() uint64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *Connector) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *Connector) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Connector) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Connector) GetInputVoltage() float64 {
	if x != nil {
		return x.InputVoltage
	}
	return 0
}

func (x *Connector) GetInputVoltageA() float64 {
	if x != nil {
		return x.InputVoltageA
	}
	return 0
}

func (x *Connector) GetInputVoltageB() float64 {
	if x != nil {
		return x.InputVoltageB
	}
	return 0
}

func (x *Connector) GetInputVoltageC() float64 {
	if x != nil {
		return x.InputVoltageC
	}
	return 0
}

func (x *Connector) GetInputCurrent() float64 {
	if x != nil {
		return x.InputCurrent
	}
	return 0
}

func (x *Connector) GetInputCurrentA() float64 {
	if x != nil {
		return x.InputCurrentA
	}
	return 0
}

func (x *Connector) GetInputCurrentB() float64 {
	if x != nil {
		return x.InputCurrentB
	}
	return 0
}

func (x *Connector) GetInputCurrentC() float64 {
	if x != nil {
		return x.InputCurrentC
	}
	return 0
}

func (x *Connector) GetOutputVoltage() float64 {
	if x != nil {
		return x.OutputVoltage
	}
	return 0
}

func (x *Connector) GetOutputCurrent() float64 {
	if x != nil {
		return x.OutputCurrent
	}
	return 0
}

func (x *Connector) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *Connector) GetVoltageA() float64 {
	if x != nil {
		return x.VoltageA
	}
	return 0
}

func (x *Connector) GetVoltageB() float64 {
	if x != nil {
		return x.VoltageB
	}
	return 0
}

func (x *Connector) GetVoltageC() float64 {
	if x != nil {
		return x.VoltageC
	}
	return 0
}

func (x *Connector) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Connector) GetCurrentA() float64 {
	if x != nil {
		return x.CurrentA
	}
	return 0
}

func (x *Connector) GetCurrentB() float64 {
	if x != nil {
		return x.CurrentB
	}
	return 0
}

func (x *Connector) GetCurrentC() float64 {
	if x != nil {
		return x.CurrentC
	}
	return 0
}

func (x *Connector) GetPowerKilowatts() float64 {
	if x != nil {
		return x.PowerKilowatts
	}
	return 0
}

func (x *Connector) GetQrcode() string {
	if x != nil {
		return x.Qrcode
	}
	return ""
}

func (x *Connector) GetSoc() float64 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *Connector) GetElectricity() float64 {
	if x != nil {
		return x.Electricity
	}
	return 0
}

func (x *Connector) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *Connector) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *Connector) GetAuthorizationMode() uint32 {
	if x != nil {
		return x.AuthorizationMode
	}
	return 0
}

func (x *Connector) GetRemoteStartType() uint32 {
	if x != nil {
		return x.RemoteStartType
	}
	return 0
}

func (x *Connector) GetQrcodeId() uint64 {
	if x != nil {
		return x.QrcodeId
	}
	return 0
}

func (x *Connector) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *Connector) GetChargedElectricity() float64 {
	if x != nil {
		return x.ChargedElectricity
	}
	return 0
}

func (x *Connector) GetReserveChargeTime() string {
	if x != nil {
		return x.ReserveChargeTime
	}
	return ""
}

func (x *Connector) GetReserveStatus() bool {
	if x != nil {
		return x.ReserveStatus
	}
	return false
}

func (x *Connector) GetReserveIsCycle() bool {
	if x != nil {
		return x.ReserveIsCycle
	}
	return false
}

func (x *Connector) GetReserveStopTime() string {
	if x != nil {
		return x.ReserveStopTime
	}
	return ""
}

// 获取运营商设备
type EvsesByOperatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset     int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit      int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OperatorID uint64 `protobuf:"varint,3,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
	Sn         string `protobuf:"bytes,4,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (x *EvsesByOperatorReq) Reset() {
	*x = EvsesByOperatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByOperatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByOperatorReq) ProtoMessage() {}

func (x *EvsesByOperatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByOperatorReq.ProtoReflect.Descriptor instead.
func (*EvsesByOperatorReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{55}
}

func (x *EvsesByOperatorReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EvsesByOperatorReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *EvsesByOperatorReq) GetOperatorID() uint64 {
	if x != nil {
		return x.OperatorID
	}
	return 0
}

func (x *EvsesByOperatorReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

type EvsesByOperatorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRows int32   `protobuf:"varint,1,opt,name=totalRows,proto3" json:"totalRows,omitempty"`
	Evses     []*Evse `protobuf:"bytes,2,rep,name=evses,proto3" json:"evses,omitempty"`
}

func (x *EvsesByOperatorResp) Reset() {
	*x = EvsesByOperatorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByOperatorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByOperatorResp) ProtoMessage() {}

func (x *EvsesByOperatorResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByOperatorResp.ProtoReflect.Descriptor instead.
func (*EvsesByOperatorResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{56}
}

func (x *EvsesByOperatorResp) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *EvsesByOperatorResp) GetEvses() []*Evse {
	if x != nil {
		return x.Evses
	}
	return nil
}

type EvsesByVisitedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvsesByVisitedReq) Reset() {
	*x = EvsesByVisitedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByVisitedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByVisitedReq) ProtoMessage() {}

func (x *EvsesByVisitedReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByVisitedReq.ProtoReflect.Descriptor instead.
func (*EvsesByVisitedReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{57}
}

type EvsesByVisitedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse []*Evse `protobuf:"bytes,1,rep,name=evse,proto3" json:"evse,omitempty"`
}

func (x *EvsesByVisitedResp) Reset() {
	*x = EvsesByVisitedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByVisitedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByVisitedResp) ProtoMessage() {}

func (x *EvsesByVisitedResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByVisitedResp.ProtoReflect.Descriptor instead.
func (*EvsesByVisitedResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{58}
}

func (x *EvsesByVisitedResp) GetEvse() []*Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

type SetEvsesVisitedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseID []uint64 `protobuf:"varint,1,rep,packed,name=evseID,proto3" json:"evseID,omitempty"`
}

func (x *SetEvsesVisitedReq) Reset() {
	*x = SetEvsesVisitedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEvsesVisitedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEvsesVisitedReq) ProtoMessage() {}

func (x *SetEvsesVisitedReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEvsesVisitedReq.ProtoReflect.Descriptor instead.
func (*SetEvsesVisitedReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{59}
}

func (x *SetEvsesVisitedReq) GetEvseID() []uint64 {
	if x != nil {
		return x.EvseID
	}
	return nil
}

type SetEvsesVisitedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetEvsesVisitedResp) Reset() {
	*x = SetEvsesVisitedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEvsesVisitedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEvsesVisitedResp) ProtoMessage() {}

func (x *SetEvsesVisitedResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEvsesVisitedResp.ProtoReflect.Descriptor instead.
func (*SetEvsesVisitedResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{60}
}

// 获取设备枪头
type ConnectorsByEvseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseID uint64 `protobuf:"varint,1,opt,name=evseID,proto3" json:"evseID,omitempty"`
}

func (x *ConnectorsByEvseReq) Reset() {
	*x = ConnectorsByEvseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorsByEvseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorsByEvseReq) ProtoMessage() {}

func (x *ConnectorsByEvseReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorsByEvseReq.ProtoReflect.Descriptor instead.
func (*ConnectorsByEvseReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{61}
}

func (x *ConnectorsByEvseReq) GetEvseID() uint64 {
	if x != nil {
		return x.EvseID
	}
	return 0
}

type ConnectorsByEvseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connectors []*Connector `protobuf:"bytes,1,rep,name=connectors,proto3" json:"connectors,omitempty"`
}

func (x *ConnectorsByEvseResp) Reset() {
	*x = ConnectorsByEvseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorsByEvseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorsByEvseResp) ProtoMessage() {}

func (x *ConnectorsByEvseResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorsByEvseResp.ProtoReflect.Descriptor instead.
func (*ConnectorsByEvseResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{62}
}

func (x *ConnectorsByEvseResp) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

// 获取枪头信息
type ConnectorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorID uint64 `protobuf:"varint,1,opt,name=connectorID,proto3" json:"connectorID,omitempty"`
}

func (x *ConnectorReq) Reset() {
	*x = ConnectorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorReq) ProtoMessage() {}

func (x *ConnectorReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorReq.ProtoReflect.Descriptor instead.
func (*ConnectorReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{63}
}

func (x *ConnectorReq) GetConnectorID() uint64 {
	if x != nil {
		return x.ConnectorID
	}
	return 0
}

type ConnectorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse      *Evse      `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`
	Connector *Connector `protobuf:"bytes,2,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *ConnectorResp) Reset() {
	*x = ConnectorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorResp) ProtoMessage() {}

func (x *ConnectorResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorResp.ProtoReflect.Descriptor instead.
func (*ConnectorResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{64}
}

func (x *ConnectorResp) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *ConnectorResp) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

type SetConnectorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId uint64 `protobuf:"varint,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` // 枪头id
	No          string `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`                                       // 枪头编号
}

func (x *SetConnectorReq) Reset() {
	*x = SetConnectorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConnectorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConnectorReq) ProtoMessage() {}

func (x *SetConnectorReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConnectorReq.ProtoReflect.Descriptor instead.
func (*SetConnectorReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{65}
}

func (x *SetConnectorReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *SetConnectorReq) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

type SetConnectorResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetConnectorResp) Reset() {
	*x = SetConnectorResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConnectorResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConnectorResp) ProtoMessage() {}

func (x *SetConnectorResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConnectorResp.ProtoReflect.Descriptor instead.
func (*SetConnectorResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{66}
}

// 根据QRcodeID获取枪头信息
type ConnectorByQRCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Reg  string `protobuf:"bytes,2,opt,name=reg,proto3" json:"reg,omitempty"`
}

func (x *ConnectorByQRCodeReq) Reset() {
	*x = ConnectorByQRCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorByQRCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorByQRCodeReq) ProtoMessage() {}

func (x *ConnectorByQRCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorByQRCodeReq.ProtoReflect.Descriptor instead.
func (*ConnectorByQRCodeReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{67}
}

func (x *ConnectorByQRCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ConnectorByQRCodeReq) GetReg() string {
	if x != nil {
		return x.Reg
	}
	return ""
}

// 根据站点获取枪头状态统计信息
type ConnectorStateCalcByStationIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationID uint64 `protobuf:"varint,1,opt,name=stationID,proto3" json:"stationID,omitempty"`
}

func (x *ConnectorStateCalcByStationIDReq) Reset() {
	*x = ConnectorStateCalcByStationIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorStateCalcByStationIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorStateCalcByStationIDReq) ProtoMessage() {}

func (x *ConnectorStateCalcByStationIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorStateCalcByStationIDReq.ProtoReflect.Descriptor instead.
func (*ConnectorStateCalcByStationIDReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{68}
}

func (x *ConnectorStateCalcByStationIDReq) GetStationID() uint64 {
	if x != nil {
		return x.StationID
	}
	return 0
}

type ConnectorStateCalcByStationIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total            int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                                                 //总数量
	TotalDc          int32 `protobuf:"varint,2,opt,name=total_dc,json=totalDc,proto3" json:"total_dc,omitempty"`                              //总直流数量
	TotalDcAvaliable int32 `protobuf:"varint,3,opt,name=total_dc_avaliable,json=totalDcAvaliable,proto3" json:"total_dc_avaliable,omitempty"` //可用直流数量
	TotalAc          int32 `protobuf:"varint,4,opt,name=total_ac,json=totalAc,proto3" json:"total_ac,omitempty"`                              //总交流数量
	TotalAcAvaliable int32 `protobuf:"varint,5,opt,name=total_ac_avaliable,json=totalAcAvaliable,proto3" json:"total_ac_avaliable,omitempty"` //可用交流数量
}

func (x *ConnectorStateCalcByStationIDResp) Reset() {
	*x = ConnectorStateCalcByStationIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorStateCalcByStationIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorStateCalcByStationIDResp) ProtoMessage() {}

func (x *ConnectorStateCalcByStationIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorStateCalcByStationIDResp.ProtoReflect.Descriptor instead.
func (*ConnectorStateCalcByStationIDResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{69}
}

func (x *ConnectorStateCalcByStationIDResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ConnectorStateCalcByStationIDResp) GetTotalDc() int32 {
	if x != nil {
		return x.TotalDc
	}
	return 0
}

func (x *ConnectorStateCalcByStationIDResp) GetTotalDcAvaliable() int32 {
	if x != nil {
		return x.TotalDcAvaliable
	}
	return 0
}

func (x *ConnectorStateCalcByStationIDResp) GetTotalAc() int32 {
	if x != nil {
		return x.TotalAc
	}
	return 0
}

func (x *ConnectorStateCalcByStationIDResp) GetTotalAcAvaliable() int32 {
	if x != nil {
		return x.TotalAcAvaliable
	}
	return 0
}

type ConnectorsByStationIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	StationId uint64 `protobuf:"varint,3,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"`
}

func (x *ConnectorsByStationIDReq) Reset() {
	*x = ConnectorsByStationIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorsByStationIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorsByStationIDReq) ProtoMessage() {}

func (x *ConnectorsByStationIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorsByStationIDReq.ProtoReflect.Descriptor instead.
func (*ConnectorsByStationIDReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{70}
}

func (x *ConnectorsByStationIDReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ConnectorsByStationIDReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ConnectorsByStationIDReq) GetStationId() uint64 {
	if x != nil {
		return x.StationId
	}
	return 0
}

type ConnectorsByStationIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Connectors []*Connector `protobuf:"bytes,2,rep,name=connectors,proto3" json:"connectors,omitempty"`
}

func (x *ConnectorsByStationIDResp) Reset() {
	*x = ConnectorsByStationIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorsByStationIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorsByStationIDResp) ProtoMessage() {}

func (x *ConnectorsByStationIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorsByStationIDResp.ProtoReflect.Descriptor instead.
func (*ConnectorsByStationIDResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{71}
}

func (x *ConnectorsByStationIDResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ConnectorsByStationIDResp) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

// 获取站点设备
type EvsesByStationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    int32  `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	StationID uint64 `protobuf:"varint,3,opt,name=StationID,proto3" json:"StationID,omitempty"`
}

func (x *EvsesByStationReq) Reset() {
	*x = EvsesByStationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByStationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByStationReq) ProtoMessage() {}

func (x *EvsesByStationReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByStationReq.ProtoReflect.Descriptor instead.
func (*EvsesByStationReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{72}
}

func (x *EvsesByStationReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EvsesByStationReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *EvsesByStationReq) GetStationID() uint64 {
	if x != nil {
		return x.StationID
	}
	return 0
}

type EvsesByStationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRows int32   `protobuf:"varint,1,opt,name=TotalRows,proto3" json:"TotalRows,omitempty"`
	Evses     []*Evse `protobuf:"bytes,2,rep,name=Evses,proto3" json:"Evses,omitempty"`
}

func (x *EvsesByStationResp) Reset() {
	*x = EvsesByStationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByStationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByStationResp) ProtoMessage() {}

func (x *EvsesByStationResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByStationResp.ProtoReflect.Descriptor instead.
func (*EvsesByStationResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{73}
}

func (x *EvsesByStationResp) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *EvsesByStationResp) GetEvses() []*Evse {
	if x != nil {
		return x.Evses
	}
	return nil
}

// 获取设备
type EvseByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseId uint64 `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`
}

func (x *EvseByIDReq) Reset() {
	*x = EvseByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseByIDReq) ProtoMessage() {}

func (x *EvseByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseByIDReq.ProtoReflect.Descriptor instead.
func (*EvseByIDReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{74}
}

func (x *EvseByIDReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

type EvseByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Evse       *Evse        `protobuf:"bytes,1,opt,name=evse,proto3" json:"evse,omitempty"`
	Connectors []*Connector `protobuf:"bytes,2,rep,name=connectors,proto3" json:"connectors,omitempty"`
}

func (x *EvseByIDResp) Reset() {
	*x = EvseByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseByIDResp) ProtoMessage() {}

func (x *EvseByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseByIDResp.ProtoReflect.Descriptor instead.
func (*EvseByIDResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{75}
}

func (x *EvseByIDResp) GetEvse() *Evse {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EvseByIDResp) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

// 获取当下这个管理员能管理的设备
type EvsesByManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Sn        string `protobuf:"bytes,3,opt,name=sn,proto3" json:"sn,omitempty"`
	ManagerID uint64 `protobuf:"varint,4,opt,name=managerID,proto3" json:"managerID,omitempty"`
}

func (x *EvsesByManagerReq) Reset() {
	*x = EvsesByManagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByManagerReq) ProtoMessage() {}

func (x *EvsesByManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByManagerReq.ProtoReflect.Descriptor instead.
func (*EvsesByManagerReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{76}
}

func (x *EvsesByManagerReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EvsesByManagerReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *EvsesByManagerReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *EvsesByManagerReq) GetManagerID() uint64 {
	if x != nil {
		return x.ManagerID
	}
	return 0
}

type EvsesByManagerResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRows int32   `protobuf:"varint,1,opt,name=TotalRows,proto3" json:"TotalRows,omitempty"`
	Evses     []*Evse `protobuf:"bytes,2,rep,name=Evses,proto3" json:"Evses,omitempty"`
}

func (x *EvsesByManagerResp) Reset() {
	*x = EvsesByManagerResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvsesByManagerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvsesByManagerResp) ProtoMessage() {}

func (x *EvsesByManagerResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvsesByManagerResp.ProtoReflect.Descriptor instead.
func (*EvsesByManagerResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{77}
}

func (x *EvsesByManagerResp) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *EvsesByManagerResp) GetEvses() []*Evse {
	if x != nil {
		return x.Evses
	}
	return nil
}

// 获取当下这个管理员设备的告警总数量
type EvseAlarmsByManagerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerID uint64 `protobuf:"varint,1,opt,name=managerID,proto3" json:"managerID,omitempty"`
}

func (x *EvseAlarmsByManagerReq) Reset() {
	*x = EvseAlarmsByManagerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseAlarmsByManagerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseAlarmsByManagerReq) ProtoMessage() {}

func (x *EvseAlarmsByManagerReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseAlarmsByManagerReq.ProtoReflect.Descriptor instead.
func (*EvseAlarmsByManagerReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{78}
}

func (x *EvseAlarmsByManagerReq) GetManagerID() uint64 {
	if x != nil {
		return x.ManagerID
	}
	return 0
}

// 获取当下这个运营商设备的告警总数量
type EvseAlarmsByOperatorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID uint64 `protobuf:"varint,1,opt,name=operatorID,proto3" json:"operatorID,omitempty"`
}

func (x *EvseAlarmsByOperatorReq) Reset() {
	*x = EvseAlarmsByOperatorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseAlarmsByOperatorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseAlarmsByOperatorReq) ProtoMessage() {}

func (x *EvseAlarmsByOperatorReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseAlarmsByOperatorReq.ProtoReflect.Descriptor instead.
func (*EvseAlarmsByOperatorReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{79}
}

func (x *EvseAlarmsByOperatorReq) GetOperatorID() uint64 {
	if x != nil {
		return x.OperatorID
	}
	return 0
}

type EvseAlarmsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *EvseAlarmsResp) Reset() {
	*x = EvseAlarmsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvseAlarmsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvseAlarmsResp) ProtoMessage() {}

func (x *EvseAlarmsResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvseAlarmsResp.ProtoReflect.Descriptor instead.
func (*EvseAlarmsResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{80}
}

func (x *EvseAlarmsResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 支付渠道是否允许发起充电
type SetPaymentCheckIsCanStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId  uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`    //订单ID
	CanStart bool   `protobuf:"varint,2,opt,name=can_start,json=canStart,proto3" json:"can_start,omitempty"` //允许发起
	Err      string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`                            //错误描述
}

func (x *SetPaymentCheckIsCanStartReq) Reset() {
	*x = SetPaymentCheckIsCanStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPaymentCheckIsCanStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPaymentCheckIsCanStartReq) ProtoMessage() {}

func (x *SetPaymentCheckIsCanStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPaymentCheckIsCanStartReq.ProtoReflect.Descriptor instead.
func (*SetPaymentCheckIsCanStartReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{81}
}

func (x *SetPaymentCheckIsCanStartReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SetPaymentCheckIsCanStartReq) GetCanStart() bool {
	if x != nil {
		return x.CanStart
	}
	return false
}

func (x *SetPaymentCheckIsCanStartReq) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type SetPaymentCheckIsCanStartResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPaymentCheckIsCanStartResp) Reset() {
	*x = SetPaymentCheckIsCanStartResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPaymentCheckIsCanStartResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPaymentCheckIsCanStartResp) ProtoMessage() {}

func (x *SetPaymentCheckIsCanStartResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPaymentCheckIsCanStartResp.ProtoReflect.Descriptor instead.
func (*SetPaymentCheckIsCanStartResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{82}
}

type ChartDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[int32]*ChartDataResp_Metric `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 数据
}

func (x *ChartDataResp) Reset() {
	*x = ChartDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDataResp) ProtoMessage() {}

func (x *ChartDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDataResp.ProtoReflect.Descriptor instead.
func (*ChartDataResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{83}
}

func (x *ChartDataResp) GetData() map[int32]*ChartDataResp_Metric {
	if x != nil {
		return x.Data
	}
	return nil
}

// 用户身份鉴权信息
type IdToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IdType      int32  `protobuf:"varint,2,opt,name=IdType,proto3" json:"IdType,omitempty"`
	Password    string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	Customer    string `protobuf:"bytes,4,opt,name=Customer,proto3" json:"Customer,omitempty"`
	ExpiryDate  int32  `protobuf:"varint,5,opt,name=ExpiryDate,proto3" json:"ExpiryDate,omitempty"`
	Balance     int32  `protobuf:"varint,6,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Status      int32  `protobuf:"varint,7,opt,name=Status,proto3" json:"Status,omitempty"`
	Type        int32  `protobuf:"varint,8,opt,name=Type,proto3" json:"Type,omitempty"`
	Chargecount int32  `protobuf:"varint,9,opt,name=Chargecount,proto3" json:"Chargecount,omitempty"`
}

func (x *IdToken) Reset() {
	*x = IdToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdToken) ProtoMessage() {}

func (x *IdToken) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdToken.ProtoReflect.Descriptor instead.
func (*IdToken) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{84}
}

func (x *IdToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdToken) GetIdType() int32 {
	if x != nil {
		return x.IdType
	}
	return 0
}

func (x *IdToken) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *IdToken) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *IdToken) GetExpiryDate() int32 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

func (x *IdToken) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *IdToken) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *IdToken) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IdToken) GetChargecount() int32 {
	if x != nil {
		return x.Chargecount
	}
	return 0
}

// 计费模版相关
// 分时段按电价计费充电计费模版
type TariffCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestart    int32  `protobuf:"varint,1,opt,name=Timestart,proto3" json:"Timestart,omitempty"`
	Timeend      int32  `protobuf:"varint,2,opt,name=Timeend,proto3" json:"Timeend,omitempty"`
	Tag          string `protobuf:"bytes,3,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Elecprice    int32  `protobuf:"varint,4,opt,name=Elecprice,proto3" json:"Elecprice,omitempty"`
	Serviceprice int32  `protobuf:"varint,5,opt,name=Serviceprice,proto3" json:"Serviceprice,omitempty"`
	Occupyprice  int32  `protobuf:"varint,6,opt,name=Occupyprice,proto3" json:"Occupyprice,omitempty"`
}

func (x *TariffCharge) Reset() {
	*x = TariffCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffCharge) ProtoMessage() {}

func (x *TariffCharge) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffCharge.ProtoReflect.Descriptor instead.
func (*TariffCharge) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{85}
}

func (x *TariffCharge) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *TariffCharge) GetTimeend() int32 {
	if x != nil {
		return x.Timeend
	}
	return 0
}

func (x *TariffCharge) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TariffCharge) GetElecprice() int32 {
	if x != nil {
		return x.Elecprice
	}
	return 0
}

func (x *TariffCharge) GetServiceprice() int32 {
	if x != nil {
		return x.Serviceprice
	}
	return 0
}

func (x *TariffCharge) GetOccupyprice() int32 {
	if x != nil {
		return x.Occupyprice
	}
	return 0
}

// 计费模版相关
// 分功率段按时长充电计费模版
type TariffTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Powerstart int32 `protobuf:"varint,1,opt,name=Powerstart,proto3" json:"Powerstart,omitempty"`
	Powerend   int32 `protobuf:"varint,2,opt,name=Powerend,proto3" json:"Powerend,omitempty"`
	Timestart  int32 `protobuf:"varint,3,opt,name=Timestart,proto3" json:"Timestart,omitempty"`
	Timeend    int32 `protobuf:"varint,4,opt,name=Timeend,proto3" json:"Timeend,omitempty"`
	Price      int32 `protobuf:"varint,5,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (x *TariffTime) Reset() {
	*x = TariffTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffTime) ProtoMessage() {}

func (x *TariffTime) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffTime.ProtoReflect.Descriptor instead.
func (*TariffTime) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{86}
}

func (x *TariffTime) GetPowerstart() int32 {
	if x != nil {
		return x.Powerstart
	}
	return 0
}

func (x *TariffTime) GetPowerend() int32 {
	if x != nil {
		return x.Powerend
	}
	return 0
}

func (x *TariffTime) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *TariffTime) GetTimeend() int32 {
	if x != nil {
		return x.Timeend
	}
	return 0
}

func (x *TariffTime) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

// 计费模版相关
// 分时段计时停车费
type TariffParking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestart int32 `protobuf:"varint,1,opt,name=Timestart,proto3" json:"Timestart,omitempty"`
	Price     int32 `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (x *TariffParking) Reset() {
	*x = TariffParking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffParking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffParking) ProtoMessage() {}

func (x *TariffParking) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffParking.ProtoReflect.Descriptor instead.
func (*TariffParking) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{87}
}

func (x *TariffParking) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *TariffParking) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type UpdateEvseAlarmsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseId uint64 `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"` // 设备ID
	Nums   int32  `protobuf:"varint,2,opt,name=nums,proto3" json:"nums,omitempty"`                   // 数量
}

func (x *UpdateEvseAlarmsReq) Reset() {
	*x = UpdateEvseAlarmsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEvseAlarmsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEvseAlarmsReq) ProtoMessage() {}

func (x *UpdateEvseAlarmsReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEvseAlarmsReq.ProtoReflect.Descriptor instead.
func (*UpdateEvseAlarmsReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateEvseAlarmsReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *UpdateEvseAlarmsReq) GetNums() int32 {
	if x != nil {
		return x.Nums
	}
	return 0
}

type UpdateEvseAlarmsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEvseAlarmsResp) Reset() {
	*x = UpdateEvseAlarmsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEvseAlarmsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEvseAlarmsResp) ProtoMessage() {}

func (x *UpdateEvseAlarmsResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEvseAlarmsResp.ProtoReflect.Descriptor instead.
func (*UpdateEvseAlarmsResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{89}
}

type BindLicenseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseId      uint64 `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`                // 设备ID
	PackageId   uint64 `protobuf:"varint,2,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`       // 证书包ID
	ExpiredTime int32  `protobuf:"varint,3,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"` // 过期时间
	IsDc        bool   `protobuf:"varint,4,opt,name=is_dc,json=isDc,proto3" json:"is_dc,omitempty"`                      //直流
	IsCar       bool   `protobuf:"varint,5,opt,name=is_car,json=isCar,proto3" json:"is_car,omitempty"`                   //汽车用
}

func (x *BindLicenseReq) Reset() {
	*x = BindLicenseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindLicenseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindLicenseReq) ProtoMessage() {}

func (x *BindLicenseReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindLicenseReq.ProtoReflect.Descriptor instead.
func (*BindLicenseReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{90}
}

func (x *BindLicenseReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *BindLicenseReq) GetPackageId() uint64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *BindLicenseReq) GetExpiredTime() int32 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *BindLicenseReq) GetIsDc() bool {
	if x != nil {
		return x.IsDc
	}
	return false
}

func (x *BindLicenseReq) GetIsCar() bool {
	if x != nil {
		return x.IsCar
	}
	return false
}

type BindLicenseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums int32 `protobuf:"varint,1,opt,name=nums,proto3" json:"nums,omitempty"` // 绑定的数量，用于更新证书包的占用数
}

func (x *BindLicenseResp) Reset() {
	*x = BindLicenseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindLicenseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindLicenseResp) ProtoMessage() {}

func (x *BindLicenseResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindLicenseResp.ProtoReflect.Descriptor instead.
func (*BindLicenseResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{91}
}

func (x *BindLicenseResp) GetNums() int32 {
	if x != nil {
		return x.Nums
	}
	return 0
}

type UnbindLicenseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseId uint64 `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`
}

func (x *UnbindLicenseReq) Reset() {
	*x = UnbindLicenseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindLicenseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindLicenseReq) ProtoMessage() {}

func (x *UnbindLicenseReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindLicenseReq.ProtoReflect.Descriptor instead.
func (*UnbindLicenseReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{92}
}

func (x *UnbindLicenseReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

type UnbindLicenseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums int32 `protobuf:"varint,1,opt,name=nums,proto3" json:"nums,omitempty"` // 释放数量，用于更新证书包的占用数
}

func (x *UnbindLicenseResp) Reset() {
	*x = UnbindLicenseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindLicenseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindLicenseResp) ProtoMessage() {}

func (x *UnbindLicenseResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindLicenseResp.ProtoReflect.Descriptor instead.
func (*UnbindLicenseResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{93}
}

func (x *UnbindLicenseResp) GetNums() int32 {
	if x != nil {
		return x.Nums
	}
	return 0
}

type CleanOrderMCReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *CleanOrderMCReq) Reset() {
	*x = CleanOrderMCReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanOrderMCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanOrderMCReq) ProtoMessage() {}

func (x *CleanOrderMCReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanOrderMCReq.ProtoReflect.Descriptor instead.
func (*CleanOrderMCReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{94}
}

func (x *CleanOrderMCReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type CleanOrderMCResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanOrderMCResp) Reset() {
	*x = CleanOrderMCResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanOrderMCResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanOrderMCResp) ProtoMessage() {}

func (x *CleanOrderMCResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanOrderMCResp.ProtoReflect.Descriptor instead.
func (*CleanOrderMCResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{95}
}

// 设置屏蔽
type SetBlockedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvseId      uint64 `protobuf:"varint,1,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`                // 设备ID
	Blocked     bool   `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`                            // 是否屏蔽
	ConnectorId uint32 `protobuf:"varint,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` //枪ID
}

func (x *SetBlockedReq) Reset() {
	*x = SetBlockedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlockedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlockedReq) ProtoMessage() {}

func (x *SetBlockedReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlockedReq.ProtoReflect.Descriptor instead.
func (*SetBlockedReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{96}
}

func (x *SetBlockedReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *SetBlockedReq) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *SetBlockedReq) GetConnectorId() uint32 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

type SetBlockedResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBlockedResp) Reset() {
	*x = SetBlockedResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlockedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlockedResp) ProtoMessage() {}

func (x *SetBlockedResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlockedResp.ProtoReflect.Descriptor instead.
func (*SetBlockedResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{97}
}

type SetOrderBackPayStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId       uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                     // 订单id
	BackPayStatus int32  `protobuf:"varint,2,opt,name=back_pay_status,json=backPayStatus,proto3" json:"back_pay_status,omitempty"` // 补缴支付状态 (common/models.KindPayRetState: 0 等待支付, 1 支付成功, 2 失败, 3 支付中)
}

func (x *SetOrderBackPayStatusReq) Reset() {
	*x = SetOrderBackPayStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderBackPayStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderBackPayStatusReq) ProtoMessage() {}

func (x *SetOrderBackPayStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderBackPayStatusReq.ProtoReflect.Descriptor instead.
func (*SetOrderBackPayStatusReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{98}
}

func (x *SetOrderBackPayStatusReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SetOrderBackPayStatusReq) GetBackPayStatus() int32 {
	if x != nil {
		return x.BackPayStatus
	}
	return 0
}

type SetOrderBackPayStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOrderBackPayStatusResp) Reset() {
	*x = SetOrderBackPayStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderBackPayStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderBackPayStatusResp) ProtoMessage() {}

func (x *SetOrderBackPayStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderBackPayStatusResp.ProtoReflect.Descriptor instead.
func (*SetOrderBackPayStatusResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{99}
}

// 确认订单
type SetOrderConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // 订单ID
	State   bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`                    // 成功还是失败
	Remark  string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                   // 备注
	Time    int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`                      // 确认时间
}

func (x *SetOrderConfirmReq) Reset() {
	*x = SetOrderConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderConfirmReq) ProtoMessage() {}

func (x *SetOrderConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderConfirmReq.ProtoReflect.Descriptor instead.
func (*SetOrderConfirmReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{100}
}

func (x *SetOrderConfirmReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SetOrderConfirmReq) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *SetOrderConfirmReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SetOrderConfirmReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SetOrderConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOrderConfirmResp) Reset() {
	*x = SetOrderConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOrderConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOrderConfirmResp) ProtoMessage() {}

func (x *SetOrderConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOrderConfirmResp.ProtoReflect.Descriptor instead.
func (*SetOrderConfirmResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{101}
}

type SetEvseConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RatedPower   float64     `protobuf:"fixed64,2,opt,name=rated_power,json=ratedPower,proto3" json:"rated_power,omitempty"`
	RatedCurrent float64     `protobuf:"fixed64,3,opt,name=rated_current,json=ratedCurrent,proto3" json:"rated_current,omitempty"`
	RatedVoltage float64     `protobuf:"fixed64,4,opt,name=rated_voltage,json=ratedVoltage,proto3" json:"rated_voltage,omitempty"`
	Type         EvseType    `protobuf:"varint,5,opt,name=type,proto3,enum=coregw.EvseType" json:"type,omitempty"`
	VehicleType  VehicleType `protobuf:"varint,6,opt,name=vehicle_type,json=vehicleType,proto3,enum=coregw.VehicleType" json:"vehicle_type,omitempty"`
}

func (x *SetEvseConfigReq) Reset() {
	*x = SetEvseConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEvseConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEvseConfigReq) ProtoMessage() {}

func (x *SetEvseConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEvseConfigReq.ProtoReflect.Descriptor instead.
func (*SetEvseConfigReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{102}
}

func (x *SetEvseConfigReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetEvseConfigReq) GetRatedPower() float64 {
	if x != nil {
		return x.RatedPower
	}
	return 0
}

func (x *SetEvseConfigReq) GetRatedCurrent() float64 {
	if x != nil {
		return x.RatedCurrent
	}
	return 0
}

func (x *SetEvseConfigReq) GetRatedVoltage() float64 {
	if x != nil {
		return x.RatedVoltage
	}
	return 0
}

func (x *SetEvseConfigReq) GetType() EvseType {
	if x != nil {
		return x.Type
	}
	return EvseType_EvseTypeUnknown
}

func (x *SetEvseConfigReq) GetVehicleType() VehicleType {
	if x != nil {
		return x.VehicleType
	}
	return VehicleType_Unknown
}

type SetEvseConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetEvseConfigResp) Reset() {
	*x = SetEvseConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEvseConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEvseConfigResp) ProtoMessage() {}

func (x *SetEvseConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEvseConfigResp.ProtoReflect.Descriptor instead.
func (*SetEvseConfigResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{103}
}

type GetBaseReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                //设备ID
	RequestId int32  `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` //请求ID
}

func (x *GetBaseReportReq) Reset() {
	*x = GetBaseReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseReportReq) ProtoMessage() {}

func (x *GetBaseReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseReportReq.ProtoReflect.Descriptor instead.
func (*GetBaseReportReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{104}
}

func (x *GetBaseReportReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetBaseReportReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type GetBaseReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBaseReportResp) Reset() {
	*x = GetBaseReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseReportResp) ProtoMessage() {}

func (x *GetBaseReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseReportResp.ProtoReflect.Descriptor instead.
func (*GetBaseReportResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{105}
}

type SetVariablesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Val string `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *SetVariablesReq) Reset() {
	*x = SetVariablesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVariablesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariablesReq) ProtoMessage() {}

func (x *SetVariablesReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariablesReq.ProtoReflect.Descriptor instead.
func (*SetVariablesReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{106}
}

func (x *SetVariablesReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetVariablesReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetVariablesReq) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type SetVariablesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetVariablesResp) Reset() {
	*x = SetVariablesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVariablesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariablesResp) ProtoMessage() {}

func (x *SetVariablesResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariablesResp.ProtoReflect.Descriptor instead.
func (*SetVariablesResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{107}
}

type GetLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      int32  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`               //请求ID
	RemoteLocation string `protobuf:"bytes,2,opt,name=remote_location,json=remoteLocation,proto3" json:"remote_location,omitempty"` //地址
}

func (x *GetLogReq) Reset() {
	*x = GetLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogReq) ProtoMessage() {}

func (x *GetLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogReq.ProtoReflect.Descriptor instead.
func (*GetLogReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{108}
}

func (x *GetLogReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GetLogReq) GetRemoteLocation() string {
	if x != nil {
		return x.RemoteLocation
	}
	return ""
}

type GetLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetLogResp) Reset() {
	*x = GetLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogResp) ProtoMessage() {}

func (x *GetLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogResp.ProtoReflect.Descriptor instead.
func (*GetLogResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{109}
}

func (x *GetLogResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type IdTokenInfoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status AuthorizationStatusEnumType `protobuf:"varint,1,opt,name=status,proto3,enum=coregw.AuthorizationStatusEnumType" json:"status,omitempty"`
}

func (x *IdTokenInfoType) Reset() {
	*x = IdTokenInfoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdTokenInfoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdTokenInfoType) ProtoMessage() {}

func (x *IdTokenInfoType) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdTokenInfoType.ProtoReflect.Descriptor instead.
func (*IdTokenInfoType) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{110}
}

func (x *IdTokenInfoType) GetStatus() AuthorizationStatusEnumType {
	if x != nil {
		return x.Status
	}
	return AuthorizationStatusEnumType_AS_Accepted
}

//IdTokenType 身份信息，OCPP以及新版本用
type IdTokenType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdToken string          `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	Type    IdTokenEnumType `protobuf:"varint,2,opt,name=type,proto3,enum=coregw.IdTokenEnumType" json:"type,omitempty"`
}

func (x *IdTokenType) Reset() {
	*x = IdTokenType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdTokenType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdTokenType) ProtoMessage() {}

func (x *IdTokenType) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdTokenType.ProtoReflect.Descriptor instead.
func (*IdTokenType) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{111}
}

func (x *IdTokenType) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *IdTokenType) GetType() IdTokenEnumType {
	if x != nil {
		return x.Type
	}
	return IdTokenEnumType_ITE_Central
}

//AuthorizationData 授权信息
type AuthorizationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdTokenInfo *IdTokenInfoType `protobuf:"bytes,1,opt,name=idTokenInfo,proto3" json:"idTokenInfo,omitempty"`
	IdToken     *IdTokenType     `protobuf:"bytes,2,opt,name=idToken,proto3" json:"idToken,omitempty"`
}

func (x *AuthorizationData) Reset() {
	*x = AuthorizationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationData) ProtoMessage() {}

func (x *AuthorizationData) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationData.ProtoReflect.Descriptor instead.
func (*AuthorizationData) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{112}
}

func (x *AuthorizationData) GetIdTokenInfo() *IdTokenInfoType {
	if x != nil {
		return x.IdTokenInfo
	}
	return nil
}

func (x *AuthorizationData) GetIdToken() *IdTokenType {
	if x != nil {
		return x.IdToken
	}
	return nil
}

type SyncLocalAuthorizationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationData []*AuthorizationData `protobuf:"bytes,1,rep,name=authorization_data,json=authorizationData,proto3" json:"authorization_data,omitempty"`
}

func (x *SyncLocalAuthorizationListReq) Reset() {
	*x = SyncLocalAuthorizationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncLocalAuthorizationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncLocalAuthorizationListReq) ProtoMessage() {}

func (x *SyncLocalAuthorizationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncLocalAuthorizationListReq.ProtoReflect.Descriptor instead.
func (*SyncLocalAuthorizationListReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{113}
}

func (x *SyncLocalAuthorizationListReq) GetAuthorizationData() []*AuthorizationData {
	if x != nil {
		return x.AuthorizationData
	}
	return nil
}

type SyncLocalAuthorizationListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncLocalAuthorizationListResp) Reset() {
	*x = SyncLocalAuthorizationListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncLocalAuthorizationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncLocalAuthorizationListResp) ProtoMessage() {}

func (x *SyncLocalAuthorizationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncLocalAuthorizationListResp.ProtoReflect.Descriptor instead.
func (*SyncLocalAuthorizationListResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{114}
}

type ReserveNowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //预约ID
	//    int32 expiry_date_time = 2; //过期时间
	IsCycle     bool         `protobuf:"varint,2,opt,name=is_cycle,json=isCycle,proto3" json:"is_cycle,omitempty"`             //是否周期性
	ConnectorId uint64       `protobuf:"varint,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` //枪ID
	IdToken     *IdTokenType `protobuf:"bytes,4,opt,name=idToken,proto3" json:"idToken,omitempty"`                             //客户信息
	ChargeTime  uint32       `protobuf:"varint,5,opt,name=charge_time,json=chargeTime,proto3" json:"charge_time,omitempty"`    //启动充电的时间
	StopTime    uint32       `protobuf:"varint,6,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`          // 停止充电的时间
}

func (x *ReserveNowReq) Reset() {
	*x = ReserveNowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveNowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveNowReq) ProtoMessage() {}

func (x *ReserveNowReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveNowReq.ProtoReflect.Descriptor instead.
func (*ReserveNowReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{115}
}

func (x *ReserveNowReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReserveNowReq) GetIsCycle() bool {
	if x != nil {
		return x.IsCycle
	}
	return false
}

func (x *ReserveNowReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *ReserveNowReq) GetIdToken() *IdTokenType {
	if x != nil {
		return x.IdToken
	}
	return nil
}

func (x *ReserveNowReq) GetChargeTime() uint32 {
	if x != nil {
		return x.ChargeTime
	}
	return 0
}

func (x *ReserveNowReq) GetStopTime() uint32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

type ReserveNowResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReserveNowResp_Status `protobuf:"varint,1,opt,name=status,proto3,enum=coregw.ReserveNowResp_Status" json:"status,omitempty"` //状态
}

func (x *ReserveNowResp) Reset() {
	*x = ReserveNowResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveNowResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveNowResp) ProtoMessage() {}

func (x *ReserveNowResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveNowResp.ProtoReflect.Descriptor instead.
func (*ReserveNowResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{116}
}

func (x *ReserveNowResp) GetStatus() ReserveNowResp_Status {
	if x != nil {
		return x.Status
	}
	return ReserveNowResp_Accepted
}

//*
// CancelReservationReq
// 取消预约充电.请求
type CancelReservationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId uint64 `protobuf:"varint,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` //枪ID
}

func (x *CancelReservationReq) Reset() {
	*x = CancelReservationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReservationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationReq) ProtoMessage() {}

func (x *CancelReservationReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationReq.ProtoReflect.Descriptor instead.
func (*CancelReservationReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{117}
}

func (x *CancelReservationReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

//*
// CancelReservationResp
// 取消预约充电.响应
type CancelReservationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CancelReservationResp_Status `protobuf:"varint,1,opt,name=status,proto3,enum=coregw.CancelReservationResp_Status" json:"status,omitempty"` //状态
}

func (x *CancelReservationResp) Reset() {
	*x = CancelReservationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReservationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationResp) ProtoMessage() {}

func (x *CancelReservationResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationResp.ProtoReflect.Descriptor instead.
func (*CancelReservationResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{118}
}

func (x *CancelReservationResp) GetStatus() CancelReservationResp_Status {
	if x != nil {
		return x.Status
	}
	return CancelReservationResp_Accepted
}

type RemoteDiagnosisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagType   string `protobuf:"bytes,1,opt,name=diagType,proto3" json:"diagType,omitempty"`     // 22-read_data_by_identifier 2E-write_data_by_identifier 31-routine_control 14-clear_diagnostic_information 4-vehicle_passthrough
	SendCanID  string `protobuf:"bytes,2,opt,name=sendCanID,proto3" json:"sendCanID,omitempty"`   // send canID
	SendLength string `protobuf:"bytes,3,opt,name=sendLength,proto3" json:"sendLength,omitempty"` // send data byte length
	SendData   string `protobuf:"bytes,4,opt,name=sendData,proto3" json:"sendData,omitempty"`     // send data
	RecvCanID  string `protobuf:"bytes,5,opt,name=recvCanID,proto3" json:"recvCanID,omitempty"`   // receive canID
	Manager    string `protobuf:"bytes,6,opt,name=manager,proto3" json:"manager,omitempty"`       // manager like SVW
}

func (x *RemoteDiagnosisReq) Reset() {
	*x = RemoteDiagnosisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDiagnosisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDiagnosisReq) ProtoMessage() {}

func (x *RemoteDiagnosisReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDiagnosisReq.ProtoReflect.Descriptor instead.
func (*RemoteDiagnosisReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{119}
}

func (x *RemoteDiagnosisReq) GetDiagType() string {
	if x != nil {
		return x.DiagType
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetSendCanID() string {
	if x != nil {
		return x.SendCanID
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetSendLength() string {
	if x != nil {
		return x.SendLength
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetSendData() string {
	if x != nil {
		return x.SendData
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetRecvCanID() string {
	if x != nil {
		return x.RecvCanID
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

type RemoteDiagnosisResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanID     string `protobuf:"bytes,1,opt,name=canID,proto3" json:"canID,omitempty"`
	CanLength string `protobuf:"bytes,2,opt,name=canLength,proto3" json:"canLength,omitempty"`
	CanData   string `protobuf:"bytes,3,opt,name=canData,proto3" json:"canData,omitempty"`
}

func (x *RemoteDiagnosisResp) Reset() {
	*x = RemoteDiagnosisResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDiagnosisResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDiagnosisResp) ProtoMessage() {}

func (x *RemoteDiagnosisResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDiagnosisResp.ProtoReflect.Descriptor instead.
func (*RemoteDiagnosisResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{120}
}

func (x *RemoteDiagnosisResp) GetCanID() string {
	if x != nil {
		return x.CanID
	}
	return ""
}

func (x *RemoteDiagnosisResp) GetCanLength() string {
	if x != nil {
		return x.CanLength
	}
	return ""
}

func (x *RemoteDiagnosisResp) GetCanData() string {
	if x != nil {
		return x.CanData
	}
	return ""
}

type ReserveStopTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //预约ID
	//    int32 expiry_date_time = 2; //过期时间
	IsCycle     bool         `protobuf:"varint,2,opt,name=is_cycle,json=isCycle,proto3" json:"is_cycle,omitempty"`             //是否周期性
	ConnectorId uint64       `protobuf:"varint,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"` //枪ID
	IdToken     *IdTokenType `protobuf:"bytes,4,opt,name=idToken,proto3" json:"idToken,omitempty"`                             //客户信息
	StartTime   uint32       `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`       //启动充电的时间
	StopTime    uint32       `protobuf:"varint,6,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`          //停止充电的时间
}

func (x *ReserveStopTransactionReq) Reset() {
	*x = ReserveStopTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveStopTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveStopTransactionReq) ProtoMessage() {}

func (x *ReserveStopTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveStopTransactionReq.ProtoReflect.Descriptor instead.
func (*ReserveStopTransactionReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{121}
}

func (x *ReserveStopTransactionReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReserveStopTransactionReq) GetIsCycle() bool {
	if x != nil {
		return x.IsCycle
	}
	return false
}

func (x *ReserveStopTransactionReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *ReserveStopTransactionReq) GetIdToken() *IdTokenType {
	if x != nil {
		return x.IdToken
	}
	return nil
}

func (x *ReserveStopTransactionReq) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ReserveStopTransactionReq) GetStopTime() uint32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

type ReserveStopTransactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReserveStopTransactionResp) Reset() {
	*x = ReserveStopTransactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveStopTransactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveStopTransactionResp) ProtoMessage() {}

func (x *ReserveStopTransactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveStopTransactionResp.ProtoReflect.Descriptor instead.
func (*ReserveStopTransactionResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{122}
}

type CancelReserveStopTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId uint64 `protobuf:"varint,1,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
}

func (x *CancelReserveStopTransactionReq) Reset() {
	*x = CancelReserveStopTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReserveStopTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReserveStopTransactionReq) ProtoMessage() {}

func (x *CancelReserveStopTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReserveStopTransactionReq.ProtoReflect.Descriptor instead.
func (*CancelReserveStopTransactionReq) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{123}
}

func (x *CancelReserveStopTransactionReq) GetConnectorId() uint64 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

type CancelReserveStopTransactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelReserveStopTransactionResp) Reset() {
	*x = CancelReserveStopTransactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReserveStopTransactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReserveStopTransactionResp) ProtoMessage() {}

func (x *CancelReserveStopTransactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReserveStopTransactionResp.ProtoReflect.Descriptor instead.
func (*CancelReserveStopTransactionResp) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{124}
}

type ChartDataResp_Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name int32                 `protobuf:"varint,1,opt,name=name,proto3" json:"name,omitempty"`
	Data []*ChartDataResp_Data `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ChartDataResp_Metric) Reset() {
	*x = ChartDataResp_Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDataResp_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDataResp_Metric) ProtoMessage() {}

func (x *ChartDataResp_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDataResp_Metric.ProtoReflect.Descriptor instead.
func (*ChartDataResp_Metric) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{83, 0}
}

func (x *ChartDataResp_Metric) GetName() int32 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *ChartDataResp_Metric) GetData() []*ChartDataResp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChartDataResp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Val  float64 `protobuf:"fixed64,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *ChartDataResp_Data) Reset() {
	*x = ChartDataResp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coregw_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDataResp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDataResp_Data) ProtoMessage() {}

func (x *ChartDataResp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_coregw_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDataResp_Data.ProtoReflect.Descriptor instead.
func (*ChartDataResp_Data) Descriptor() ([]byte, []int) {
	return file_coregw_proto_rawDescGZIP(), []int{83, 1}
}

func (x *ChartDataResp_Data) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ChartDataResp_Data) GetVal() float64 {
	if x != nil {
		return x.Val
	}
	return 0
}

var File_coregw_proto protoreflect.FileDescriptor

var file_coregw_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x05, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6b, 0x77, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4b, 0x77,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x75,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35,
	0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8b,
	0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x1a, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x45, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22, 0x14, 0x0a,
	0x12, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x73,
	0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x71, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x45, 0x73, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x57, 0x0a, 0x13,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x4d, 0x44,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x4d, 0x44, 0x52, 0x65, 0x73, 0x70, 0x22, 0xe2, 0x01,
	0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6c,
	0x65, 0x63, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0xdf, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6c, 0x65, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x55, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x16, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77,
	0x12, 0x32, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x22, 0x40, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x47, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x19, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x63, 0x0a, 0x0e, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x22,
	0x36, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x82,
	0x0a, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x61,
	0x72, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x70, 0x65, 0x61, 0x6b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c,
	0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x70,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x70, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70,
	0x65, 0x61, 0x6b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x65, 0x61, 0x6b, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x66, 0x6c, 0x61, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x66, 0x6c, 0x61, 0x74,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70,
	0x65, 0x61, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x6c, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x49, 0x44, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x12, 0x34,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x74,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x72,
	0x65, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x6e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x50, 0x0a, 0x12, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x21, 0x0a, 0x07, 0x45, 0x76, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x1d,
	0x45, 0x76, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x41, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x14, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0x5f, 0x0a, 0x08, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x65,
	0x76, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x22, 0x4c, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x2b,
	0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb6, 0x01, 0x0a,
	0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x66, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x66, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x1a, 0x38, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x4d, 0x51, 0x54,
	0x54, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x71, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x76, 0x73, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x73,
	0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x0d, 0x0a,
	0x0b, 0x4d, 0x51, 0x54, 0x54, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x13,
	0x45, 0x76, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x76, 0x73, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x20, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x36, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x25, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xbe, 0x17, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x05, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x05,
	0x62, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45,
	0x76, 0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x70, 0x65, 0x61, 0x6b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72,
	0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x70, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x65, 0x61, 0x6b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x65, 0x61, 0x6b, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x66, 0x6c, 0x61, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x66, 0x6c, 0x61,
	0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x65, 0x61, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x6f,
	0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x6f, 0x63, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x63,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x63, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x6f, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x22, 0x94, 0x02, 0x0a, 0x05, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9a, 0x0c, 0x0a, 0x04, 0x45, 0x76, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x53,
	0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x53, 0x4e, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6a, 0x6f, 0x62,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x44, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x6a, 0x6f, 0x62, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6a, 0x6f, 0x62, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0a,
	0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x2e, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x4e,
	0x75, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x4e, 0x75, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x53, 0x53, 0x49, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x53, 0x53, 0x49, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x43, 0x43, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x43, 0x43, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74,
	0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x74, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x74, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x5f,
	0x70, 0x77, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x74, 0x50, 0x77, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3d, 0x0a,
	0x0f, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x02, 0x0a,
	0x04, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x22, 0x99, 0x0a, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f,
	0x77, 0x61, 0x74, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x6f, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49, 0x73, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a,
	0x12, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73,
	0x6e, 0x22, 0x57, 0x0a, 0x13, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x65, 0x76, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45,
	0x76, 0x73, 0x65, 0x52, 0x05, 0x65, 0x76, 0x73, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x45, 0x76,
	0x73, 0x65, 0x73, 0x42, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x22,
	0x36, 0x0a, 0x12, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73,
	0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x45, 0x76,
	0x73, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x65,
	0x76, 0x73, 0x65, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65,
	0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x45, 0x76, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x45, 0x76, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6e, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3c, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x79, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x65, 0x67, 0x22, 0x40, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xcb, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x63, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x63, 0x5f, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x63, 0x41, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x5f, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x41, 0x76, 0x61, 0x6c, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x67, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x12, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x45, 0x76, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x05, 0x45, 0x76, 0x73, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x0b,
	0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76,
	0x73, 0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x0c, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65,
	0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x45, 0x76, 0x73,
	0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x12, 0x45, 0x76,
	0x73, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x22,
	0x0a, 0x05, 0x45, 0x76, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x05, 0x45, 0x76, 0x73,
	0x65, 0x73, 0x22, 0x36, 0x0a, 0x16, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x17, 0x45, 0x76,
	0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x0e, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x68, 0x0a,
	0x1c, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x4c, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x2c, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x55, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x07, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6c, 0x65, 0x63, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x6c, 0x65, 0x63, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x43,
	0x0a, 0x0d, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x42, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x73,
	0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x97, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a,
	0x05, 0x69, 0x73, 0x5f, 0x64, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x44, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x43, 0x61, 0x72, 0x22, 0x25, 0x0a, 0x0f, 0x42, 0x69, 0x6e,
	0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73,
	0x22, 0x2b, 0x0a, 0x10, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x22, 0x27, 0x0a,
	0x11, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x2c, 0x0a, 0x0f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x43, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x43, 0x52, 0x65, 0x73, 0x70, 0x22, 0x65, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x5d, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63,
	0x6b, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x71, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x45,
	0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45,
	0x76, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x13, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x45, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x53, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x0f, 0x49, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x49, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x7d, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0b, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2d, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x69,
	0x0a, 0x1d, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x48, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x79, 0x6e,
	0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x69,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x50, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x04, 0x22, 0x39, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0x7b, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0xc2, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x76, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x76, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x22, 0x63, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x49, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1c, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44, 0x0a, 0x1f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x2a, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x4f, 0x72, 0x41, 0x6c, 0x69, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x4c,
	0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x54, 0x50, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x54, 0x50, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x54, 0x50, 0x5f,
	0x43, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x0b,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x69, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x42, 0x69, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x10,
	0x03, 0x2a, 0x3f, 0x0a, 0x08, 0x45, 0x76, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x76, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x76, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x43,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x76, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x43,
	0x10, 0x02, 0x2a, 0x43, 0x0a, 0x10, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x50, 0x4f, 0x53, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x43, 0x50, 0x5f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x50, 0x5f, 0x46, 0x65, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x20, 0x2a, 0xa2, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x54, 0x45, 0x5f, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x54, 0x45, 0x5f, 0x65, 0x4d, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x54, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x31, 0x34, 0x34, 0x34, 0x33, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x31, 0x35, 0x36, 0x39, 0x33, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x54, 0x45, 0x5f, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x5f, 0x4e, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x2a, 0x9e, 0x02, 0x0a,
	0x1b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x53, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x53, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x53, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x5f, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x5f, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x53, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x53, 0x5f, 0x4e, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x56, 0x53, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x41, 0x74, 0x54, 0x68, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x5f, 0x4e, 0x6f,
	0x74, 0x41, 0x74, 0x54, 0x68, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0b, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x53, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x63, 0x32, 0x83, 0x14,
	0x0a, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x53, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x13, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x42, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4f, 0x0a, 0x14, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x42, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65,
	0x73, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x45,
	0x76, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x08, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x11, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x73, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x73, 0x65, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x74, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x79, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e,
	0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65,
	0x73, 0x42, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47,
	0x0a, 0x0e, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42,
	0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x73, 0x42, 0x79, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x1a, 0x45, 0x76,
	0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x41, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x6e, 0x64, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x68, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x43,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x42,
	0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x55,
	0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x41, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x43, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x43, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x43,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x45,
	0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x45, 0x76,
	0x73, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x53, 0x65, 0x74, 0x45, 0x76, 0x73, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x32, 0xae, 0x0d, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4d, 0x51, 0x54, 0x54, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x45, 0x76, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45,
	0x76, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x41, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x11, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x42, 0x69,
	0x6e, 0x64, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x11, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x45, 0x76, 0x73, 0x65, 0x12, 0x0f, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x45, 0x76, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x44, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x4d, 0x44, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x4d, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x4d, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b,
	0x0a, 0x1a, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x1a, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x67, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67,
	0x77, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x11,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x67, 0x77, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x36, 0x48, 0x03, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x63, 0x73, 0x6d,
	0x73, 0x2e, 0x6a, 0x6f, 0x79, 0x73, 0x6f, 0x6e, 0x71, 0x75, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x73, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x67, 0x77, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coregw_proto_rawDescOnce sync.Once
	file_coregw_proto_rawDescData = file_coregw_proto_rawDesc
)

func file_coregw_proto_rawDescGZIP() []byte {
	file_coregw_proto_rawDescOnce.Do(func() {
		file_coregw_proto_rawDescData = protoimpl.X.CompressGZIP(file_coregw_proto_rawDescData)
	})
	return file_coregw_proto_rawDescData
}

var file_coregw_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_coregw_proto_msgTypes = make([]protoimpl.MessageInfo, 130)
var file_coregw_proto_goTypes = []interface{}{
	(RemoteStartType)(0),                      // 0: coregw.RemoteStartType
	(CouponTypePos)(0),                        // 1: coregw.CouponTypePos
	(VehicleType)(0),                          // 2: coregw.VehicleType
	(EvseType)(0),                             // 3: coregw.EvseType
	(EvseComponentPOS)(0),                     // 4: coregw.EvseComponentPOS
	(IdTokenEnumType)(0),                      // 5: coregw.IdTokenEnumType
	(AuthorizationStatusEnumType)(0),          // 6: coregw.AuthorizationStatusEnumType
	(ReserveNowResp_Status)(0),                // 7: coregw.ReserveNowResp.Status
	(CancelReservationResp_Status)(0),         // 8: coregw.CancelReservationResp.Status
	(*ApplyOrderReq)(nil),                     // 9: coregw.ApplyOrderReq
	(*ApplyOrderResp)(nil),                    // 10: coregw.ApplyOrderResp
	(*SetOrderPayStatusReq)(nil),              // 11: coregw.SetOrderPayStatusReq
	(*SetOrderPayStatusResp)(nil),             // 12: coregw.SetOrderPayStatusResp
	(*SetOrderRefundStatusReq)(nil),           // 13: coregw.SetOrderRefundStatusReq
	(*SetOrderRefundStatusResp)(nil),          // 14: coregw.SetOrderRefundStatusResp
	(*RebuildEsOrderReq)(nil),                 // 15: coregw.RebuildEsOrderReq
	(*RebuildEsOrderResp)(nil),                // 16: coregw.RebuildEsOrderResp
	(*RebuildEsEvseReq)(nil),                  // 17: coregw.RebuildEsEvseReq
	(*RebuildEsEvseResp)(nil),                 // 18: coregw.RebuildEsEvseResp
	(*TriggerDeviceCMDReq)(nil),               // 19: coregw.TriggerDeviceCMDReq
	(*TriggerDeviceCMDResp)(nil),              // 20: coregw.TriggerDeviceCMDResp
	(*EditOrderDataReq)(nil),                  // 21: coregw.EditOrderDataReq
	(*EditOrderDataResp)(nil),                 // 22: coregw.EditOrderDataResp
	(*ManualOrderSettlementReq)(nil),          // 23: coregw.ManualOrderSettlementReq
	(*ManualOrderSettlementResp)(nil),         // 24: coregw.ManualOrderSettlementResp
	(*SetOrderSettlementedResp)(nil),          // 25: coregw.SetOrderSettlementedResp
	(*OrderStateTimelineReq)(nil),             // 26: coregw.OrderStateTimelineReq
	(*OrderStateTimelineResp)(nil),            // 27: coregw.OrderStateTimelineResp
	(*OrderStateTimelineData)(nil),            // 28: coregw.OrderStateTimelineData
	(*ConnectorBindQRCodeReq)(nil),            // 29: coregw.ConnectorBindQRCodeReq
	(*ConnectorBindQRCodeResp)(nil),           // 30: coregw.ConnectorBindQRCodeResp
	(*RemoteStartReq)(nil),                    // 31: coregw.RemoteStartReq
	(*RemoteStartResp)(nil),                   // 32: coregw.RemoteStartResp
	(*RemoteStopReq)(nil),                     // 33: coregw.RemoteStopReq
	(*RemoteStopResp)(nil),                    // 34: coregw.RemoteStopResp
	(*SetTariffReq)(nil),                      // 35: coregw.SetTariffReq
	(*SetPriceSchemeResp)(nil),                // 36: coregw.SetPriceSchemeResp
	(*GetTransactionsReq)(nil),                // 37: coregw.GetTransactionsReq
	(*GetTransactionsResp)(nil),               // 38: coregw.GetTransactionsResp
	(*BindEvseStationReq)(nil),                // 39: coregw.BindEvseStationReq
	(*BindEvseStationResp)(nil),               // 40: coregw.BindEvseStationResp
	(*EvseReq)(nil),                           // 41: coregw.EvseReq
	(*EvseWithTopicPrefixAndUUIDReq)(nil),     // 42: coregw.EvseWithTopicPrefixAndUUIDReq
	(*EvseByConnectorIDReq)(nil),              // 43: coregw.EvseByConnectorIDReq
	(*EvseResp)(nil),                          // 44: coregw.EvseResp
	(*RemoteControlReq)(nil),                  // 45: coregw.RemoteControlReq
	(*RemoteControlResp)(nil),                 // 46: coregw.RemoteControlResp
	(*GetDiagnosticsReq)(nil),                 // 47: coregw.GetDiagnosticsReq
	(*GetDiagnosticsResp)(nil),                // 48: coregw.GetDiagnosticsResp
	(*UpdateFirmwareReq)(nil),                 // 49: coregw.UpdateFirmwareReq
	(*UpdateFirmwareResp)(nil),                // 50: coregw.UpdateFirmwareResp
	(*ChangeConfigurationReq)(nil),            // 51: coregw.ChangeConfigurationReq
	(*ChangeConfigurationResp)(nil),           // 52: coregw.ChangeConfigurationResp
	(*MQTTMsgReq)(nil),                        // 53: coregw.MQTTMsgReq
	(*MQTTMsgResp)(nil),                       // 54: coregw.MQTTMsgResp
	(*EvseDisconnectedReq)(nil),               // 55: coregw.EvseDisconnectedReq
	(*EvseDisconnectedResp)(nil),              // 56: coregw.EvseDisconnectedResp
	(*OrderInfoReq)(nil),                      // 57: coregw.OrderInfoReq
	(*OrderInfoResp)(nil),                     // 58: coregw.OrderInfoResp
	(*Order)(nil),                             // 59: coregw.Order
	(*Model)(nil),                             // 60: coregw.Model
	(*Evse)(nil),                              // 61: coregw.Evse
	(*Bill)(nil),                              // 62: coregw.Bill
	(*Connector)(nil),                         // 63: coregw.Connector
	(*EvsesByOperatorReq)(nil),                // 64: coregw.EvsesByOperatorReq
	(*EvsesByOperatorResp)(nil),               // 65: coregw.EvsesByOperatorResp
	(*EvsesByVisitedReq)(nil),                 // 66: coregw.EvsesByVisitedReq
	(*EvsesByVisitedResp)(nil),                // 67: coregw.EvsesByVisitedResp
	(*SetEvsesVisitedReq)(nil),                // 68: coregw.SetEvsesVisitedReq
	(*SetEvsesVisitedResp)(nil),               // 69: coregw.SetEvsesVisitedResp
	(*ConnectorsByEvseReq)(nil),               // 70: coregw.ConnectorsByEvseReq
	(*ConnectorsByEvseResp)(nil),              // 71: coregw.ConnectorsByEvseResp
	(*ConnectorReq)(nil),                      // 72: coregw.ConnectorReq
	(*ConnectorResp)(nil),                     // 73: coregw.ConnectorResp
	(*SetConnectorReq)(nil),                   // 74: coregw.SetConnectorReq
	(*SetConnectorResp)(nil),                  // 75: coregw.SetConnectorResp
	(*ConnectorByQRCodeReq)(nil),              // 76: coregw.ConnectorByQRCodeReq
	(*ConnectorStateCalcByStationIDReq)(nil),  // 77: coregw.ConnectorStateCalcByStationIDReq
	(*ConnectorStateCalcByStationIDResp)(nil), // 78: coregw.ConnectorStateCalcByStationIDResp
	(*ConnectorsByStationIDReq)(nil),          // 79: coregw.ConnectorsByStationIDReq
	(*ConnectorsByStationIDResp)(nil),         // 80: coregw.ConnectorsByStationIDResp
	(*EvsesByStationReq)(nil),                 // 81: coregw.EvsesByStationReq
	(*EvsesByStationResp)(nil),                // 82: coregw.EvsesByStationResp
	(*EvseByIDReq)(nil),                       // 83: coregw.EvseByIDReq
	(*EvseByIDResp)(nil),                      // 84: coregw.EvseByIDResp
	(*EvsesByManagerReq)(nil),                 // 85: coregw.EvsesByManagerReq
	(*EvsesByManagerResp)(nil),                // 86: coregw.EvsesByManagerResp
	(*EvseAlarmsByManagerReq)(nil),            // 87: coregw.EvseAlarmsByManagerReq
	(*EvseAlarmsByOperatorReq)(nil),           // 88: coregw.EvseAlarmsByOperatorReq
	(*EvseAlarmsResp)(nil),                    // 89: coregw.EvseAlarmsResp
	(*SetPaymentCheckIsCanStartReq)(nil),      // 90: coregw.SetPaymentCheckIsCanStartReq
	(*SetPaymentCheckIsCanStartResp)(nil),     // 91: coregw.SetPaymentCheckIsCanStartResp
	(*ChartDataResp)(nil),                     // 92: coregw.ChartDataResp
	(*IdToken)(nil),                           // 93: coregw.IdToken
	(*TariffCharge)(nil),                      // 94: coregw.TariffCharge
	(*TariffTime)(nil),                        // 95: coregw.TariffTime
	(*TariffParking)(nil),                     // 96: coregw.TariffParking
	(*UpdateEvseAlarmsReq)(nil),               // 97: coregw.UpdateEvseAlarmsReq
	(*UpdateEvseAlarmsResp)(nil),              // 98: coregw.UpdateEvseAlarmsResp
	(*BindLicenseReq)(nil),                    // 99: coregw.BindLicenseReq
	(*BindLicenseResp)(nil),                   // 100: coregw.BindLicenseResp
	(*UnbindLicenseReq)(nil),                  // 101: coregw.UnbindLicenseReq
	(*UnbindLicenseResp)(nil),                 // 102: coregw.UnbindLicenseResp
	(*CleanOrderMCReq)(nil),                   // 103: coregw.CleanOrderMCReq
	(*CleanOrderMCResp)(nil),                  // 104: coregw.CleanOrderMCResp
	(*SetBlockedReq)(nil),                     // 105: coregw.SetBlockedReq
	(*SetBlockedResp)(nil),                    // 106: coregw.SetBlockedResp
	(*SetOrderBackPayStatusReq)(nil),          // 107: coregw.SetOrderBackPayStatusReq
	(*SetOrderBackPayStatusResp)(nil),         // 108: coregw.SetOrderBackPayStatusResp
	(*SetOrderConfirmReq)(nil),                // 109: coregw.SetOrderConfirmReq
	(*SetOrderConfirmResp)(nil),               // 110: coregw.SetOrderConfirmResp
	(*SetEvseConfigReq)(nil),                  // 111: coregw.SetEvseConfigReq
	(*SetEvseConfigResp)(nil),                 // 112: coregw.SetEvseConfigResp
	(*GetBaseReportReq)(nil),                  // 113: coregw.GetBaseReportReq
	(*GetBaseReportResp)(nil),                 // 114: coregw.GetBaseReportResp
	(*SetVariablesReq)(nil),                   // 115: coregw.SetVariablesReq
	(*SetVariablesResp)(nil),                  // 116: coregw.SetVariablesResp
	(*GetLogReq)(nil),                         // 117: coregw.GetLogReq
	(*GetLogResp)(nil),                        // 118: coregw.GetLogResp
	(*IdTokenInfoType)(nil),                   // 119: coregw.IdTokenInfoType
	(*IdTokenType)(nil),                       // 120: coregw.IdTokenType
	(*AuthorizationData)(nil),                 // 121: coregw.AuthorizationData
	(*SyncLocalAuthorizationListReq)(nil),     // 122: coregw.SyncLocalAuthorizationListReq
	(*SyncLocalAuthorizationListResp)(nil),    // 123: coregw.SyncLocalAuthorizationListResp
	(*ReserveNowReq)(nil),                     // 124: coregw.ReserveNowReq
	(*ReserveNowResp)(nil),                    // 125: coregw.ReserveNowResp
	(*CancelReservationReq)(nil),              // 126: coregw.CancelReservationReq
	(*CancelReservationResp)(nil),             // 127: coregw.CancelReservationResp
	(*RemoteDiagnosisReq)(nil),                // 128: coregw.RemoteDiagnosisReq
	(*RemoteDiagnosisResp)(nil),               // 129: coregw.RemoteDiagnosisResp
	(*ReserveStopTransactionReq)(nil),         // 130: coregw.ReserveStopTransactionReq
	(*ReserveStopTransactionResp)(nil),        // 131: coregw.ReserveStopTransactionResp
	(*CancelReserveStopTransactionReq)(nil),   // 132: coregw.CancelReserveStopTransactionReq
	(*CancelReserveStopTransactionResp)(nil),  // 133: coregw.CancelReserveStopTransactionResp
	nil,                                       // 134: coregw.ChangeConfigurationReq.ConfsEntry
	nil,                                       // 135: coregw.Evse.TariffInfoEntry
	(*ChartDataResp_Metric)(nil),              // 136: coregw.ChartDataResp.Metric
	(*ChartDataResp_Data)(nil),                // 137: coregw.ChartDataResp.Data
	nil,                                       // 138: coregw.ChartDataResp.DataEntry
	(common.PayMode)(0),                       // 139: common.PayMode
	(common.RefundMode)(0),                    // 140: common.RefundMode
	(common.PayChannel)(0),                    // 141: common.PayChannel
}
var file_coregw_proto_depIdxs = []int32{
	139, // 0: coregw.ApplyOrderReq.pay_mode:type_name -> common.PayMode
	59,  // 1: coregw.ApplyOrderResp.order:type_name -> coregw.Order
	28,  // 2: coregw.OrderStateTimelineResp.rows:type_name -> coregw.OrderStateTimelineData
	35,  // 3: coregw.RemoteStartReq.priceScheme:type_name -> coregw.SetTariffReq
	59,  // 4: coregw.RemoteStartResp.order:type_name -> coregw.Order
	94,  // 5: coregw.SetTariffReq.chargetariffs:type_name -> coregw.TariffCharge
	95,  // 6: coregw.SetTariffReq.timetariffs:type_name -> coregw.TariffTime
	96,  // 7: coregw.SetTariffReq.parkingtariffs:type_name -> coregw.TariffParking
	61,  // 8: coregw.EvseResp.evse:type_name -> coregw.Evse
	63,  // 9: coregw.EvseResp.connectors:type_name -> coregw.Connector
	134, // 10: coregw.ChangeConfigurationReq.confs:type_name -> coregw.ChangeConfigurationReq.ConfsEntry
	59,  // 11: coregw.OrderInfoResp.orders:type_name -> coregw.Order
	62,  // 12: coregw.Order.bills:type_name -> coregw.Bill
	61,  // 13: coregw.Order.evse:type_name -> coregw.Evse
	63,  // 14: coregw.Order.connector:type_name -> coregw.Connector
	139, // 15: coregw.Order.pay_mode:type_name -> common.PayMode
	140, // 16: coregw.Order.refund_mode:type_name -> common.RefundMode
	141, // 17: coregw.Order.pay_channel:type_name -> common.PayChannel
	2,   // 18: coregw.Model.vehicle_type:type_name -> coregw.VehicleType
	60,  // 19: coregw.Evse.model:type_name -> coregw.Model
	135, // 20: coregw.Evse.tariffInfo:type_name -> coregw.Evse.TariffInfoEntry
	3,   // 21: coregw.Evse.type:type_name -> coregw.EvseType
	2,   // 22: coregw.Evse.vehicle_type:type_name -> coregw.VehicleType
	61,  // 23: coregw.Connector.evse:type_name -> coregw.Evse
	61,  // 24: coregw.EvsesByOperatorResp.evses:type_name -> coregw.Evse
	61,  // 25: coregw.EvsesByVisitedResp.evse:type_name -> coregw.Evse
	63,  // 26: coregw.ConnectorsByEvseResp.connectors:type_name -> coregw.Connector
	61,  // 27: coregw.ConnectorResp.evse:type_name -> coregw.Evse
	63,  // 28: coregw.ConnectorResp.connector:type_name -> coregw.Connector
	63,  // 29: coregw.ConnectorsByStationIDResp.connectors:type_name -> coregw.Connector
	61,  // 30: coregw.EvsesByStationResp.Evses:type_name -> coregw.Evse
	61,  // 31: coregw.EvseByIDResp.evse:type_name -> coregw.Evse
	63,  // 32: coregw.EvseByIDResp.connectors:type_name -> coregw.Connector
	61,  // 33: coregw.EvsesByManagerResp.Evses:type_name -> coregw.Evse
	138, // 34: coregw.ChartDataResp.data:type_name -> coregw.ChartDataResp.DataEntry
	3,   // 35: coregw.SetEvseConfigReq.type:type_name -> coregw.EvseType
	2,   // 36: coregw.SetEvseConfigReq.vehicle_type:type_name -> coregw.VehicleType
	6,   // 37: coregw.IdTokenInfoType.status:type_name -> coregw.AuthorizationStatusEnumType
	5,   // 38: coregw.IdTokenType.type:type_name -> coregw.IdTokenEnumType
	119, // 39: coregw.AuthorizationData.idTokenInfo:type_name -> coregw.IdTokenInfoType
	120, // 40: coregw.AuthorizationData.idToken:type_name -> coregw.IdTokenType
	121, // 41: coregw.SyncLocalAuthorizationListReq.authorization_data:type_name -> coregw.AuthorizationData
	120, // 42: coregw.ReserveNowReq.idToken:type_name -> coregw.IdTokenType
	7,   // 43: coregw.ReserveNowResp.status:type_name -> coregw.ReserveNowResp.Status
	8,   // 44: coregw.CancelReservationResp.status:type_name -> coregw.CancelReservationResp.Status
	120, // 45: coregw.ReserveStopTransactionReq.idToken:type_name -> coregw.IdTokenType
	137, // 46: coregw.ChartDataResp.Metric.data:type_name -> coregw.ChartDataResp.Data
	136, // 47: coregw.ChartDataResp.DataEntry.value:type_name -> coregw.ChartDataResp.Metric
	9,   // 48: coregw.ManageService.ApplyOrder:input_type -> coregw.ApplyOrderReq
	11,  // 49: coregw.ManageService.SetOrderPayStatus:input_type -> coregw.SetOrderPayStatusReq
	13,  // 50: coregw.ManageService.SetOrderRefundStatus:input_type -> coregw.SetOrderRefundStatusReq
	107, // 51: coregw.ManageService.SetOrderBackPayStatus:input_type -> coregw.SetOrderBackPayStatusReq
	109, // 52: coregw.ManageService.SetOrderConfirm:input_type -> coregw.SetOrderConfirmReq
	87,  // 53: coregw.ManageService.EvseAlarmsByManager:input_type -> coregw.EvseAlarmsByManagerReq
	88,  // 54: coregw.ManageService.EvseAlarmsByOperator:input_type -> coregw.EvseAlarmsByOperatorReq
	64,  // 55: coregw.ManageService.EvsesByOperator:input_type -> coregw.EvsesByOperatorReq
	70,  // 56: coregw.ManageService.ConnectorsByEvse:input_type -> coregw.ConnectorsByEvseReq
	83,  // 57: coregw.ManageService.EvseByID:input_type -> coregw.EvseByIDReq
	43,  // 58: coregw.ManageService.EvseByConnectorID:input_type -> coregw.EvseByConnectorIDReq
	97,  // 59: coregw.ManageService.UpdateEvseAlarms:input_type -> coregw.UpdateEvseAlarmsReq
	72,  // 60: coregw.ManageService.Connector:input_type -> coregw.ConnectorReq
	74,  // 61: coregw.ManageService.SetConnector:input_type -> coregw.SetConnectorReq
	77,  // 62: coregw.ManageService.ConnectorStateCalcByStationID:input_type -> coregw.ConnectorStateCalcByStationIDReq
	79,  // 63: coregw.ManageService.ConnectorsByStationID:input_type -> coregw.ConnectorsByStationIDReq
	76,  // 64: coregw.ManageService.ConnectorByQRCode:input_type -> coregw.ConnectorByQRCodeReq
	29,  // 65: coregw.ManageService.ConnectorBindQRCode:input_type -> coregw.ConnectorBindQRCodeReq
	81,  // 66: coregw.ManageService.EvsesByStation:input_type -> coregw.EvsesByStationReq
	85,  // 67: coregw.ManageService.EvsesByManager:input_type -> coregw.EvsesByManagerReq
	66,  // 68: coregw.ManageService.EvsesByVisited:input_type -> coregw.EvsesByVisitedReq
	26,  // 69: coregw.ManageService.OrderStateTimeline:input_type -> coregw.OrderStateTimelineReq
	57,  // 70: coregw.ManageService.OrderInfo:input_type -> coregw.OrderInfoReq
	23,  // 71: coregw.ManageService.ManualOrderSettlement:input_type -> coregw.ManualOrderSettlementReq
	21,  // 72: coregw.ManageService.EditOrderData:input_type -> coregw.EditOrderDataReq
	42,  // 73: coregw.ManageService.EvseWithTopicPrefixAndUUID:input_type -> coregw.EvseWithTopicPrefixAndUUIDReq
	90,  // 74: coregw.ManageService.SetPaymentCheckIsCanStart:input_type -> coregw.SetPaymentCheckIsCanStartReq
	99,  // 75: coregw.ManageService.BindLicense:input_type -> coregw.BindLicenseReq
	101, // 76: coregw.ManageService.UnbindLicense:input_type -> coregw.UnbindLicenseReq
	103, // 77: coregw.ManageService.CleanOrderMC:input_type -> coregw.CleanOrderMCReq
	105, // 78: coregw.ManageService.SetBlocked:input_type -> coregw.SetBlockedReq
	111, // 79: coregw.ManageService.SetEvseConfig:input_type -> coregw.SetEvseConfigReq
	68,  // 80: coregw.ManageService.SetEvsesVisited:input_type -> coregw.SetEvsesVisitedReq
	53,  // 81: coregw.LogicServices.TransparentMQTTMsg:input_type -> coregw.MQTTMsgReq
	55,  // 82: coregw.LogicServices.EvseDisconnected:input_type -> coregw.EvseDisconnectedReq
	31,  // 83: coregw.LogicServices.RemoteStart:input_type -> coregw.RemoteStartReq
	33,  // 84: coregw.LogicServices.RemoteStop:input_type -> coregw.RemoteStopReq
	115, // 85: coregw.LogicServices.SetVariables:input_type -> coregw.SetVariablesReq
	117, // 86: coregw.LogicServices.GetLog:input_type -> coregw.GetLogReq
	35,  // 87: coregw.LogicServices.SetPriceScheme:input_type -> coregw.SetTariffReq
	37,  // 88: coregw.LogicServices.GetTransactions:input_type -> coregw.GetTransactionsReq
	113, // 89: coregw.LogicServices.GetBaseReport:input_type -> coregw.GetBaseReportReq
	39,  // 90: coregw.LogicServices.BindEvseStation:input_type -> coregw.BindEvseStationReq
	39,  // 91: coregw.LogicServices.UnbindEvseStation:input_type -> coregw.BindEvseStationReq
	41,  // 92: coregw.LogicServices.Evse:input_type -> coregw.EvseReq
	45,  // 93: coregw.LogicServices.RemoteControl:input_type -> coregw.RemoteControlReq
	47,  // 94: coregw.LogicServices.GetDiagnostics:input_type -> coregw.GetDiagnosticsReq
	49,  // 95: coregw.LogicServices.UpdateFirmware:input_type -> coregw.UpdateFirmwareReq
	51,  // 96: coregw.LogicServices.ChangeConfiguration:input_type -> coregw.ChangeConfigurationReq
	19,  // 97: coregw.LogicServices.TriggerDeviceCMD:input_type -> coregw.TriggerDeviceCMDReq
	122, // 98: coregw.LogicServices.SyncLocalAuthorizationList:input_type -> coregw.SyncLocalAuthorizationListReq
	124, // 99: coregw.LogicServices.ReserveNow:input_type -> coregw.ReserveNowReq
	126, // 100: coregw.LogicServices.CancelReservation:input_type -> coregw.CancelReservationReq
	128, // 101: coregw.LogicServices.RemoteDiagnosis:input_type -> coregw.RemoteDiagnosisReq
	130, // 102: coregw.LogicServices.ReserveStop:input_type -> coregw.ReserveStopTransactionReq
	132, // 103: coregw.LogicServices.CancelReserveStop:input_type -> coregw.CancelReserveStopTransactionReq
	10,  // 104: coregw.ManageService.ApplyOrder:output_type -> coregw.ApplyOrderResp
	12,  // 105: coregw.ManageService.SetOrderPayStatus:output_type -> coregw.SetOrderPayStatusResp
	14,  // 106: coregw.ManageService.SetOrderRefundStatus:output_type -> coregw.SetOrderRefundStatusResp
	108, // 107: coregw.ManageService.SetOrderBackPayStatus:output_type -> coregw.SetOrderBackPayStatusResp
	110, // 108: coregw.ManageService.SetOrderConfirm:output_type -> coregw.SetOrderConfirmResp
	89,  // 109: coregw.ManageService.EvseAlarmsByManager:output_type -> coregw.EvseAlarmsResp
	89,  // 110: coregw.ManageService.EvseAlarmsByOperator:output_type -> coregw.EvseAlarmsResp
	65,  // 111: coregw.ManageService.EvsesByOperator:output_type -> coregw.EvsesByOperatorResp
	71,  // 112: coregw.ManageService.ConnectorsByEvse:output_type -> coregw.ConnectorsByEvseResp
	84,  // 113: coregw.ManageService.EvseByID:output_type -> coregw.EvseByIDResp
	44,  // 114: coregw.ManageService.EvseByConnectorID:output_type -> coregw.EvseResp
	98,  // 115: coregw.ManageService.UpdateEvseAlarms:output_type -> coregw.UpdateEvseAlarmsResp
	73,  // 116: coregw.ManageService.Connector:output_type -> coregw.ConnectorResp
	75,  // 117: coregw.ManageService.SetConnector:output_type -> coregw.SetConnectorResp
	78,  // 118: coregw.ManageService.ConnectorStateCalcByStationID:output_type -> coregw.ConnectorStateCalcByStationIDResp
	80,  // 119: coregw.ManageService.ConnectorsByStationID:output_type -> coregw.ConnectorsByStationIDResp
	73,  // 120: coregw.ManageService.ConnectorByQRCode:output_type -> coregw.ConnectorResp
	30,  // 121: coregw.ManageService.ConnectorBindQRCode:output_type -> coregw.ConnectorBindQRCodeResp
	82,  // 122: coregw.ManageService.EvsesByStation:output_type -> coregw.EvsesByStationResp
	86,  // 123: coregw.ManageService.EvsesByManager:output_type -> coregw.EvsesByManagerResp
	67,  // 124: coregw.ManageService.EvsesByVisited:output_type -> coregw.EvsesByVisitedResp
	27,  // 125: coregw.ManageService.OrderStateTimeline:output_type -> coregw.OrderStateTimelineResp
	58,  // 126: coregw.ManageService.OrderInfo:output_type -> coregw.OrderInfoResp
	24,  // 127: coregw.ManageService.ManualOrderSettlement:output_type -> coregw.ManualOrderSettlementResp
	22,  // 128: coregw.ManageService.EditOrderData:output_type -> coregw.EditOrderDataResp
	44,  // 129: coregw.ManageService.EvseWithTopicPrefixAndUUID:output_type -> coregw.EvseResp
	91,  // 130: coregw.ManageService.SetPaymentCheckIsCanStart:output_type -> coregw.SetPaymentCheckIsCanStartResp
	100, // 131: coregw.ManageService.BindLicense:output_type -> coregw.BindLicenseResp
	102, // 132: coregw.ManageService.UnbindLicense:output_type -> coregw.UnbindLicenseResp
	104, // 133: coregw.ManageService.CleanOrderMC:output_type -> coregw.CleanOrderMCResp
	106, // 134: coregw.ManageService.SetBlocked:output_type -> coregw.SetBlockedResp
	112, // 135: coregw.ManageService.SetEvseConfig:output_type -> coregw.SetEvseConfigResp
	69,  // 136: coregw.ManageService.SetEvsesVisited:output_type -> coregw.SetEvsesVisitedResp
	54,  // 137: coregw.LogicServices.TransparentMQTTMsg:output_type -> coregw.MQTTMsgResp
	56,  // 138: coregw.LogicServices.EvseDisconnected:output_type -> coregw.EvseDisconnectedResp
	32,  // 139: coregw.LogicServices.RemoteStart:output_type -> coregw.RemoteStartResp
	34,  // 140: coregw.LogicServices.RemoteStop:output_type -> coregw.RemoteStopResp
	116, // 141: coregw.LogicServices.SetVariables:output_type -> coregw.SetVariablesResp
	118, // 142: coregw.LogicServices.GetLog:output_type -> coregw.GetLogResp
	36,  // 143: coregw.LogicServices.SetPriceScheme:output_type -> coregw.SetPriceSchemeResp
	38,  // 144: coregw.LogicServices.GetTransactions:output_type -> coregw.GetTransactionsResp
	114, // 145: coregw.LogicServices.GetBaseReport:output_type -> coregw.GetBaseReportResp
	40,  // 146: coregw.LogicServices.BindEvseStation:output_type -> coregw.BindEvseStationResp
	40,  // 147: coregw.LogicServices.UnbindEvseStation:output_type -> coregw.BindEvseStationResp
	44,  // 148: coregw.LogicServices.Evse:output_type -> coregw.EvseResp
	46,  // 149: coregw.LogicServices.RemoteControl:output_type -> coregw.RemoteControlResp
	48,  // 150: coregw.LogicServices.GetDiagnostics:output_type -> coregw.GetDiagnosticsResp
	50,  // 151: coregw.LogicServices.UpdateFirmware:output_type -> coregw.UpdateFirmwareResp
	52,  // 152: coregw.LogicServices.ChangeConfiguration:output_type -> coregw.ChangeConfigurationResp
	20,  // 153: coregw.LogicServices.TriggerDeviceCMD:output_type -> coregw.TriggerDeviceCMDResp
	123, // 154: coregw.LogicServices.SyncLocalAuthorizationList:output_type -> coregw.SyncLocalAuthorizationListResp
	125, // 155: coregw.LogicServices.ReserveNow:output_type -> coregw.ReserveNowResp
	127, // 156: coregw.LogicServices.CancelReservation:output_type -> coregw.CancelReservationResp
	129, // 157: coregw.LogicServices.RemoteDiagnosis:output_type -> coregw.RemoteDiagnosisResp
	131, // 158: coregw.LogicServices.ReserveStop:output_type -> coregw.ReserveStopTransactionResp
	133, // 159: coregw.LogicServices.CancelReserveStop:output_type -> coregw.CancelReserveStopTransactionResp
	104, // [104:160] is the sub-list for method output_type
	48,  // [48:104] is the sub-list for method input_type
	48,  // [48:48] is the sub-list for extension type_name
	48,  // [48:48] is the sub-list for extension extendee
	0,   // [0:48] is the sub-list for field type_name
}

func init() { file_coregw_proto_init() }
func file_coregw_proto_init() {
	if File_coregw_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coregw_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderPayStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderPayStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderRefundStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderRefundStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildEsOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildEsOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildEsEvseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebuildEsEvseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDeviceCMDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDeviceCMDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditOrderDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditOrderDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualOrderSettlementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualOrderSettlementResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderSettlementedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStateTimelineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStateTimelineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStateTimelineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorBindQRCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorBindQRCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStopResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTariffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPriceSchemeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindEvseStationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindEvseStationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseWithTopicPrefixAndUUIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseByConnectorIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteControlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteControlResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFirmwareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFirmwareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConfigurationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConfigurationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseDisconnectedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseDisconnectedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByOperatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByOperatorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByVisitedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByVisitedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEvsesVisitedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEvsesVisitedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorsByEvseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorsByEvseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConnectorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConnectorResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorByQRCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorStateCalcByStationIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorStateCalcByStationIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorsByStationIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorsByStationIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByStationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByStationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByManagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvsesByManagerResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseAlarmsByManagerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseAlarmsByOperatorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvseAlarmsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPaymentCheckIsCanStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPaymentCheckIsCanStartResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffParking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEvseAlarmsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEvseAlarmsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindLicenseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindLicenseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindLicenseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindLicenseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanOrderMCReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanOrderMCResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlockedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlockedResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderBackPayStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderBackPayStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOrderConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEvseConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEvseConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVariablesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVariablesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdTokenInfoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdTokenType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncLocalAuthorizationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncLocalAuthorizationListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveNowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveNowResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReservationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReservationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDiagnosisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDiagnosisResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveStopTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveStopTransactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReserveStopTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReserveStopTransactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDataResp_Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coregw_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDataResp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coregw_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   130,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_coregw_proto_goTypes,
		DependencyIndexes: file_coregw_proto_depIdxs,
		EnumInfos:         file_coregw_proto_enumTypes,
		MessageInfos:      file_coregw_proto_msgTypes,
	}.Build()
	File_coregw_proto = out.File
	file_coregw_proto_rawDesc = nil
	file_coregw_proto_goTypes = nil
	file_coregw_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ManageServiceClient is the client API for ManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManageServiceClient interface {
	// 申请订单，api申请订单xa调用
	ApplyOrder(ctx context.Context, in *ApplyOrderReq, opts ...grpc.CallOption) (*ApplyOrderResp, error)
	// 设置订单支付状态
	SetOrderPayStatus(ctx context.Context, in *SetOrderPayStatusReq, opts ...grpc.CallOption) (*SetOrderPayStatusResp, error)
	// 设置退款状态
	SetOrderRefundStatus(ctx context.Context, in *SetOrderRefundStatusReq, opts ...grpc.CallOption) (*SetOrderRefundStatusResp, error)
	// 设置补缴状态
	SetOrderBackPayStatus(ctx context.Context, in *SetOrderBackPayStatusReq, opts ...grpc.CallOption) (*SetOrderBackPayStatusResp, error)
	// 确认订单状态
	SetOrderConfirm(ctx context.Context, in *SetOrderConfirmReq, opts ...grpc.CallOption) (*SetOrderConfirmResp, error)
	// 根据管理员获取告警数量
	EvseAlarmsByManager(ctx context.Context, in *EvseAlarmsByManagerReq, opts ...grpc.CallOption) (*EvseAlarmsResp, error)
	// 根据运营商获取告警数量
	EvseAlarmsByOperator(ctx context.Context, in *EvseAlarmsByOperatorReq, opts ...grpc.CallOption) (*EvseAlarmsResp, error)
	// 获取运营商设备
	EvsesByOperator(ctx context.Context, in *EvsesByOperatorReq, opts ...grpc.CallOption) (*EvsesByOperatorResp, error)
	// 获取设备枪头
	ConnectorsByEvse(ctx context.Context, in *ConnectorsByEvseReq, opts ...grpc.CallOption) (*ConnectorsByEvseResp, error)
	// 获取设备
	EvseByID(ctx context.Context, in *EvseByIDReq, opts ...grpc.CallOption) (*EvseByIDResp, error)
	// 根据枪头号获取设备信息
	EvseByConnectorID(ctx context.Context, in *EvseByConnectorIDReq, opts ...grpc.CallOption) (*EvseResp, error)
	// 更新设备告警
	UpdateEvseAlarms(ctx context.Context, in *UpdateEvseAlarmsReq, opts ...grpc.CallOption) (*UpdateEvseAlarmsResp, error)
	// 获取枪头信息
	Connector(ctx context.Context, in *ConnectorReq, opts ...grpc.CallOption) (*ConnectorResp, error)
	// 设置枪头信息
	SetConnector(ctx context.Context, in *SetConnectorReq, opts ...grpc.CallOption) (*SetConnectorResp, error)
	// 根据站点获取枪头状态统计信息
	ConnectorStateCalcByStationID(ctx context.Context, in *ConnectorStateCalcByStationIDReq, opts ...grpc.CallOption) (*ConnectorStateCalcByStationIDResp, error)
	// 根据站点获取枪头列表
	ConnectorsByStationID(ctx context.Context, in *ConnectorsByStationIDReq, opts ...grpc.CallOption) (*ConnectorsByStationIDResp, error)
	// 根据QRCode的ID获取枪头
	ConnectorByQRCode(ctx context.Context, in *ConnectorByQRCodeReq, opts ...grpc.CallOption) (*ConnectorResp, error)
	// 绑定二维码到枪头
	ConnectorBindQRCode(ctx context.Context, in *ConnectorBindQRCodeReq, opts ...grpc.CallOption) (*ConnectorBindQRCodeResp, error)
	// 获取站点设备
	EvsesByStation(ctx context.Context, in *EvsesByStationReq, opts ...grpc.CallOption) (*EvsesByStationResp, error)
	// 根据管理员获取设备
	EvsesByManager(ctx context.Context, in *EvsesByManagerReq, opts ...grpc.CallOption) (*EvsesByManagerResp, error)
	// 根据是否被访问过获取设备
	EvsesByVisited(ctx context.Context, in *EvsesByVisitedReq, opts ...grpc.CallOption) (*EvsesByVisitedResp, error)
	// 获取订单状态的时间轴
	OrderStateTimeline(ctx context.Context, in *OrderStateTimelineReq, opts ...grpc.CallOption) (*OrderStateTimelineResp, error)
	// 获取订单详情
	OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error)
	// 手动支付订单
	ManualOrderSettlement(ctx context.Context, in *ManualOrderSettlementReq, opts ...grpc.CallOption) (*ManualOrderSettlementResp, error)
	// 数据修复
	EditOrderData(ctx context.Context, in *EditOrderDataReq, opts ...grpc.CallOption) (*EditOrderDataResp, error)
	// 根据topicprefix和uuid获取设备信息
	EvseWithTopicPrefixAndUUID(ctx context.Context, in *EvseWithTopicPrefixAndUUIDReq, opts ...grpc.CallOption) (*EvseResp, error)
	// 给支付渠道回复是否允许发起充电
	SetPaymentCheckIsCanStart(ctx context.Context, in *SetPaymentCheckIsCanStartReq, opts ...grpc.CallOption) (*SetPaymentCheckIsCanStartResp, error)
	// 绑定证书
	BindLicense(ctx context.Context, in *BindLicenseReq, opts ...grpc.CallOption) (*BindLicenseResp, error)
	// 解绑证书
	UnbindLicense(ctx context.Context, in *UnbindLicenseReq, opts ...grpc.CallOption) (*UnbindLicenseResp, error)
	// 清理订单缓存
	CleanOrderMC(ctx context.Context, in *CleanOrderMCReq, opts ...grpc.CallOption) (*CleanOrderMCResp, error)
	// 设置状态
	SetBlocked(ctx context.Context, in *SetBlockedReq, opts ...grpc.CallOption) (*SetBlockedResp, error)
	// 设置参数
	SetEvseConfig(ctx context.Context, in *SetEvseConfigReq, opts ...grpc.CallOption) (*SetEvseConfigResp, error)
	// 设置桩被访问过
	SetEvsesVisited(ctx context.Context, in *SetEvsesVisitedReq, opts ...grpc.CallOption) (*SetEvsesVisitedResp, error)
}

type manageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageServiceClient(cc grpc.ClientConnInterface) ManageServiceClient {
	return &manageServiceClient{cc}
}

func (c *manageServiceClient) ApplyOrder(ctx context.Context, in *ApplyOrderReq, opts ...grpc.CallOption) (*ApplyOrderResp, error) {
	out := new(ApplyOrderResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/ApplyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetOrderPayStatus(ctx context.Context, in *SetOrderPayStatusReq, opts ...grpc.CallOption) (*SetOrderPayStatusResp, error) {
	out := new(SetOrderPayStatusResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetOrderPayStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetOrderRefundStatus(ctx context.Context, in *SetOrderRefundStatusReq, opts ...grpc.CallOption) (*SetOrderRefundStatusResp, error) {
	out := new(SetOrderRefundStatusResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetOrderRefundStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetOrderBackPayStatus(ctx context.Context, in *SetOrderBackPayStatusReq, opts ...grpc.CallOption) (*SetOrderBackPayStatusResp, error) {
	out := new(SetOrderBackPayStatusResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetOrderBackPayStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetOrderConfirm(ctx context.Context, in *SetOrderConfirmReq, opts ...grpc.CallOption) (*SetOrderConfirmResp, error) {
	out := new(SetOrderConfirmResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetOrderConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvseAlarmsByManager(ctx context.Context, in *EvseAlarmsByManagerReq, opts ...grpc.CallOption) (*EvseAlarmsResp, error) {
	out := new(EvseAlarmsResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvseAlarmsByManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvseAlarmsByOperator(ctx context.Context, in *EvseAlarmsByOperatorReq, opts ...grpc.CallOption) (*EvseAlarmsResp, error) {
	out := new(EvseAlarmsResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvseAlarmsByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvsesByOperator(ctx context.Context, in *EvsesByOperatorReq, opts ...grpc.CallOption) (*EvsesByOperatorResp, error) {
	out := new(EvsesByOperatorResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvsesByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) ConnectorsByEvse(ctx context.Context, in *ConnectorsByEvseReq, opts ...grpc.CallOption) (*ConnectorsByEvseResp, error) {
	out := new(ConnectorsByEvseResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/ConnectorsByEvse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvseByID(ctx context.Context, in *EvseByIDReq, opts ...grpc.CallOption) (*EvseByIDResp, error) {
	out := new(EvseByIDResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvseByConnectorID(ctx context.Context, in *EvseByConnectorIDReq, opts ...grpc.CallOption) (*EvseResp, error) {
	out := new(EvseResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvseByConnectorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) UpdateEvseAlarms(ctx context.Context, in *UpdateEvseAlarmsReq, opts ...grpc.CallOption) (*UpdateEvseAlarmsResp, error) {
	out := new(UpdateEvseAlarmsResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/UpdateEvseAlarms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) Connector(ctx context.Context, in *ConnectorReq, opts ...grpc.CallOption) (*ConnectorResp, error) {
	out := new(ConnectorResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/Connector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetConnector(ctx context.Context, in *SetConnectorReq, opts ...grpc.CallOption) (*SetConnectorResp, error) {
	out := new(SetConnectorResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) ConnectorStateCalcByStationID(ctx context.Context, in *ConnectorStateCalcByStationIDReq, opts ...grpc.CallOption) (*ConnectorStateCalcByStationIDResp, error) {
	out := new(ConnectorStateCalcByStationIDResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/ConnectorStateCalcByStationID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) ConnectorsByStationID(ctx context.Context, in *ConnectorsByStationIDReq, opts ...grpc.CallOption) (*ConnectorsByStationIDResp, error) {
	out := new(ConnectorsByStationIDResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/ConnectorsByStationID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) ConnectorByQRCode(ctx context.Context, in *ConnectorByQRCodeReq, opts ...grpc.CallOption) (*ConnectorResp, error) {
	out := new(ConnectorResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/ConnectorByQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) ConnectorBindQRCode(ctx context.Context, in *ConnectorBindQRCodeReq, opts ...grpc.CallOption) (*ConnectorBindQRCodeResp, error) {
	out := new(ConnectorBindQRCodeResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/ConnectorBindQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvsesByStation(ctx context.Context, in *EvsesByStationReq, opts ...grpc.CallOption) (*EvsesByStationResp, error) {
	out := new(EvsesByStationResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvsesByStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvsesByManager(ctx context.Context, in *EvsesByManagerReq, opts ...grpc.CallOption) (*EvsesByManagerResp, error) {
	out := new(EvsesByManagerResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvsesByManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvsesByVisited(ctx context.Context, in *EvsesByVisitedReq, opts ...grpc.CallOption) (*EvsesByVisitedResp, error) {
	out := new(EvsesByVisitedResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvsesByVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) OrderStateTimeline(ctx context.Context, in *OrderStateTimelineReq, opts ...grpc.CallOption) (*OrderStateTimelineResp, error) {
	out := new(OrderStateTimelineResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/OrderStateTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error) {
	out := new(OrderInfoResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/OrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) ManualOrderSettlement(ctx context.Context, in *ManualOrderSettlementReq, opts ...grpc.CallOption) (*ManualOrderSettlementResp, error) {
	out := new(ManualOrderSettlementResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/ManualOrderSettlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EditOrderData(ctx context.Context, in *EditOrderDataReq, opts ...grpc.CallOption) (*EditOrderDataResp, error) {
	out := new(EditOrderDataResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EditOrderData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) EvseWithTopicPrefixAndUUID(ctx context.Context, in *EvseWithTopicPrefixAndUUIDReq, opts ...grpc.CallOption) (*EvseResp, error) {
	out := new(EvseResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/EvseWithTopicPrefixAndUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetPaymentCheckIsCanStart(ctx context.Context, in *SetPaymentCheckIsCanStartReq, opts ...grpc.CallOption) (*SetPaymentCheckIsCanStartResp, error) {
	out := new(SetPaymentCheckIsCanStartResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetPaymentCheckIsCanStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) BindLicense(ctx context.Context, in *BindLicenseReq, opts ...grpc.CallOption) (*BindLicenseResp, error) {
	out := new(BindLicenseResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/BindLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) UnbindLicense(ctx context.Context, in *UnbindLicenseReq, opts ...grpc.CallOption) (*UnbindLicenseResp, error) {
	out := new(UnbindLicenseResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/UnbindLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) CleanOrderMC(ctx context.Context, in *CleanOrderMCReq, opts ...grpc.CallOption) (*CleanOrderMCResp, error) {
	out := new(CleanOrderMCResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/CleanOrderMC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetBlocked(ctx context.Context, in *SetBlockedReq, opts ...grpc.CallOption) (*SetBlockedResp, error) {
	out := new(SetBlockedResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetEvseConfig(ctx context.Context, in *SetEvseConfigReq, opts ...grpc.CallOption) (*SetEvseConfigResp, error) {
	out := new(SetEvseConfigResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetEvseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetEvsesVisited(ctx context.Context, in *SetEvsesVisitedReq, opts ...grpc.CallOption) (*SetEvsesVisitedResp, error) {
	out := new(SetEvsesVisitedResp)
	err := c.cc.Invoke(ctx, "/coregw.ManageService/SetEvsesVisited", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServiceServer is the server API for ManageService service.
type ManageServiceServer interface {
	// 申请订单，api申请订单xa调用
	ApplyOrder(context.Context, *ApplyOrderReq) (*ApplyOrderResp, error)
	// 设置订单支付状态
	SetOrderPayStatus(context.Context, *SetOrderPayStatusReq) (*SetOrderPayStatusResp, error)
	// 设置退款状态
	SetOrderRefundStatus(context.Context, *SetOrderRefundStatusReq) (*SetOrderRefundStatusResp, error)
	// 设置补缴状态
	SetOrderBackPayStatus(context.Context, *SetOrderBackPayStatusReq) (*SetOrderBackPayStatusResp, error)
	// 确认订单状态
	SetOrderConfirm(context.Context, *SetOrderConfirmReq) (*SetOrderConfirmResp, error)
	// 根据管理员获取告警数量
	EvseAlarmsByManager(context.Context, *EvseAlarmsByManagerReq) (*EvseAlarmsResp, error)
	// 根据运营商获取告警数量
	EvseAlarmsByOperator(context.Context, *EvseAlarmsByOperatorReq) (*EvseAlarmsResp, error)
	// 获取运营商设备
	EvsesByOperator(context.Context, *EvsesByOperatorReq) (*EvsesByOperatorResp, error)
	// 获取设备枪头
	ConnectorsByEvse(context.Context, *ConnectorsByEvseReq) (*ConnectorsByEvseResp, error)
	// 获取设备
	EvseByID(context.Context, *EvseByIDReq) (*EvseByIDResp, error)
	// 根据枪头号获取设备信息
	EvseByConnectorID(context.Context, *EvseByConnectorIDReq) (*EvseResp, error)
	// 更新设备告警
	UpdateEvseAlarms(context.Context, *UpdateEvseAlarmsReq) (*UpdateEvseAlarmsResp, error)
	// 获取枪头信息
	Connector(context.Context, *ConnectorReq) (*ConnectorResp, error)
	// 设置枪头信息
	SetConnector(context.Context, *SetConnectorReq) (*SetConnectorResp, error)
	// 根据站点获取枪头状态统计信息
	ConnectorStateCalcByStationID(context.Context, *ConnectorStateCalcByStationIDReq) (*ConnectorStateCalcByStationIDResp, error)
	// 根据站点获取枪头列表
	ConnectorsByStationID(context.Context, *ConnectorsByStationIDReq) (*ConnectorsByStationIDResp, error)
	// 根据QRCode的ID获取枪头
	ConnectorByQRCode(context.Context, *ConnectorByQRCodeReq) (*ConnectorResp, error)
	// 绑定二维码到枪头
	ConnectorBindQRCode(context.Context, *ConnectorBindQRCodeReq) (*ConnectorBindQRCodeResp, error)
	// 获取站点设备
	EvsesByStation(context.Context, *EvsesByStationReq) (*EvsesByStationResp, error)
	// 根据管理员获取设备
	EvsesByManager(context.Context, *EvsesByManagerReq) (*EvsesByManagerResp, error)
	// 根据是否被访问过获取设备
	EvsesByVisited(context.Context, *EvsesByVisitedReq) (*EvsesByVisitedResp, error)
	// 获取订单状态的时间轴
	OrderStateTimeline(context.Context, *OrderStateTimelineReq) (*OrderStateTimelineResp, error)
	// 获取订单详情
	OrderInfo(context.Context, *OrderInfoReq) (*OrderInfoResp, error)
	// 手动支付订单
	ManualOrderSettlement(context.Context, *ManualOrderSettlementReq) (*ManualOrderSettlementResp, error)
	// 数据修复
	EditOrderData(context.Context, *EditOrderDataReq) (*EditOrderDataResp, error)
	// 根据topicprefix和uuid获取设备信息
	EvseWithTopicPrefixAndUUID(context.Context, *EvseWithTopicPrefixAndUUIDReq) (*EvseResp, error)
	// 给支付渠道回复是否允许发起充电
	SetPaymentCheckIsCanStart(context.Context, *SetPaymentCheckIsCanStartReq) (*SetPaymentCheckIsCanStartResp, error)
	// 绑定证书
	BindLicense(context.Context, *BindLicenseReq) (*BindLicenseResp, error)
	// 解绑证书
	UnbindLicense(context.Context, *UnbindLicenseReq) (*UnbindLicenseResp, error)
	// 清理订单缓存
	CleanOrderMC(context.Context, *CleanOrderMCReq) (*CleanOrderMCResp, error)
	// 设置状态
	SetBlocked(context.Context, *SetBlockedReq) (*SetBlockedResp, error)
	// 设置参数
	SetEvseConfig(context.Context, *SetEvseConfigReq) (*SetEvseConfigResp, error)
	// 设置桩被访问过
	SetEvsesVisited(context.Context, *SetEvsesVisitedReq) (*SetEvsesVisitedResp, error)
}

// UnimplementedManageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedManageServiceServer struct {
}

func (*UnimplementedManageServiceServer) ApplyOrder(context.Context, *ApplyOrderReq) (*ApplyOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOrder not implemented")
}
func (*UnimplementedManageServiceServer) SetOrderPayStatus(context.Context, *SetOrderPayStatusReq) (*SetOrderPayStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderPayStatus not implemented")
}
func (*UnimplementedManageServiceServer) SetOrderRefundStatus(context.Context, *SetOrderRefundStatusReq) (*SetOrderRefundStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderRefundStatus not implemented")
}
func (*UnimplementedManageServiceServer) SetOrderBackPayStatus(context.Context, *SetOrderBackPayStatusReq) (*SetOrderBackPayStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderBackPayStatus not implemented")
}
func (*UnimplementedManageServiceServer) SetOrderConfirm(context.Context, *SetOrderConfirmReq) (*SetOrderConfirmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderConfirm not implemented")
}
func (*UnimplementedManageServiceServer) EvseAlarmsByManager(context.Context, *EvseAlarmsByManagerReq) (*EvseAlarmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseAlarmsByManager not implemented")
}
func (*UnimplementedManageServiceServer) EvseAlarmsByOperator(context.Context, *EvseAlarmsByOperatorReq) (*EvseAlarmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseAlarmsByOperator not implemented")
}
func (*UnimplementedManageServiceServer) EvsesByOperator(context.Context, *EvsesByOperatorReq) (*EvsesByOperatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvsesByOperator not implemented")
}
func (*UnimplementedManageServiceServer) ConnectorsByEvse(context.Context, *ConnectorsByEvseReq) (*ConnectorsByEvseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorsByEvse not implemented")
}
func (*UnimplementedManageServiceServer) EvseByID(context.Context, *EvseByIDReq) (*EvseByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseByID not implemented")
}
func (*UnimplementedManageServiceServer) EvseByConnectorID(context.Context, *EvseByConnectorIDReq) (*EvseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseByConnectorID not implemented")
}
func (*UnimplementedManageServiceServer) UpdateEvseAlarms(context.Context, *UpdateEvseAlarmsReq) (*UpdateEvseAlarmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvseAlarms not implemented")
}
func (*UnimplementedManageServiceServer) Connector(context.Context, *ConnectorReq) (*ConnectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connector not implemented")
}
func (*UnimplementedManageServiceServer) SetConnector(context.Context, *SetConnectorReq) (*SetConnectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConnector not implemented")
}
func (*UnimplementedManageServiceServer) ConnectorStateCalcByStationID(context.Context, *ConnectorStateCalcByStationIDReq) (*ConnectorStateCalcByStationIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorStateCalcByStationID not implemented")
}
func (*UnimplementedManageServiceServer) ConnectorsByStationID(context.Context, *ConnectorsByStationIDReq) (*ConnectorsByStationIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorsByStationID not implemented")
}
func (*UnimplementedManageServiceServer) ConnectorByQRCode(context.Context, *ConnectorByQRCodeReq) (*ConnectorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorByQRCode not implemented")
}
func (*UnimplementedManageServiceServer) ConnectorBindQRCode(context.Context, *ConnectorBindQRCodeReq) (*ConnectorBindQRCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectorBindQRCode not implemented")
}
func (*UnimplementedManageServiceServer) EvsesByStation(context.Context, *EvsesByStationReq) (*EvsesByStationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvsesByStation not implemented")
}
func (*UnimplementedManageServiceServer) EvsesByManager(context.Context, *EvsesByManagerReq) (*EvsesByManagerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvsesByManager not implemented")
}
func (*UnimplementedManageServiceServer) EvsesByVisited(context.Context, *EvsesByVisitedReq) (*EvsesByVisitedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvsesByVisited not implemented")
}
func (*UnimplementedManageServiceServer) OrderStateTimeline(context.Context, *OrderStateTimelineReq) (*OrderStateTimelineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderStateTimeline not implemented")
}
func (*UnimplementedManageServiceServer) OrderInfo(context.Context, *OrderInfoReq) (*OrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderInfo not implemented")
}
func (*UnimplementedManageServiceServer) ManualOrderSettlement(context.Context, *ManualOrderSettlementReq) (*ManualOrderSettlementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualOrderSettlement not implemented")
}
func (*UnimplementedManageServiceServer) EditOrderData(context.Context, *EditOrderDataReq) (*EditOrderDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditOrderData not implemented")
}
func (*UnimplementedManageServiceServer) EvseWithTopicPrefixAndUUID(context.Context, *EvseWithTopicPrefixAndUUIDReq) (*EvseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseWithTopicPrefixAndUUID not implemented")
}
func (*UnimplementedManageServiceServer) SetPaymentCheckIsCanStart(context.Context, *SetPaymentCheckIsCanStartReq) (*SetPaymentCheckIsCanStartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPaymentCheckIsCanStart not implemented")
}
func (*UnimplementedManageServiceServer) BindLicense(context.Context, *BindLicenseReq) (*BindLicenseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindLicense not implemented")
}
func (*UnimplementedManageServiceServer) UnbindLicense(context.Context, *UnbindLicenseReq) (*UnbindLicenseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindLicense not implemented")
}
func (*UnimplementedManageServiceServer) CleanOrderMC(context.Context, *CleanOrderMCReq) (*CleanOrderMCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanOrderMC not implemented")
}
func (*UnimplementedManageServiceServer) SetBlocked(context.Context, *SetBlockedReq) (*SetBlockedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlocked not implemented")
}
func (*UnimplementedManageServiceServer) SetEvseConfig(context.Context, *SetEvseConfigReq) (*SetEvseConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEvseConfig not implemented")
}
func (*UnimplementedManageServiceServer) SetEvsesVisited(context.Context, *SetEvsesVisitedReq) (*SetEvsesVisitedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEvsesVisited not implemented")
}

func RegisterManageServiceServer(s *grpc.Server, srv ManageServiceServer) {
	s.RegisterService(&_ManageService_serviceDesc, srv)
}

func _ManageService_ApplyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).ApplyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/ApplyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).ApplyOrder(ctx, req.(*ApplyOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetOrderPayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderPayStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetOrderPayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetOrderPayStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetOrderPayStatus(ctx, req.(*SetOrderPayStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetOrderRefundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderRefundStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetOrderRefundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetOrderRefundStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetOrderRefundStatus(ctx, req.(*SetOrderRefundStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetOrderBackPayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderBackPayStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetOrderBackPayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetOrderBackPayStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetOrderBackPayStatus(ctx, req.(*SetOrderBackPayStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetOrderConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrderConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetOrderConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetOrderConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetOrderConfirm(ctx, req.(*SetOrderConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvseAlarmsByManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseAlarmsByManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvseAlarmsByManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvseAlarmsByManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvseAlarmsByManager(ctx, req.(*EvseAlarmsByManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvseAlarmsByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseAlarmsByOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvseAlarmsByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvseAlarmsByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvseAlarmsByOperator(ctx, req.(*EvseAlarmsByOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvsesByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvsesByOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvsesByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvsesByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvsesByOperator(ctx, req.(*EvsesByOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_ConnectorsByEvse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorsByEvseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).ConnectorsByEvse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/ConnectorsByEvse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).ConnectorsByEvse(ctx, req.(*ConnectorsByEvseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvseByID(ctx, req.(*EvseByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvseByConnectorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseByConnectorIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvseByConnectorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvseByConnectorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvseByConnectorID(ctx, req.(*EvseByConnectorIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_UpdateEvseAlarms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEvseAlarmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).UpdateEvseAlarms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/UpdateEvseAlarms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).UpdateEvseAlarms(ctx, req.(*UpdateEvseAlarmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_Connector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).Connector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/Connector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).Connector(ctx, req.(*ConnectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConnectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetConnector(ctx, req.(*SetConnectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_ConnectorStateCalcByStationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorStateCalcByStationIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).ConnectorStateCalcByStationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/ConnectorStateCalcByStationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).ConnectorStateCalcByStationID(ctx, req.(*ConnectorStateCalcByStationIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_ConnectorsByStationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorsByStationIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).ConnectorsByStationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/ConnectorsByStationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).ConnectorsByStationID(ctx, req.(*ConnectorsByStationIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_ConnectorByQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorByQRCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).ConnectorByQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/ConnectorByQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).ConnectorByQRCode(ctx, req.(*ConnectorByQRCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_ConnectorBindQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorBindQRCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).ConnectorBindQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/ConnectorBindQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).ConnectorBindQRCode(ctx, req.(*ConnectorBindQRCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvsesByStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvsesByStationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvsesByStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvsesByStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvsesByStation(ctx, req.(*EvsesByStationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvsesByManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvsesByManagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvsesByManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvsesByManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvsesByManager(ctx, req.(*EvsesByManagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvsesByVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvsesByVisitedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvsesByVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvsesByVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvsesByVisited(ctx, req.(*EvsesByVisitedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_OrderStateTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStateTimelineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).OrderStateTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/OrderStateTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).OrderStateTimeline(ctx, req.(*OrderStateTimelineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_OrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).OrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/OrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).OrderInfo(ctx, req.(*OrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_ManualOrderSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualOrderSettlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).ManualOrderSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/ManualOrderSettlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).ManualOrderSettlement(ctx, req.(*ManualOrderSettlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EditOrderData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditOrderDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EditOrderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EditOrderData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EditOrderData(ctx, req.(*EditOrderDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_EvseWithTopicPrefixAndUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseWithTopicPrefixAndUUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).EvseWithTopicPrefixAndUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/EvseWithTopicPrefixAndUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).EvseWithTopicPrefixAndUUID(ctx, req.(*EvseWithTopicPrefixAndUUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetPaymentCheckIsCanStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPaymentCheckIsCanStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetPaymentCheckIsCanStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetPaymentCheckIsCanStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetPaymentCheckIsCanStart(ctx, req.(*SetPaymentCheckIsCanStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_BindLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).BindLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/BindLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).BindLicense(ctx, req.(*BindLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_UnbindLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).UnbindLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/UnbindLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).UnbindLicense(ctx, req.(*UnbindLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_CleanOrderMC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanOrderMCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).CleanOrderMC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/CleanOrderMC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).CleanOrderMC(ctx, req.(*CleanOrderMCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetBlocked(ctx, req.(*SetBlockedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetEvseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEvseConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetEvseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetEvseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetEvseConfig(ctx, req.(*SetEvseConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetEvsesVisited_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEvsesVisitedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetEvsesVisited(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.ManageService/SetEvsesVisited",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetEvsesVisited(ctx, req.(*SetEvsesVisitedReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coregw.ManageService",
	HandlerType: (*ManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyOrder",
			Handler:    _ManageService_ApplyOrder_Handler,
		},
		{
			MethodName: "SetOrderPayStatus",
			Handler:    _ManageService_SetOrderPayStatus_Handler,
		},
		{
			MethodName: "SetOrderRefundStatus",
			Handler:    _ManageService_SetOrderRefundStatus_Handler,
		},
		{
			MethodName: "SetOrderBackPayStatus",
			Handler:    _ManageService_SetOrderBackPayStatus_Handler,
		},
		{
			MethodName: "SetOrderConfirm",
			Handler:    _ManageService_SetOrderConfirm_Handler,
		},
		{
			MethodName: "EvseAlarmsByManager",
			Handler:    _ManageService_EvseAlarmsByManager_Handler,
		},
		{
			MethodName: "EvseAlarmsByOperator",
			Handler:    _ManageService_EvseAlarmsByOperator_Handler,
		},
		{
			MethodName: "EvsesByOperator",
			Handler:    _ManageService_EvsesByOperator_Handler,
		},
		{
			MethodName: "ConnectorsByEvse",
			Handler:    _ManageService_ConnectorsByEvse_Handler,
		},
		{
			MethodName: "EvseByID",
			Handler:    _ManageService_EvseByID_Handler,
		},
		{
			MethodName: "EvseByConnectorID",
			Handler:    _ManageService_EvseByConnectorID_Handler,
		},
		{
			MethodName: "UpdateEvseAlarms",
			Handler:    _ManageService_UpdateEvseAlarms_Handler,
		},
		{
			MethodName: "Connector",
			Handler:    _ManageService_Connector_Handler,
		},
		{
			MethodName: "SetConnector",
			Handler:    _ManageService_SetConnector_Handler,
		},
		{
			MethodName: "ConnectorStateCalcByStationID",
			Handler:    _ManageService_ConnectorStateCalcByStationID_Handler,
		},
		{
			MethodName: "ConnectorsByStationID",
			Handler:    _ManageService_ConnectorsByStationID_Handler,
		},
		{
			MethodName: "ConnectorByQRCode",
			Handler:    _ManageService_ConnectorByQRCode_Handler,
		},
		{
			MethodName: "ConnectorBindQRCode",
			Handler:    _ManageService_ConnectorBindQRCode_Handler,
		},
		{
			MethodName: "EvsesByStation",
			Handler:    _ManageService_EvsesByStation_Handler,
		},
		{
			MethodName: "EvsesByManager",
			Handler:    _ManageService_EvsesByManager_Handler,
		},
		{
			MethodName: "EvsesByVisited",
			Handler:    _ManageService_EvsesByVisited_Handler,
		},
		{
			MethodName: "OrderStateTimeline",
			Handler:    _ManageService_OrderStateTimeline_Handler,
		},
		{
			MethodName: "OrderInfo",
			Handler:    _ManageService_OrderInfo_Handler,
		},
		{
			MethodName: "ManualOrderSettlement",
			Handler:    _ManageService_ManualOrderSettlement_Handler,
		},
		{
			MethodName: "EditOrderData",
			Handler:    _ManageService_EditOrderData_Handler,
		},
		{
			MethodName: "EvseWithTopicPrefixAndUUID",
			Handler:    _ManageService_EvseWithTopicPrefixAndUUID_Handler,
		},
		{
			MethodName: "SetPaymentCheckIsCanStart",
			Handler:    _ManageService_SetPaymentCheckIsCanStart_Handler,
		},
		{
			MethodName: "BindLicense",
			Handler:    _ManageService_BindLicense_Handler,
		},
		{
			MethodName: "UnbindLicense",
			Handler:    _ManageService_UnbindLicense_Handler,
		},
		{
			MethodName: "CleanOrderMC",
			Handler:    _ManageService_CleanOrderMC_Handler,
		},
		{
			MethodName: "SetBlocked",
			Handler:    _ManageService_SetBlocked_Handler,
		},
		{
			MethodName: "SetEvseConfig",
			Handler:    _ManageService_SetEvseConfig_Handler,
		},
		{
			MethodName: "SetEvsesVisited",
			Handler:    _ManageService_SetEvsesVisited_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coregw.proto",
}

// LogicServicesClient is the client API for LogicServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogicServicesClient interface {
	//
	TransparentMQTTMsg(ctx context.Context, in *MQTTMsgReq, opts ...grpc.CallOption) (*MQTTMsgResp, error)
	// 设备断网
	EvseDisconnected(ctx context.Context, in *EvseDisconnectedReq, opts ...grpc.CallOption) (*EvseDisconnectedResp, error)
	// 启动充电
	RemoteStart(ctx context.Context, in *RemoteStartReq, opts ...grpc.CallOption) (*RemoteStartResp, error)
	// 停止充电
	RemoteStop(ctx context.Context, in *RemoteStopReq, opts ...grpc.CallOption) (*RemoteStopResp, error)
	// 设置变量
	SetVariables(ctx context.Context, in *SetVariablesReq, opts ...grpc.CallOption) (*SetVariablesResp, error)
	// 获取日志
	GetLog(ctx context.Context, in *GetLogReq, opts ...grpc.CallOption) (*GetLogResp, error)
	// 设置计费模版
	SetPriceScheme(ctx context.Context, in *SetTariffReq, opts ...grpc.CallOption) (*SetPriceSchemeResp, error)
	// 获取离线订单请求
	GetTransactions(ctx context.Context, in *GetTransactionsReq, opts ...grpc.CallOption) (*GetTransactionsResp, error)
	// 获取基本报告
	GetBaseReport(ctx context.Context, in *GetBaseReportReq, opts ...grpc.CallOption) (*GetBaseReportResp, error)
	// 设备绑定站点
	BindEvseStation(ctx context.Context, in *BindEvseStationReq, opts ...grpc.CallOption) (*BindEvseStationResp, error)
	// 设备和站点解绑
	UnbindEvseStation(ctx context.Context, in *BindEvseStationReq, opts ...grpc.CallOption) (*BindEvseStationResp, error)
	// 获取设备信息
	Evse(ctx context.Context, in *EvseReq, opts ...grpc.CallOption) (*EvseResp, error)
	// 远程控制
	RemoteControl(ctx context.Context, in *RemoteControlReq, opts ...grpc.CallOption) (*RemoteControlResp, error)
	// 获取设备诊断日志
	GetDiagnostics(ctx context.Context, in *GetDiagnosticsReq, opts ...grpc.CallOption) (*GetDiagnosticsResp, error)
	// 远程升级
	UpdateFirmware(ctx context.Context, in *UpdateFirmwareReq, opts ...grpc.CallOption) (*UpdateFirmwareResp, error)
	// 设置配置
	ChangeConfiguration(ctx context.Context, in *ChangeConfigurationReq, opts ...grpc.CallOption) (*ChangeConfigurationResp, error)
	// 触发设备命令，使其重新发出数据包
	TriggerDeviceCMD(ctx context.Context, in *TriggerDeviceCMDReq, opts ...grpc.CallOption) (*TriggerDeviceCMDResp, error)
	// 同步本地授权
	SyncLocalAuthorizationList(ctx context.Context, in *SyncLocalAuthorizationListReq, opts ...grpc.CallOption) (*SyncLocalAuthorizationListResp, error)
	// 预约定时充电
	ReserveNow(ctx context.Context, in *ReserveNowReq, opts ...grpc.CallOption) (*ReserveNowResp, error)
	// 取消预约定时
	CancelReservation(ctx context.Context, in *CancelReservationReq, opts ...grpc.CallOption) (*CancelReservationResp, error)
	// 远程诊断
	RemoteDiagnosis(ctx context.Context, in *RemoteDiagnosisReq, opts ...grpc.CallOption) (*RemoteDiagnosisResp, error)
	// 预约停止充电
	ReserveStop(ctx context.Context, in *ReserveStopTransactionReq, opts ...grpc.CallOption) (*ReserveStopTransactionResp, error)
	// 取消预约停止充电
	CancelReserveStop(ctx context.Context, in *CancelReserveStopTransactionReq, opts ...grpc.CallOption) (*CancelReserveStopTransactionResp, error)
}

type logicServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicServicesClient(cc grpc.ClientConnInterface) LogicServicesClient {
	return &logicServicesClient{cc}
}

func (c *logicServicesClient) TransparentMQTTMsg(ctx context.Context, in *MQTTMsgReq, opts ...grpc.CallOption) (*MQTTMsgResp, error) {
	out := new(MQTTMsgResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/TransparentMQTTMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) EvseDisconnected(ctx context.Context, in *EvseDisconnectedReq, opts ...grpc.CallOption) (*EvseDisconnectedResp, error) {
	out := new(EvseDisconnectedResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/EvseDisconnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) RemoteStart(ctx context.Context, in *RemoteStartReq, opts ...grpc.CallOption) (*RemoteStartResp, error) {
	out := new(RemoteStartResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/RemoteStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) RemoteStop(ctx context.Context, in *RemoteStopReq, opts ...grpc.CallOption) (*RemoteStopResp, error) {
	out := new(RemoteStopResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/RemoteStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) SetVariables(ctx context.Context, in *SetVariablesReq, opts ...grpc.CallOption) (*SetVariablesResp, error) {
	out := new(SetVariablesResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/SetVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) GetLog(ctx context.Context, in *GetLogReq, opts ...grpc.CallOption) (*GetLogResp, error) {
	out := new(GetLogResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) SetPriceScheme(ctx context.Context, in *SetTariffReq, opts ...grpc.CallOption) (*SetPriceSchemeResp, error) {
	out := new(SetPriceSchemeResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/SetPriceScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) GetTransactions(ctx context.Context, in *GetTransactionsReq, opts ...grpc.CallOption) (*GetTransactionsResp, error) {
	out := new(GetTransactionsResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) GetBaseReport(ctx context.Context, in *GetBaseReportReq, opts ...grpc.CallOption) (*GetBaseReportResp, error) {
	out := new(GetBaseReportResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/GetBaseReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) BindEvseStation(ctx context.Context, in *BindEvseStationReq, opts ...grpc.CallOption) (*BindEvseStationResp, error) {
	out := new(BindEvseStationResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/BindEvseStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) UnbindEvseStation(ctx context.Context, in *BindEvseStationReq, opts ...grpc.CallOption) (*BindEvseStationResp, error) {
	out := new(BindEvseStationResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/UnbindEvseStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) Evse(ctx context.Context, in *EvseReq, opts ...grpc.CallOption) (*EvseResp, error) {
	out := new(EvseResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/Evse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) RemoteControl(ctx context.Context, in *RemoteControlReq, opts ...grpc.CallOption) (*RemoteControlResp, error) {
	out := new(RemoteControlResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/RemoteControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) GetDiagnostics(ctx context.Context, in *GetDiagnosticsReq, opts ...grpc.CallOption) (*GetDiagnosticsResp, error) {
	out := new(GetDiagnosticsResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/GetDiagnostics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) UpdateFirmware(ctx context.Context, in *UpdateFirmwareReq, opts ...grpc.CallOption) (*UpdateFirmwareResp, error) {
	out := new(UpdateFirmwareResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/UpdateFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) ChangeConfiguration(ctx context.Context, in *ChangeConfigurationReq, opts ...grpc.CallOption) (*ChangeConfigurationResp, error) {
	out := new(ChangeConfigurationResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/ChangeConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) TriggerDeviceCMD(ctx context.Context, in *TriggerDeviceCMDReq, opts ...grpc.CallOption) (*TriggerDeviceCMDResp, error) {
	out := new(TriggerDeviceCMDResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/TriggerDeviceCMD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) SyncLocalAuthorizationList(ctx context.Context, in *SyncLocalAuthorizationListReq, opts ...grpc.CallOption) (*SyncLocalAuthorizationListResp, error) {
	out := new(SyncLocalAuthorizationListResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/SyncLocalAuthorizationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) ReserveNow(ctx context.Context, in *ReserveNowReq, opts ...grpc.CallOption) (*ReserveNowResp, error) {
	out := new(ReserveNowResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/ReserveNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) CancelReservation(ctx context.Context, in *CancelReservationReq, opts ...grpc.CallOption) (*CancelReservationResp, error) {
	out := new(CancelReservationResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/CancelReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) RemoteDiagnosis(ctx context.Context, in *RemoteDiagnosisReq, opts ...grpc.CallOption) (*RemoteDiagnosisResp, error) {
	out := new(RemoteDiagnosisResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/RemoteDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) ReserveStop(ctx context.Context, in *ReserveStopTransactionReq, opts ...grpc.CallOption) (*ReserveStopTransactionResp, error) {
	out := new(ReserveStopTransactionResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/ReserveStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServicesClient) CancelReserveStop(ctx context.Context, in *CancelReserveStopTransactionReq, opts ...grpc.CallOption) (*CancelReserveStopTransactionResp, error) {
	out := new(CancelReserveStopTransactionResp)
	err := c.cc.Invoke(ctx, "/coregw.LogicServices/CancelReserveStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServicesServer is the server API for LogicServices service.
type LogicServicesServer interface {
	//
	TransparentMQTTMsg(context.Context, *MQTTMsgReq) (*MQTTMsgResp, error)
	// 设备断网
	EvseDisconnected(context.Context, *EvseDisconnectedReq) (*EvseDisconnectedResp, error)
	// 启动充电
	RemoteStart(context.Context, *RemoteStartReq) (*RemoteStartResp, error)
	// 停止充电
	RemoteStop(context.Context, *RemoteStopReq) (*RemoteStopResp, error)
	// 设置变量
	SetVariables(context.Context, *SetVariablesReq) (*SetVariablesResp, error)
	// 获取日志
	GetLog(context.Context, *GetLogReq) (*GetLogResp, error)
	// 设置计费模版
	SetPriceScheme(context.Context, *SetTariffReq) (*SetPriceSchemeResp, error)
	// 获取离线订单请求
	GetTransactions(context.Context, *GetTransactionsReq) (*GetTransactionsResp, error)
	// 获取基本报告
	GetBaseReport(context.Context, *GetBaseReportReq) (*GetBaseReportResp, error)
	// 设备绑定站点
	BindEvseStation(context.Context, *BindEvseStationReq) (*BindEvseStationResp, error)
	// 设备和站点解绑
	UnbindEvseStation(context.Context, *BindEvseStationReq) (*BindEvseStationResp, error)
	// 获取设备信息
	Evse(context.Context, *EvseReq) (*EvseResp, error)
	// 远程控制
	RemoteControl(context.Context, *RemoteControlReq) (*RemoteControlResp, error)
	// 获取设备诊断日志
	GetDiagnostics(context.Context, *GetDiagnosticsReq) (*GetDiagnosticsResp, error)
	// 远程升级
	UpdateFirmware(context.Context, *UpdateFirmwareReq) (*UpdateFirmwareResp, error)
	// 设置配置
	ChangeConfiguration(context.Context, *ChangeConfigurationReq) (*ChangeConfigurationResp, error)
	// 触发设备命令，使其重新发出数据包
	TriggerDeviceCMD(context.Context, *TriggerDeviceCMDReq) (*TriggerDeviceCMDResp, error)
	// 同步本地授权
	SyncLocalAuthorizationList(context.Context, *SyncLocalAuthorizationListReq) (*SyncLocalAuthorizationListResp, error)
	// 预约定时充电
	ReserveNow(context.Context, *ReserveNowReq) (*ReserveNowResp, error)
	// 取消预约定时
	CancelReservation(context.Context, *CancelReservationReq) (*CancelReservationResp, error)
	// 远程诊断
	RemoteDiagnosis(context.Context, *RemoteDiagnosisReq) (*RemoteDiagnosisResp, error)
	// 预约停止充电
	ReserveStop(context.Context, *ReserveStopTransactionReq) (*ReserveStopTransactionResp, error)
	// 取消预约停止充电
	CancelReserveStop(context.Context, *CancelReserveStopTransactionReq) (*CancelReserveStopTransactionResp, error)
}

// UnimplementedLogicServicesServer can be embedded to have forward compatible implementations.
type UnimplementedLogicServicesServer struct {
}

func (*UnimplementedLogicServicesServer) TransparentMQTTMsg(context.Context, *MQTTMsgReq) (*MQTTMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransparentMQTTMsg not implemented")
}
func (*UnimplementedLogicServicesServer) EvseDisconnected(context.Context, *EvseDisconnectedReq) (*EvseDisconnectedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvseDisconnected not implemented")
}
func (*UnimplementedLogicServicesServer) RemoteStart(context.Context, *RemoteStartReq) (*RemoteStartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteStart not implemented")
}
func (*UnimplementedLogicServicesServer) RemoteStop(context.Context, *RemoteStopReq) (*RemoteStopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteStop not implemented")
}
func (*UnimplementedLogicServicesServer) SetVariables(context.Context, *SetVariablesReq) (*SetVariablesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariables not implemented")
}
func (*UnimplementedLogicServicesServer) GetLog(context.Context, *GetLogReq) (*GetLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (*UnimplementedLogicServicesServer) SetPriceScheme(context.Context, *SetTariffReq) (*SetPriceSchemeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPriceScheme not implemented")
}
func (*UnimplementedLogicServicesServer) GetTransactions(context.Context, *GetTransactionsReq) (*GetTransactionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (*UnimplementedLogicServicesServer) GetBaseReport(context.Context, *GetBaseReportReq) (*GetBaseReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseReport not implemented")
}
func (*UnimplementedLogicServicesServer) BindEvseStation(context.Context, *BindEvseStationReq) (*BindEvseStationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEvseStation not implemented")
}
func (*UnimplementedLogicServicesServer) UnbindEvseStation(context.Context, *BindEvseStationReq) (*BindEvseStationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindEvseStation not implemented")
}
func (*UnimplementedLogicServicesServer) Evse(context.Context, *EvseReq) (*EvseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evse not implemented")
}
func (*UnimplementedLogicServicesServer) RemoteControl(context.Context, *RemoteControlReq) (*RemoteControlResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteControl not implemented")
}
func (*UnimplementedLogicServicesServer) GetDiagnostics(context.Context, *GetDiagnosticsReq) (*GetDiagnosticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnostics not implemented")
}
func (*UnimplementedLogicServicesServer) UpdateFirmware(context.Context, *UpdateFirmwareReq) (*UpdateFirmwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirmware not implemented")
}
func (*UnimplementedLogicServicesServer) ChangeConfiguration(context.Context, *ChangeConfigurationReq) (*ChangeConfigurationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeConfiguration not implemented")
}
func (*UnimplementedLogicServicesServer) TriggerDeviceCMD(context.Context, *TriggerDeviceCMDReq) (*TriggerDeviceCMDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerDeviceCMD not implemented")
}
func (*UnimplementedLogicServicesServer) SyncLocalAuthorizationList(context.Context, *SyncLocalAuthorizationListReq) (*SyncLocalAuthorizationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncLocalAuthorizationList not implemented")
}
func (*UnimplementedLogicServicesServer) ReserveNow(context.Context, *ReserveNowReq) (*ReserveNowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNow not implemented")
}
func (*UnimplementedLogicServicesServer) CancelReservation(context.Context, *CancelReservationReq) (*CancelReservationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (*UnimplementedLogicServicesServer) RemoteDiagnosis(context.Context, *RemoteDiagnosisReq) (*RemoteDiagnosisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteDiagnosis not implemented")
}
func (*UnimplementedLogicServicesServer) ReserveStop(context.Context, *ReserveStopTransactionReq) (*ReserveStopTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveStop not implemented")
}
func (*UnimplementedLogicServicesServer) CancelReserveStop(context.Context, *CancelReserveStopTransactionReq) (*CancelReserveStopTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReserveStop not implemented")
}

func RegisterLogicServicesServer(s *grpc.Server, srv LogicServicesServer) {
	s.RegisterService(&_LogicServices_serviceDesc, srv)
}

func _LogicServices_TransparentMQTTMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MQTTMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).TransparentMQTTMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/TransparentMQTTMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).TransparentMQTTMsg(ctx, req.(*MQTTMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_EvseDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseDisconnectedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).EvseDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/EvseDisconnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).EvseDisconnected(ctx, req.(*EvseDisconnectedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_RemoteStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).RemoteStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/RemoteStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).RemoteStart(ctx, req.(*RemoteStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_RemoteStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).RemoteStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/RemoteStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).RemoteStop(ctx, req.(*RemoteStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_SetVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariablesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).SetVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/SetVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).SetVariables(ctx, req.(*SetVariablesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).GetLog(ctx, req.(*GetLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_SetPriceScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTariffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).SetPriceScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/SetPriceScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).SetPriceScheme(ctx, req.(*SetTariffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).GetTransactions(ctx, req.(*GetTransactionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_GetBaseReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).GetBaseReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/GetBaseReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).GetBaseReport(ctx, req.(*GetBaseReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_BindEvseStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindEvseStationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).BindEvseStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/BindEvseStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).BindEvseStation(ctx, req.(*BindEvseStationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_UnbindEvseStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindEvseStationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).UnbindEvseStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/UnbindEvseStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).UnbindEvseStation(ctx, req.(*BindEvseStationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_Evse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).Evse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/Evse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).Evse(ctx, req.(*EvseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_RemoteControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteControlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).RemoteControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/RemoteControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).RemoteControl(ctx, req.(*RemoteControlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_GetDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosticsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).GetDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/GetDiagnostics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).GetDiagnostics(ctx, req.(*GetDiagnosticsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_UpdateFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirmwareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).UpdateFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/UpdateFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).UpdateFirmware(ctx, req.(*UpdateFirmwareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_ChangeConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeConfigurationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).ChangeConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/ChangeConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).ChangeConfiguration(ctx, req.(*ChangeConfigurationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_TriggerDeviceCMD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerDeviceCMDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).TriggerDeviceCMD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/TriggerDeviceCMD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).TriggerDeviceCMD(ctx, req.(*TriggerDeviceCMDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_SyncLocalAuthorizationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncLocalAuthorizationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).SyncLocalAuthorizationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/SyncLocalAuthorizationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).SyncLocalAuthorizationList(ctx, req.(*SyncLocalAuthorizationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_ReserveNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveNowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).ReserveNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/ReserveNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).ReserveNow(ctx, req.(*ReserveNowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/CancelReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).CancelReservation(ctx, req.(*CancelReservationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_RemoteDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteDiagnosisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).RemoteDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/RemoteDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).RemoteDiagnosis(ctx, req.(*RemoteDiagnosisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_ReserveStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveStopTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).ReserveStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/ReserveStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).ReserveStop(ctx, req.(*ReserveStopTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicServices_CancelReserveStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReserveStopTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServicesServer).CancelReserveStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coregw.LogicServices/CancelReserveStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServicesServer).CancelReserveStop(ctx, req.(*CancelReserveStopTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogicServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coregw.LogicServices",
	HandlerType: (*LogicServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransparentMQTTMsg",
			Handler:    _LogicServices_TransparentMQTTMsg_Handler,
		},
		{
			MethodName: "EvseDisconnected",
			Handler:    _LogicServices_EvseDisconnected_Handler,
		},
		{
			MethodName: "RemoteStart",
			Handler:    _LogicServices_RemoteStart_Handler,
		},
		{
			MethodName: "RemoteStop",
			Handler:    _LogicServices_RemoteStop_Handler,
		},
		{
			MethodName: "SetVariables",
			Handler:    _LogicServices_SetVariables_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _LogicServices_GetLog_Handler,
		},
		{
			MethodName: "SetPriceScheme",
			Handler:    _LogicServices_SetPriceScheme_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _LogicServices_GetTransactions_Handler,
		},
		{
			MethodName: "GetBaseReport",
			Handler:    _LogicServices_GetBaseReport_Handler,
		},
		{
			MethodName: "BindEvseStation",
			Handler:    _LogicServices_BindEvseStation_Handler,
		},
		{
			MethodName: "UnbindEvseStation",
			Handler:    _LogicServices_UnbindEvseStation_Handler,
		},
		{
			MethodName: "Evse",
			Handler:    _LogicServices_Evse_Handler,
		},
		{
			MethodName: "RemoteControl",
			Handler:    _LogicServices_RemoteControl_Handler,
		},
		{
			MethodName: "GetDiagnostics",
			Handler:    _LogicServices_GetDiagnostics_Handler,
		},
		{
			MethodName: "UpdateFirmware",
			Handler:    _LogicServices_UpdateFirmware_Handler,
		},
		{
			MethodName: "ChangeConfiguration",
			Handler:    _LogicServices_ChangeConfiguration_Handler,
		},
		{
			MethodName: "TriggerDeviceCMD",
			Handler:    _LogicServices_TriggerDeviceCMD_Handler,
		},
		{
			MethodName: "SyncLocalAuthorizationList",
			Handler:    _LogicServices_SyncLocalAuthorizationList_Handler,
		},
		{
			MethodName: "ReserveNow",
			Handler:    _LogicServices_ReserveNow_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _LogicServices_CancelReservation_Handler,
		},
		{
			MethodName: "RemoteDiagnosis",
			Handler:    _LogicServices_RemoteDiagnosis_Handler,
		},
		{
			MethodName: "ReserveStop",
			Handler:    _LogicServices_ReserveStop_Handler,
		},
		{
			MethodName: "CancelReserveStop",
			Handler:    _LogicServices_CancelReserveStop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coregw.proto",
}
