// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xa.proto

package xa

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ACT int32

const (
	ACT_PREPARE  ACT = 0
	ACT_ROLLBACK ACT = 1
	ACT_COMMIT   ACT = 2
)

var ACT_name = map[int32]string{
	0: "PREPARE",
	1: "ROLLBACK",
	2: "COMMIT",
}

var ACT_value = map[string]int32{
	"PREPARE":  0,
	"ROLLBACK": 1,
	"COMMIT":   2,
}

func (x ACT) String() string {
	return proto.EnumName(ACT_name, int32(x))
}

func (ACT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ca189c5b63134a4, []int{0}
}

type XAReq struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty,string"`
	Act                  ACT      `protobuf:"varint,2,opt,name=act,proto3,enum=xa.ACT" json:"act,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XAReq) Reset()         { *m = XAReq{} }
func (m *XAReq) String() string { return proto.CompactTextString(m) }
func (*XAReq) ProtoMessage()    {}
func (*XAReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca189c5b63134a4, []int{0}
}

func (m *XAReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XAReq.Unmarshal(m, b)
}
func (m *XAReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XAReq.Marshal(b, m, deterministic)
}
func (m *XAReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XAReq.Merge(m, src)
}
func (m *XAReq) XXX_Size() int {
	return xxx_messageInfo_XAReq.Size(m)
}
func (m *XAReq) XXX_DiscardUnknown() {
	xxx_messageInfo_XAReq.DiscardUnknown(m)
}

var xxx_messageInfo_XAReq proto.InternalMessageInfo

func (m *XAReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *XAReq) GetAct() ACT {
	if m != nil {
		return m.Act
	}
	return ACT_PREPARE
}

type XAResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XAResp) Reset()         { *m = XAResp{} }
func (m *XAResp) String() string { return proto.CompactTextString(m) }
func (*XAResp) ProtoMessage()    {}
func (*XAResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca189c5b63134a4, []int{1}
}

func (m *XAResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XAResp.Unmarshal(m, b)
}
func (m *XAResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XAResp.Marshal(b, m, deterministic)
}
func (m *XAResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XAResp.Merge(m, src)
}
func (m *XAResp) XXX_Size() int {
	return xxx_messageInfo_XAResp.Size(m)
}
func (m *XAResp) XXX_DiscardUnknown() {
	xxx_messageInfo_XAResp.DiscardUnknown(m)
}

var xxx_messageInfo_XAResp proto.InternalMessageInfo

type GetXAReq struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty,string"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetXAReq) Reset()         { *m = GetXAReq{} }
func (m *GetXAReq) String() string { return proto.CompactTextString(m) }
func (*GetXAReq) ProtoMessage()    {}
func (*GetXAReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca189c5b63134a4, []int{2}
}

func (m *GetXAReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetXAReq.Unmarshal(m, b)
}
func (m *GetXAReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetXAReq.Marshal(b, m, deterministic)
}
func (m *GetXAReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetXAReq.Merge(m, src)
}
func (m *GetXAReq) XXX_Size() int {
	return xxx_messageInfo_GetXAReq.Size(m)
}
func (m *GetXAReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetXAReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetXAReq proto.InternalMessageInfo

func (m *GetXAReq) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetXAResp struct {
	Act                  ACT      `protobuf:"varint,1,opt,name=act,proto3,enum=xa.ACT" json:"act,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetXAResp) Reset()         { *m = GetXAResp{} }
func (m *GetXAResp) String() string { return proto.CompactTextString(m) }
func (*GetXAResp) ProtoMessage()    {}
func (*GetXAResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca189c5b63134a4, []int{3}
}

func (m *GetXAResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetXAResp.Unmarshal(m, b)
}
func (m *GetXAResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetXAResp.Marshal(b, m, deterministic)
}
func (m *GetXAResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetXAResp.Merge(m, src)
}
func (m *GetXAResp) XXX_Size() int {
	return xxx_messageInfo_GetXAResp.Size(m)
}
func (m *GetXAResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetXAResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetXAResp proto.InternalMessageInfo

func (m *GetXAResp) GetAct() ACT {
	if m != nil {
		return m.Act
	}
	return ACT_PREPARE
}

func init() {
	proto.RegisterEnum("xa.ACT", ACT_name, ACT_value)
	proto.RegisterType((*XAReq)(nil), "xa.XAReq")
	proto.RegisterType((*XAResp)(nil), "xa.XAResp")
	proto.RegisterType((*GetXAReq)(nil), "xa.GetXAReq")
	proto.RegisterType((*GetXAResp)(nil), "xa.GetXAResp")
}

func init() { proto.RegisterFile("xa.proto", fileDescriptor_1ca189c5b63134a4) }

var fileDescriptor_1ca189c5b63134a4 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x80, 0x6d, 0xe6, 0xba, 0xee, 0x6d, 0x8e, 0xf2, 0x4e, 0xb3, 0x5e, 0x46, 0x11, 0x19, 0x32,
	0x5b, 0xa9, 0xbf, 0x20, 0xeb, 0x86, 0x16, 0x37, 0x56, 0x62, 0x0f, 0xc3, 0x5b, 0x5a, 0x43, 0x29,
	0x94, 0x25, 0x2e, 0x41, 0xfa, 0xf3, 0xa5, 0xc5, 0x82, 0xa0, 0xb7, 0xe4, 0x7b, 0xbc, 0x8f, 0x8f,
	0x07, 0x4e, 0xc3, 0x03, 0x75, 0x96, 0x46, 0x22, 0x69, 0xb8, 0x1f, 0xc1, 0xf0, 0x48, 0x99, 0xf8,
	0xc4, 0x19, 0x90, 0x64, 0x33, 0xb7, 0x16, 0xd6, 0xf2, 0x92, 0x91, 0x64, 0x83, 0xd7, 0x30, 0xe0,
	0x85, 0x99, 0x93, 0x85, 0xb5, 0x9c, 0x45, 0xa3, 0xa0, 0xe1, 0x01, 0x8d, 0x33, 0xd6, 0x32, 0xdf,
	0x01, 0xbb, 0xdd, 0xd1, 0xca, 0xf7, 0xc0, 0x79, 0x16, 0xe6, 0x5f, 0x81, 0x7f, 0x07, 0xe3, 0x9f,
	0x99, 0x56, 0xbd, 0xcd, 0xfa, 0x6b, 0xbb, 0x5f, 0xc1, 0x80, 0xc6, 0x19, 0x4e, 0x60, 0x94, 0xb2,
	0x6d, 0x4a, 0xd9, 0xd6, 0xbd, 0xc0, 0x29, 0x38, 0xec, 0xb0, 0xdb, 0xad, 0x69, 0xfc, 0xea, 0x5a,
	0x08, 0x60, 0xc7, 0x87, 0xfd, 0x3e, 0xc9, 0x5c, 0x12, 0xa5, 0x30, 0x61, 0x69, 0xfc, 0x26, 0xce,
	0x5f, 0x55, 0x21, 0x34, 0xde, 0x00, 0x39, 0x52, 0x1c, 0xb7, 0xc2, 0xae, 0xc2, 0x83, 0xfe, 0xa9,
	0x15, 0xde, 0xc2, 0xb0, 0x2b, 0xc0, 0x69, 0x0b, 0xfb, 0x50, 0xef, 0xea, 0xd7, 0x4f, 0xab, 0xf5,
	0xe3, 0xcb, 0xe0, 0x7d, 0x55, 0x56, 0xa6, 0xe6, 0x79, 0x50, 0xca, 0x4a, 0x9a, 0xe0, 0x24, 0x4c,
	0xa8, 0x3f, 0xc4, 0x43, 0xce, 0xb5, 0x08, 0xbb, 0x53, 0x15, 0xb2, 0x0e, 0x4b, 0x59, 0xf3, 0x53,
	0x19, 0x36, 0x3c, 0xb7, 0x3b, 0xf6, 0xf4, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x32, 0x5d, 0x0a,
	0x4a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCServicesClient is the client API for RPCServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCServicesClient interface {
	XA(ctx context.Context, in *XAReq, opts ...grpc.CallOption) (*XAResp, error)
	GetXA(ctx context.Context, in *GetXAReq, opts ...grpc.CallOption) (*GetXAResp, error)
}

type rPCServicesClient struct {
	cc *grpc.ClientConn
}

func NewRPCServicesClient(cc *grpc.ClientConn) RPCServicesClient {
	return &rPCServicesClient{cc}
}

func (c *rPCServicesClient) XA(ctx context.Context, in *XAReq, opts ...grpc.CallOption) (*XAResp, error) {
	out := new(XAResp)
	err := c.cc.Invoke(ctx, "/xa.RPCServices/XA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServicesClient) GetXA(ctx context.Context, in *GetXAReq, opts ...grpc.CallOption) (*GetXAResp, error) {
	out := new(GetXAResp)
	err := c.cc.Invoke(ctx, "/xa.RPCServices/GetXA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServicesServer is the server API for RPCServices service.
type RPCServicesServer interface {
	XA(context.Context, *XAReq) (*XAResp, error)
	GetXA(context.Context, *GetXAReq) (*GetXAResp, error)
}

func RegisterRPCServicesServer(s *grpc.Server, srv RPCServicesServer) {
	s.RegisterService(&_RPCServices_serviceDesc, srv)
}

func _RPCServices_XA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServicesServer).XA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xa.RPCServices/XA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServicesServer).XA(ctx, req.(*XAReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCServices_GetXA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXAReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServicesServer).GetXA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xa.RPCServices/GetXA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServicesServer).GetXA(ctx, req.(*GetXAReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xa.RPCServices",
	HandlerType: (*RPCServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "XA",
			Handler:    _RPCServices_XA_Handler,
		},
		{
			MethodName: "GetXA",
			Handler:    _RPCServices_GetXA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xa.proto",
}
