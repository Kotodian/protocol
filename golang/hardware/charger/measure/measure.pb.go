//*
//充电站与后台通信协议 protocol buffer源文件，适用于protoc 3
//遥测类型定义
//
//版本记录
//V1.0.0 2018-3-2 mooney_yuan@qq.com

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: measure.proto

package measure

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Measurand int32

const (
	Measurand_MUnknown              Measurand = 0
	Measurand_WorkingStatus         Measurand = 1   ///组件工作状态，0-正常，1-故障，2-通信故障
	Measurand_ConnectorAvailable    Measurand = 2   ///空闲可用充电接口数量
	Measurand_Temperature           Measurand = 100 ///温度，单位摄氏度，分辨率1度
	Measurand_Voltage               Measurand = 101 ///电压，单位V，分辨率0.1V
	Measurand_MilliVol              Measurand = 102 ///毫伏电压，单位mV，分辨率1mV
	Measurand_Current               Measurand = 103 ///电流，单位A，分辨率0.1A
	Measurand_PowerWatts            Measurand = 104 ///功率，单位W，分辨率0.01W
	Measurand_RPM                   Measurand = 105 ///风扇转速，单位转／分钟，分辨率1
	Measurand_SOC                   Measurand = 106 ///电池剩余容量，单位％，分辨率1
	Measurand_GeneralInput          Measurand = 107 ///通用输入状态，0-低电平，1-高电平
	Measurand_GeneralAdc            Measurand = 108 ///通用adc检测，单位mV，分辨率1mV
	Measurand_GuidanceVoltage       Measurand = 109 ///充电接口导引电压，单位V，分辨率0.01V
	Measurand_ContactorStatus       Measurand = 110 ///接触器状态，0-断开，1-吸合，2-状态不可信
	Measurand_LockStatus            Measurand = 111 ///充电接口电子锁状态，0-打开，1-锁上，2-状态不可信
	Measurand_CPStatus              Measurand = 112 ///CP检测状态，0-12V状态，1-9V状态，2-6V状态，3-错误状态
	Measurand_CCStatus              Measurand = 113 ///CC检测状态，0-断开，1-连接，2-不可信
	Measurand_CC1Status             Measurand = 114 ///CC1检测状态，0-断开，1-连接，2-不可信
	Measurand_GunPosition           Measurand = 115 ///充电枪位置状态，0-归位，1-未归位，2-不可信
	Measurand_DoorStatus            Measurand = 116 ///门禁状态，0-门关闭，1-门打开，2-不可信
	Measurand_InputVoltage          Measurand = 117 ///输入电压，单位V，分辨率0.1V
	Measurand_InputVoltageA         Measurand = 118 ///输入A相电压，单位V，分辨率0.1V
	Measurand_InputVoltageB         Measurand = 119 ///输入B相电压，单位V，分辨率0.1V
	Measurand_InputVoltageC         Measurand = 120 ///输入C相电压，单位V，分辨率0.1V
	Measurand_InputCurrent          Measurand = 121 ///输入电流，单位A，分辨率0.1A
	Measurand_InputCurrentA         Measurand = 122 ///输入A相电流，单位A，分辨率0.1A
	Measurand_InputCurrentB         Measurand = 123 ///输入B相电流，单位B，分辨率0.1A
	Measurand_InputCurrentC         Measurand = 124 ///输入C相电流，单位C，分辨率0.1A
	Measurand_OutputVoltage         Measurand = 125 ///输出电压，单位V，分辨率0.1V
	Measurand_OutputCurrent         Measurand = 126 ///输出电流，单位A，分辨率0.1A
	Measurand_RSSI                  Measurand = 127 ///移动网络信号强度
	Measurand_WirelessSignal        Measurand = 128 ///无线局域网信号强度
	Measurand_CPUUsage              Measurand = 129 ///处理器使用率，单位％，分辨率1
	Measurand_MemoryFree            Measurand = 130 ///剩余内存，单位％，分辨率1
	Measurand_StorageFree           Measurand = 131 ///剩余存储容量，单位％，分辨率1
	Measurand_ParkingStatus         Measurand = 132 ///车位检测状态，0-空闲，1-占用中
	Measurand_ParkLockStatus        Measurand = 133 ///车位锁状态，0-解锁状态，1-解锁／上锁中，2-锁住状态
	Measurand_Electricity           Measurand = 134 ///电量，单位kWh，分辨率0.01kWh
	Measurand_PieceElectricity      Measurand = 135 ///分段费率电量，单位kWh，分辨率0.01kWh
	Measurand_VoltageA              Measurand = 136 ///A相电压，单位V，分辨率0.1V
	Measurand_VoltageB              Measurand = 137 ///B相电压，单位V，分辨率0.1V
	Measurand_VoltageC              Measurand = 138 ///C相电压，单位V，分辨率0.1V
	Measurand_CurrentA              Measurand = 139 ///A相电流，单位A，分辨率0.1A
	Measurand_CurrentB              Measurand = 140 ///B相电流，单位A，分辨率0.1A
	Measurand_CurrentC              Measurand = 141 ///C相电流，单位A，分辨率0.1A
	Measurand_PowerKilowatts        Measurand = 142 ///功率，单位kW，分辨率0.01kW
	Measurand_MilliCurrent          Measurand = 143 ///豪安电流，单位mA，分辨率1mA
	Measurand_ConnectorStatus       Measurand = 144 ///充电枪头状态,  0:不可用；1:空闲；2:已连接；3:充电中；4:充电已启动，充电桩未输出；5:充电已启动，电动车未充电；6:充电已完成；7:预约中；8:故障；9:等待中
	Measurand_ConsumedElectric      Measurand = 145 ///已充电量	某一充电订单的已充电量，单位kwh，分辨率0.01kwh
	Measurand_ConsumedTime          Measurand = 146 ///已充时间	单位秒
	Measurand_TotalCost             Measurand = 147 ///消费总金额	分辨率1分
	Measurand_ElectricityCost       Measurand = 148 ///电费 分辨率1分
	Measurand_ServiceCost           Measurand = 149 ///服务费  分辨率1分
	Measurand_SharpElectricity      Measurand = 150 ///尖电量  分辨率0.01kwh
	Measurand_SharpElectricityCost  Measurand = 151 ///尖电费  分辨率1分
	Measurand_SharpServicesCost     Measurand = 152 ///尖服务费  分辨率1分
	Measurand_PeakElectricity       Measurand = 153 ///峰电量  分辨率0.01kwh
	Measurand_PeakElectricityCost   Measurand = 154 ///峰电费  分辨率1分
	Measurand_PeakServicesCost      Measurand = 155 ///峰服务费  分辨率1分
	Measurand_FlatElectricity       Measurand = 156 ///平电量  分辨率0.01kwh
	Measurand_FlatElectricityCost   Measurand = 157 ///平电费  分辨率1分
	Measurand_FlatServicesCost      Measurand = 158 ///平服务费  分辨率1分
	Measurand_ValleyElectricity     Measurand = 159 ///谷电量  分辨率0.01kwh
	Measurand_ValleyElectricityCost Measurand = 160 ///谷电费  分辨率1分
	Measurand_ValleyServicesCost    Measurand = 161 ///谷服务费  分辨率1分
	Measurand_RemainingChargingTime Measurand = 162 ///剩余充电时长，单位秒
	Measurand_DemandCurrent         Measurand = 163 //需求电流 单位A，分辨率0.1A
	Measurand_DemandVoltage         Measurand = 164 //需求电压 单位V，分辨率0.1V
)

// Enum value maps for Measurand.
var (
	Measurand_name = map[int32]string{
		0:   "MUnknown",
		1:   "WorkingStatus",
		2:   "ConnectorAvailable",
		100: "Temperature",
		101: "Voltage",
		102: "MilliVol",
		103: "Current",
		104: "PowerWatts",
		105: "RPM",
		106: "SOC",
		107: "GeneralInput",
		108: "GeneralAdc",
		109: "GuidanceVoltage",
		110: "ContactorStatus",
		111: "LockStatus",
		112: "CPStatus",
		113: "CCStatus",
		114: "CC1Status",
		115: "GunPosition",
		116: "DoorStatus",
		117: "InputVoltage",
		118: "InputVoltageA",
		119: "InputVoltageB",
		120: "InputVoltageC",
		121: "InputCurrent",
		122: "InputCurrentA",
		123: "InputCurrentB",
		124: "InputCurrentC",
		125: "OutputVoltage",
		126: "OutputCurrent",
		127: "RSSI",
		128: "WirelessSignal",
		129: "CPUUsage",
		130: "MemoryFree",
		131: "StorageFree",
		132: "ParkingStatus",
		133: "ParkLockStatus",
		134: "Electricity",
		135: "PieceElectricity",
		136: "VoltageA",
		137: "VoltageB",
		138: "VoltageC",
		139: "CurrentA",
		140: "CurrentB",
		141: "CurrentC",
		142: "PowerKilowatts",
		143: "MilliCurrent",
		144: "ConnectorStatus",
		145: "ConsumedElectric",
		146: "ConsumedTime",
		147: "TotalCost",
		148: "ElectricityCost",
		149: "ServiceCost",
		150: "SharpElectricity",
		151: "SharpElectricityCost",
		152: "SharpServicesCost",
		153: "PeakElectricity",
		154: "PeakElectricityCost",
		155: "PeakServicesCost",
		156: "FlatElectricity",
		157: "FlatElectricityCost",
		158: "FlatServicesCost",
		159: "ValleyElectricity",
		160: "ValleyElectricityCost",
		161: "ValleyServicesCost",
		162: "RemainingChargingTime",
		163: "DemandCurrent",
		164: "DemandVoltage",
	}
	Measurand_value = map[string]int32{
		"MUnknown":              0,
		"WorkingStatus":         1,
		"ConnectorAvailable":    2,
		"Temperature":           100,
		"Voltage":               101,
		"MilliVol":              102,
		"Current":               103,
		"PowerWatts":            104,
		"RPM":                   105,
		"SOC":                   106,
		"GeneralInput":          107,
		"GeneralAdc":            108,
		"GuidanceVoltage":       109,
		"ContactorStatus":       110,
		"LockStatus":            111,
		"CPStatus":              112,
		"CCStatus":              113,
		"CC1Status":             114,
		"GunPosition":           115,
		"DoorStatus":            116,
		"InputVoltage":          117,
		"InputVoltageA":         118,
		"InputVoltageB":         119,
		"InputVoltageC":         120,
		"InputCurrent":          121,
		"InputCurrentA":         122,
		"InputCurrentB":         123,
		"InputCurrentC":         124,
		"OutputVoltage":         125,
		"OutputCurrent":         126,
		"RSSI":                  127,
		"WirelessSignal":        128,
		"CPUUsage":              129,
		"MemoryFree":            130,
		"StorageFree":           131,
		"ParkingStatus":         132,
		"ParkLockStatus":        133,
		"Electricity":           134,
		"PieceElectricity":      135,
		"VoltageA":              136,
		"VoltageB":              137,
		"VoltageC":              138,
		"CurrentA":              139,
		"CurrentB":              140,
		"CurrentC":              141,
		"PowerKilowatts":        142,
		"MilliCurrent":          143,
		"ConnectorStatus":       144,
		"ConsumedElectric":      145,
		"ConsumedTime":          146,
		"TotalCost":             147,
		"ElectricityCost":       148,
		"ServiceCost":           149,
		"SharpElectricity":      150,
		"SharpElectricityCost":  151,
		"SharpServicesCost":     152,
		"PeakElectricity":       153,
		"PeakElectricityCost":   154,
		"PeakServicesCost":      155,
		"FlatElectricity":       156,
		"FlatElectricityCost":   157,
		"FlatServicesCost":      158,
		"ValleyElectricity":     159,
		"ValleyElectricityCost": 160,
		"ValleyServicesCost":    161,
		"RemainingChargingTime": 162,
		"DemandCurrent":         163,
		"DemandVoltage":         164,
	}
)

func (x Measurand) Enum() *Measurand {
	p := new(Measurand)
	*p = x
	return p
}

func (x Measurand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Measurand) Descriptor() protoreflect.EnumDescriptor {
	return file_measure_proto_enumTypes[0].Descriptor()
}

func (Measurand) Type() protoreflect.EnumType {
	return &file_measure_proto_enumTypes[0]
}

func (x Measurand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Measurand.Descriptor instead.
func (Measurand) EnumDescriptor() ([]byte, []int) {
	return file_measure_proto_rawDescGZIP(), []int{0}
}

var File_measure_proto protoreflect.FileDescriptor

var file_measure_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2a,
	0x89, 0x0a, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x10, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x56, 0x6f, 0x6c,
	0x10, 0x66, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x67, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x10, 0x68, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x50, 0x4d, 0x10, 0x69, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x43, 0x10,
	0x6a, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x10, 0x6b, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x64,
	0x63, 0x10, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x6e, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x6f, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x70, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x71, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x43, 0x31,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x75, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x6f, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x75, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x10, 0x76, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x10,
	0x77, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x10, 0x78, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x10, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x10, 0x7a, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x7b, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x10, 0x7c, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x10, 0x7d, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x10, 0x7e, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x53, 0x53, 0x49, 0x10, 0x7f, 0x12,
	0x13, 0x0a, 0x0e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x10, 0x80, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x10, 0x81, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65,
	0x65, 0x10, 0x82, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x72, 0x65, 0x65, 0x10, 0x83, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x84, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x85, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x86,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x69, 0x65, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x87, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x41, 0x10, 0x88, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x10, 0x89, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x43, 0x10, 0x8a, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x10, 0x8b, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x10, 0x8c, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x10,
	0x8d, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6f, 0x77,
	0x61, 0x74, 0x74, 0x73, 0x10, 0x8e, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x8f, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x90, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x10, 0x91, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x92, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x93, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x94, 0x01,
	0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x10,
	0x95, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x96, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x68, 0x61,
	0x72, 0x70, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73,
	0x74, 0x10, 0x97, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x98, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x50, 0x65, 0x61, 0x6b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10,
	0x99, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x65, 0x61, 0x6b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x9a, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x50, 0x65, 0x61, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x10, 0x9b, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x6c, 0x61, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x9c, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x6c, 0x61,
	0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74,
	0x10, 0x9d, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x9e, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x56, 0x61,
	0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10,
	0x9f, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x10, 0xa0, 0x01, 0x12, 0x17,
	0x0a, 0x12, 0x56, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x10, 0xa1, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x10, 0xa2, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x10, 0xa3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0xa4, 0x01, 0x42, 0x40, 0x48, 0x03, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x6f, 0x74, 0x6f,
	0x64, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_measure_proto_rawDescOnce sync.Once
	file_measure_proto_rawDescData = file_measure_proto_rawDesc
)

func file_measure_proto_rawDescGZIP() []byte {
	file_measure_proto_rawDescOnce.Do(func() {
		file_measure_proto_rawDescData = protoimpl.X.CompressGZIP(file_measure_proto_rawDescData)
	})
	return file_measure_proto_rawDescData
}

var file_measure_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_measure_proto_goTypes = []interface{}{
	(Measurand)(0), // 0: Goiot.Protocol.Charger.Measure.Measurand
}
var file_measure_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_measure_proto_init() }
func file_measure_proto_init() {
	if File_measure_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_measure_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_measure_proto_goTypes,
		DependencyIndexes: file_measure_proto_depIdxs,
		EnumInfos:         file_measure_proto_enumTypes,
	}.Build()
	File_measure_proto = out.File
	file_measure_proto_rawDesc = nil
	file_measure_proto_goTypes = nil
	file_measure_proto_depIdxs = nil
}
