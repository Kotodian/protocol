// Code generated by protoc-gen-go. DO NOT EDIT.
// source: charger/measure.proto

package measure

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Measurand int32

const (
	Measurand_MUnknown              Measurand = 0
	Measurand_WorkingStatus         Measurand = 1
	Measurand_ConnectorAvailable    Measurand = 2
	Measurand_Temperature           Measurand = 100
	Measurand_Voltage               Measurand = 101
	Measurand_MilliVol              Measurand = 102
	Measurand_Current               Measurand = 103
	Measurand_PowerWatts            Measurand = 104
	Measurand_RPM                   Measurand = 105
	Measurand_SOC                   Measurand = 106
	Measurand_GeneralInput          Measurand = 107
	Measurand_GeneralAdc            Measurand = 108
	Measurand_GuidanceVoltage       Measurand = 109
	Measurand_ContactorStatus       Measurand = 110
	Measurand_LockStatus            Measurand = 111
	Measurand_CPStatus              Measurand = 112
	Measurand_CCStatus              Measurand = 113
	Measurand_CC1Status             Measurand = 114
	Measurand_GunPosition           Measurand = 115
	Measurand_DoorStatus            Measurand = 116
	Measurand_InputVoltage          Measurand = 117
	Measurand_InputVoltageA         Measurand = 118
	Measurand_InputVoltageB         Measurand = 119
	Measurand_InputVoltageC         Measurand = 120
	Measurand_InputCurrent          Measurand = 121
	Measurand_InputCurrentA         Measurand = 122
	Measurand_InputCurrentB         Measurand = 123
	Measurand_InputCurrentC         Measurand = 124
	Measurand_OutputVoltage         Measurand = 125
	Measurand_OutputCurrent         Measurand = 126
	Measurand_RSSI                  Measurand = 127
	Measurand_WirelessSignal        Measurand = 128
	Measurand_CPUUsage              Measurand = 129
	Measurand_MemoryFree            Measurand = 130
	Measurand_StorageFree           Measurand = 131
	Measurand_ParkingStatus         Measurand = 132
	Measurand_ParkLockStatus        Measurand = 133
	Measurand_Electricity           Measurand = 134
	Measurand_PieceElectricity      Measurand = 135
	Measurand_VoltageA              Measurand = 136
	Measurand_VoltageB              Measurand = 137
	Measurand_VoltageC              Measurand = 138
	Measurand_CurrentA              Measurand = 139
	Measurand_CurrentB              Measurand = 140
	Measurand_CurrentC              Measurand = 141
	Measurand_PowerKilowatts        Measurand = 142
	Measurand_MilliCurrent          Measurand = 143
	Measurand_ConnectorStatus       Measurand = 144
	Measurand_ConsumedElectric      Measurand = 145
	Measurand_ConsumedTime          Measurand = 146
	Measurand_TotalCost             Measurand = 147
	Measurand_ElectricityCost       Measurand = 148
	Measurand_ServiceCost           Measurand = 149
	Measurand_SharpElectricity      Measurand = 150
	Measurand_SharpElectricityCost  Measurand = 151
	Measurand_SharpServicesCost     Measurand = 152
	Measurand_PeakElectricity       Measurand = 153
	Measurand_PeakElectricityCost   Measurand = 154
	Measurand_PeakServicesCost      Measurand = 155
	Measurand_FlatElectricity       Measurand = 156
	Measurand_FlatElectricityCost   Measurand = 157
	Measurand_FlatServicesCost      Measurand = 158
	Measurand_ValleyElectricity     Measurand = 159
	Measurand_ValleyElectricityCost Measurand = 160
	Measurand_ValleyServicesCost    Measurand = 161
	Measurand_RemainingChargingTime Measurand = 162
	Measurand_DemandCurrent         Measurand = 163
	Measurand_DemandVoltage         Measurand = 164
)

var Measurand_name = map[int32]string{
	0:   "MUnknown",
	1:   "WorkingStatus",
	2:   "ConnectorAvailable",
	100: "Temperature",
	101: "Voltage",
	102: "MilliVol",
	103: "Current",
	104: "PowerWatts",
	105: "RPM",
	106: "SOC",
	107: "GeneralInput",
	108: "GeneralAdc",
	109: "GuidanceVoltage",
	110: "ContactorStatus",
	111: "LockStatus",
	112: "CPStatus",
	113: "CCStatus",
	114: "CC1Status",
	115: "GunPosition",
	116: "DoorStatus",
	117: "InputVoltage",
	118: "InputVoltageA",
	119: "InputVoltageB",
	120: "InputVoltageC",
	121: "InputCurrent",
	122: "InputCurrentA",
	123: "InputCurrentB",
	124: "InputCurrentC",
	125: "OutputVoltage",
	126: "OutputCurrent",
	127: "RSSI",
	128: "WirelessSignal",
	129: "CPUUsage",
	130: "MemoryFree",
	131: "StorageFree",
	132: "ParkingStatus",
	133: "ParkLockStatus",
	134: "Electricity",
	135: "PieceElectricity",
	136: "VoltageA",
	137: "VoltageB",
	138: "VoltageC",
	139: "CurrentA",
	140: "CurrentB",
	141: "CurrentC",
	142: "PowerKilowatts",
	143: "MilliCurrent",
	144: "ConnectorStatus",
	145: "ConsumedElectric",
	146: "ConsumedTime",
	147: "TotalCost",
	148: "ElectricityCost",
	149: "ServiceCost",
	150: "SharpElectricity",
	151: "SharpElectricityCost",
	152: "SharpServicesCost",
	153: "PeakElectricity",
	154: "PeakElectricityCost",
	155: "PeakServicesCost",
	156: "FlatElectricity",
	157: "FlatElectricityCost",
	158: "FlatServicesCost",
	159: "ValleyElectricity",
	160: "ValleyElectricityCost",
	161: "ValleyServicesCost",
	162: "RemainingChargingTime",
	163: "DemandCurrent",
	164: "DemandVoltage",
}

var Measurand_value = map[string]int32{
	"MUnknown":              0,
	"WorkingStatus":         1,
	"ConnectorAvailable":    2,
	"Temperature":           100,
	"Voltage":               101,
	"MilliVol":              102,
	"Current":               103,
	"PowerWatts":            104,
	"RPM":                   105,
	"SOC":                   106,
	"GeneralInput":          107,
	"GeneralAdc":            108,
	"GuidanceVoltage":       109,
	"ContactorStatus":       110,
	"LockStatus":            111,
	"CPStatus":              112,
	"CCStatus":              113,
	"CC1Status":             114,
	"GunPosition":           115,
	"DoorStatus":            116,
	"InputVoltage":          117,
	"InputVoltageA":         118,
	"InputVoltageB":         119,
	"InputVoltageC":         120,
	"InputCurrent":          121,
	"InputCurrentA":         122,
	"InputCurrentB":         123,
	"InputCurrentC":         124,
	"OutputVoltage":         125,
	"OutputCurrent":         126,
	"RSSI":                  127,
	"WirelessSignal":        128,
	"CPUUsage":              129,
	"MemoryFree":            130,
	"StorageFree":           131,
	"ParkingStatus":         132,
	"ParkLockStatus":        133,
	"Electricity":           134,
	"PieceElectricity":      135,
	"VoltageA":              136,
	"VoltageB":              137,
	"VoltageC":              138,
	"CurrentA":              139,
	"CurrentB":              140,
	"CurrentC":              141,
	"PowerKilowatts":        142,
	"MilliCurrent":          143,
	"ConnectorStatus":       144,
	"ConsumedElectric":      145,
	"ConsumedTime":          146,
	"TotalCost":             147,
	"ElectricityCost":       148,
	"ServiceCost":           149,
	"SharpElectricity":      150,
	"SharpElectricityCost":  151,
	"SharpServicesCost":     152,
	"PeakElectricity":       153,
	"PeakElectricityCost":   154,
	"PeakServicesCost":      155,
	"FlatElectricity":       156,
	"FlatElectricityCost":   157,
	"FlatServicesCost":      158,
	"ValleyElectricity":     159,
	"ValleyElectricityCost": 160,
	"ValleyServicesCost":    161,
	"RemainingChargingTime": 162,
	"DemandCurrent":         163,
	"DemandVoltage":         164,
}

func (x Measurand) String() string {
	return proto.EnumName(Measurand_name, int32(x))
}

func (Measurand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a06e351c95eb93d, []int{0}
}

func init() {
	proto.RegisterEnum("Goiot.Protocol.Charger.Measure.Measurand", Measurand_name, Measurand_value)
}

func init() { proto.RegisterFile("charger/measure.proto", fileDescriptor_5a06e351c95eb93d) }

var fileDescriptor_5a06e351c95eb93d = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x94, 0x59, 0x53, 0xeb, 0x36,
	0x14, 0xc7, 0xeb, 0xd2, 0x29, 0x20, 0x08, 0x1c, 0x04, 0x74, 0x7b, 0xe8, 0x07, 0xe8, 0x43, 0x32,
	0x9d, 0x7e, 0x82, 0xc4, 0x94, 0xc0, 0xb4, 0x19, 0x3c, 0x84, 0x65, 0xa6, 0x6f, 0xc2, 0x39, 0x75,
	0x44, 0x64, 0x29, 0xc8, 0x32, 0x69, 0xba, 0xdd, 0x7d, 0xe1, 0xee, 0xfb, 0xbe, 0xdf, 0xfb, 0x41,
	0xef, 0x48, 0xb6, 0x73, 0x8d, 0xef, 0x9b, 0xcf, 0x4f, 0xe7, 0xfc, 0xf5, 0xd7, 0xd1, 0xb1, 0xc8,
	0x6a, 0xd8, 0x67, 0x3a, 0x42, 0xdd, 0x88, 0x91, 0x25, 0xa9, 0xc6, 0xfa, 0x50, 0x2b, 0xa3, 0xe8,
	0x8f, 0x6d, 0xc5, 0x95, 0xa9, 0x07, 0x36, 0x08, 0x95, 0xa8, 0xfb, 0x59, 0x56, 0xbd, 0x93, 0x65,
	0xfd, 0x74, 0x42, 0xc8, 0x6c, 0xf6, 0xcd, 0x64, 0x8f, 0xce, 0x93, 0x99, 0xce, 0xae, 0x1c, 0x48,
	0x35, 0x92, 0xf0, 0x05, 0x5d, 0x22, 0xb5, 0x7d, 0xa5, 0x07, 0x5c, 0x46, 0x5d, 0xc3, 0x4c, 0x9a,
	0x80, 0x47, 0xbf, 0x21, 0xd4, 0x57, 0x52, 0x62, 0x68, 0x94, 0x6e, 0x1e, 0x33, 0x2e, 0xd8, 0x81,
	0x40, 0xf8, 0x92, 0x2e, 0x92, 0xb9, 0x1d, 0x8c, 0x87, 0xa8, 0x99, 0x49, 0x35, 0x42, 0x8f, 0xce,
	0x91, 0xe9, 0x3d, 0x25, 0x0c, 0x8b, 0x10, 0xd0, 0xc9, 0x72, 0x21, 0xf8, 0x9e, 0x12, 0xf0, 0xa7,
	0x5d, 0xf2, 0x53, 0xad, 0x51, 0x1a, 0x88, 0xe8, 0x02, 0x21, 0x81, 0x1a, 0xa1, 0xde, 0x67, 0xc6,
	0x24, 0xd0, 0xa7, 0xd3, 0x64, 0x6a, 0x3b, 0xe8, 0x00, 0xb7, 0x1f, 0xdd, 0x2d, 0x1f, 0x0e, 0x29,
	0x90, 0xf9, 0x36, 0x4a, 0xd4, 0x4c, 0x6c, 0xca, 0x61, 0x6a, 0x60, 0x60, 0x6b, 0x72, 0xd2, 0xec,
	0x85, 0x20, 0xe8, 0x32, 0x59, 0x6c, 0xa7, 0xbc, 0xc7, 0x64, 0x88, 0xc5, 0x9e, 0xb1, 0x85, 0xbe,
	0x92, 0x86, 0x59, 0xa7, 0xb9, 0x7d, 0x69, 0x2b, 0x7f, 0x57, 0xe1, 0x20, 0x8f, 0x95, 0x35, 0xe6,
	0x07, 0x79, 0x34, 0x74, 0x91, 0x9f, 0x47, 0x47, 0xb4, 0x46, 0x66, 0x7d, 0xff, 0xe7, 0x3c, 0xd4,
	0xf6, 0x84, 0xed, 0x54, 0x06, 0x2a, 0xe1, 0x86, 0x2b, 0x09, 0x89, 0xd5, 0x5a, 0x53, 0x13, 0x6d,
	0x63, 0x7d, 0x3a, 0x83, 0x85, 0x85, 0xd4, 0xf6, 0xaf, 0x4c, 0x9a, 0x70, 0x5c, 0x45, 0x2d, 0x18,
	0x55, 0x91, 0x0f, 0x7f, 0x4d, 0xa4, 0x8a, 0x36, 0x8d, 0x27, 0x49, 0x39, 0x69, 0xc2, 0xdf, 0x55,
	0xd4, 0x82, 0x7f, 0xaa, 0xc8, 0x87, 0x7f, 0x2d, 0xda, 0x4a, 0x4d, 0xc9, 0xd6, 0x7f, 0x9f, 0x50,
	0x21, 0xff, 0x3f, 0x9d, 0x21, 0x5f, 0x6d, 0x77, 0xbb, 0x9b, 0x70, 0x86, 0x2e, 0x93, 0x85, 0x7d,
	0xae, 0x51, 0x60, 0x92, 0x74, 0x79, 0x24, 0x99, 0x80, 0xb3, 0x1e, 0xad, 0xd9, 0x36, 0xed, 0xee,
	0x26, 0xb6, 0xfe, 0x9c, 0x47, 0x17, 0x09, 0xe9, 0x60, 0xac, 0xf4, 0x78, 0x5d, 0x23, 0xc2, 0x79,
	0x8f, 0x02, 0x99, 0xeb, 0x1a, 0xa5, 0x59, 0x84, 0x8e, 0x5c, 0xf0, 0x28, 0x25, 0xb5, 0x80, 0x95,
	0x47, 0xe7, 0xa2, 0x67, 0xa5, 0x2d, 0x2b, 0x5d, 0xc0, 0x25, 0x57, 0xfa, 0xab, 0xc0, 0xd0, 0x68,
	0x1e, 0x72, 0x33, 0x86, 0xcb, 0x1e, 0x5d, 0x25, 0x10, 0x70, 0x0c, 0xb1, 0x8c, 0xaf, 0x38, 0x0f,
	0x93, 0x3e, 0x5e, 0x2d, 0x87, 0x2d, 0x38, 0x29, 0x87, 0x3e, 0x5c, 0xcb, 0x0c, 0x17, 0x9d, 0xba,
	0x5e, 0x0e, 0x5b, 0x70, 0xa3, 0x1c, 0xfa, 0x70, 0x33, 0xf3, 0x65, 0x47, 0xf0, 0x37, 0x2e, 0xd4,
	0xc8, 0x8d, 0xe1, 0x2d, 0x8f, 0x2e, 0x91, 0x79, 0x37, 0xb2, 0x45, 0x8f, 0x6e, 0x7b, 0x74, 0xc5,
	0x4d, 0x54, 0x36, 0xfb, 0xf9, 0x01, 0xee, 0x38, 0xbb, 0xbe, 0x92, 0x49, 0x1a, 0x63, 0xaf, 0x70,
	0x0c, 0x77, 0x5d, 0x7d, 0x81, 0x77, 0x78, 0x8c, 0x70, 0xcf, 0xa3, 0x0b, 0x64, 0x76, 0x47, 0x19,
	0x26, 0x7c, 0x95, 0x18, 0xb8, 0xef, 0xf4, 0x4a, 0x67, 0x74, 0xf4, 0x41, 0xd6, 0x4b, 0xd4, 0xc7,
	0x3c, 0x44, 0x47, 0x1e, 0xba, 0x1d, 0xba, 0x7d, 0xa6, 0x87, 0xe5, 0x86, 0x3c, 0xf2, 0xe8, 0xf7,
	0x64, 0xa5, 0x8a, 0x5d, 0xc5, 0x63, 0xfb, 0x97, 0x2e, 0xb9, 0xa5, 0x5c, 0x28, 0x71, 0xfc, 0x89,
	0xdb, 0x31, 0x40, 0x36, 0x28, 0x0b, 0x3d, 0xf5, 0xe8, 0x77, 0x64, 0xb9, 0x42, 0x5d, 0xfe, 0xb3,
	0xec, 0x2a, 0x90, 0x0d, 0x4e, 0xc9, 0x3c, 0x77, 0x32, 0xeb, 0x82, 0x99, 0xb2, 0xcc, 0x0b, 0x27,
	0x53, 0xa1, 0x2e, 0xff, 0xa5, 0x93, 0xb1, 0x2b, 0xa7, 0x64, 0x5e, 0x39, 0x97, 0x7b, 0x4c, 0x08,
	0x1c, 0x97, 0x85, 0x5e, 0x7b, 0xf4, 0x07, 0xb2, 0xfa, 0x19, 0x77, 0x35, 0x6f, 0x3c, 0xfa, 0x2d,
	0xa1, 0xd9, 0xda, 0x29, 0xb1, 0xb7, 0xae, 0x68, 0x1b, 0x63, 0xc6, 0x25, 0x97, 0x91, 0x7b, 0xe3,
	0xb8, 0x8c, 0x5c, 0xe3, 0xdf, 0xb9, 0x61, 0x5c, 0xc3, 0x98, 0xc9, 0x5e, 0x71, 0x99, 0xef, 0x4b,
	0xac, 0xf8, 0x2f, 0x3e, 0x78, 0xad, 0x8d, 0x8d, 0xa9, 0x3f, 0xd6, 0x22, 0x6e, 0xc2, 0x24, 0x4e,
	0xea, 0x87, 0x6a, 0x9c, 0x28, 0x79, 0x94, 0x72, 0x59, 0x0f, 0x55, 0xdc, 0xb0, 0xac, 0x31, 0xcc,
	0x5f, 0xd1, 0x46, 0xa4, 0x04, 0x93, 0x51, 0xa3, 0xcf, 0x74, 0x6f, 0xc4, 0x34, 0x36, 0x2a, 0x6f,
	0xef, 0xc1, 0xd7, 0x2e, 0xf3, 0x97, 0x8f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xee, 0x2d, 0xa4,
	0x95, 0x05, 0x00, 0x00,
}
