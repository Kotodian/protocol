//*
//充电站与后台通信协议 protocol buffer源文件，适用于protoc 3
//消息及数据类型定义
//
//版本记录
//V1.0.2 2018-3-28 mooney_yuan@qq.com
//1. 增加MessageID，ID_HeartbeatReq和ID_HeartbeatConf用于充电站和服务器对时
//
//V1.0.1 2018-3-13 mooney_yuan@qq.com
//1. 修改计费模版价格分辨率为0.1分，并去掉timescale字段
//2. 修改消息名SystemTelemetryReq为TelemetryReq
//
//V1.0.0 2018-3-1 mooney_yuan@qq.com

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: charger.proto

package charger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//MessageID
//消息代码定义
//所有的消息（请求和应答）都定义了消息代码。请求消息的消息代码小于0x80；
//消息代码加上0x80就是对应消息的应答消息代码；错误应答消息代码为0xff。
type MessageID int32

const (
	MessageID_ID_None                             MessageID = 0
	MessageID_ID_BootNotificationReq              MessageID = 1  //启动通知.请求
	MessageID_ID_HeartbeatReq                     MessageID = 2  //心跳.请求
	MessageID_ID_ChangeConfigurationReq           MessageID = 3  //远程设置参数.请求
	MessageID_ID_GetConfigurationReq              MessageID = 4  //获取设备参数.请求
	MessageID_ID_RemoteControlReq                 MessageID = 5  //远程控制.请求
	MessageID_ID_UpdateFirmwareReq                MessageID = 6  //远程升级.请求
	MessageID_ID_FirmwareStatusNotificationReq    MessageID = 7  //远程升级状态通知.请求
	MessageID_ID_GetDiagnosticsReq                MessageID = 8  //获取设备诊断日志.请求
	MessageID_ID_DiagnosticsStatusNotificationReq MessageID = 9  //诊断日志状态通知.请求
	MessageID_ID_DeviceRegistrationReq            MessageID = 10 //注册请求
	MessageID_ID_GetReportReq                     MessageID = 11
	MessageID_ID_GetVariablesReq                  MessageID = 12
	MessageID_ID_RemoteStartTransactionReq        MessageID = 16 //远程启动充电.请求
	MessageID_ID_RemoteStopTransactionReq         MessageID = 17 //远程停止充电.请求
	MessageID_ID_StartTransactionReq              MessageID = 18 //充电开始通知.请求
	MessageID_ID_StopTransactionReq               MessageID = 19 //充电结束通知.请求
	MessageID_ID_AuthorizeReq                     MessageID = 20 //鉴权.请求
	MessageID_ID_ReserveNowReq                    MessageID = 21 //预约充电.请求
	MessageID_ID_CancelReservationReq             MessageID = 22 //取消预约.请求
	MessageID_ID_UpdateIdCardCacheReq             MessageID = 26 //更新用户卡桩端缓存.请求
	MessageID_ID_StatusNotificationReq            MessageID = 27 //枪状态.请求
	MessageID_ID_TelemetryReq                     MessageID = 33 //遥测.请求
	MessageID_ID_ChargingInfoReq                  MessageID = 35 //充电过程信息.请求
	MessageID_ID_TriggerMessageReq                MessageID = 36 //触发消息重发.请求
	MessageID_ID_GetTransactionsReq               MessageID = 48 //获取离线订单 .请求
	MessageID_ID_TransactionReq                   MessageID = 49 //上报离线订单 .请求
	MessageID_ID_GetWarningReq                    MessageID = 50 //获取告警记录.请求
	MessageID_ID_WarningReq                       MessageID = 51 //上报告警记录.请求
	MessageID_ID_SetTariffReq                     MessageID = 52 //设置计费模版.请求
	MessageID_ID_GetBaseReportReq                 MessageID = 53 //获取报告.请求
	MessageID_ID_NotifyReportReq                  MessageID = 54 //上报报告.请求
	MessageID_ID_SetVariablesReq                  MessageID = 55 //设置变量.请求
	MessageID_ID_GetLogReq                        MessageID = 56 //获取日志.请求
	MessageID_ID_LogStatusNotificationReq         MessageID = 57 //日志上报状态.请求
	MessageID_ID_SendLocalAuthorizationListReq    MessageID = 64 //设置本地授权列表.请求
	MessageID_ID_DataTransferReq                  MessageID = 65 //数据传输.请求
	MessageID_ID_SetChargingProfileReq            MessageID = 66
	MessageID_ID_ClearChargingProfileReq          MessageID = 67
	MessageID_ID_GetChargingProfileReq            MessageID = 68
	MessageID_ID_ReportChargingProfileReq         MessageID = 69
	MessageID_ID_BootNotificationConf             MessageID = 129 //启动通知.应答
	MessageID_ID_HeartbeatConf                    MessageID = 130 //心跳.应答
	MessageID_ID_ChangeConfigurationConf          MessageID = 131 //远程设置参数.应答
	MessageID_ID_GetConfigurationConf             MessageID = 132 //获取设备参数.应答
	MessageID_ID_RemoteControlConf                MessageID = 133 //远程控制.应答
	MessageID_ID_UpdateFirmwareConf               MessageID = 134 //升级固件.应答
	MessageID_ID_FirmwareStatusNotificationConf   MessageID = 135 //远程升级状态通知.应答
	MessageID_ID_GetDiagnosticsConf               MessageID = 136 //获取设备诊断日志.应答
	MessageID_ID_DeviceRegistrationConf           MessageID = 138 //注册请求.应答
	MessageID_ID_GetReportConf                    MessageID = 139 //
	MessageID_ID_GetVariablesConf                 MessageID = 140
	MessageID_ID_RemoteStartTransactionConf       MessageID = 144 //远程启动充电.应答
	MessageID_ID_RemoteStopTransactionConf        MessageID = 145 //远程停止充电.应答
	MessageID_ID_StartTransactionConf             MessageID = 146 //充电开始通知.应答
	MessageID_ID_StopTransactionConf              MessageID = 147 //充电结束通知.应答
	MessageID_ID_AuthorizeConf                    MessageID = 148 //鉴权.应答
	MessageID_ID_ReserveNowConf                   MessageID = 149 //预约充电.应答
	MessageID_ID_CancelReservationConf            MessageID = 150 //取消预约.应答
	MessageID_ID_UpdateIdCardCacheConf            MessageID = 154 //更新用户卡桩端缓存.应答
	//    ID_StatusNotificationConf = 0x9B;             //枪状态.应答
	MessageID_ID_GetTransactionsConf            MessageID = 176 //获取离线订单 .应答
	MessageID_ID_TransactionConf                MessageID = 177 //上报离线订单 .应答
	MessageID_ID_GetWarningConf                 MessageID = 178 //获取告警记录.应答
	MessageID_ID_WarningConf                    MessageID = 179 //上报告警记录.应答
	MessageID_ID_SetTariffConf                  MessageID = 180 //设置计费模版.应答
	MessageID_ID_GetBaseReportConf              MessageID = 181 //获取报告.应答
	MessageID_ID_NotifyReportConf               MessageID = 182 //上报报告.应答
	MessageID_ID_SetVariablesConf               MessageID = 183 //设置变量.应答
	MessageID_ID_GetLogConf                     MessageID = 184 //获取日志.应答
	MessageID_ID_LogStatusNotificationConf      MessageID = 185 //日志上报状态.应答
	MessageID_ID_SendLocalAuthorizationListConf MessageID = 186 //设置本地鉴权列表.应答
	MessageID_ID_DataTransferConf               MessageID = 187 //数据传输.应答
	MessageID_ID_SetChargingProfileConf         MessageID = 188 //
	MessageID_ID_ClearChargingProfileConf       MessageID = 189
	MessageID_ID_GetChargingProfileConf         MessageID = 190
	MessageID_ID_ReportChargingProfileConf      MessageID = 191
	MessageID_ID_MessageError                   MessageID = 255 //错误
)

// Enum value maps for MessageID.
var (
	MessageID_name = map[int32]string{
		0:   "ID_None",
		1:   "ID_BootNotificationReq",
		2:   "ID_HeartbeatReq",
		3:   "ID_ChangeConfigurationReq",
		4:   "ID_GetConfigurationReq",
		5:   "ID_RemoteControlReq",
		6:   "ID_UpdateFirmwareReq",
		7:   "ID_FirmwareStatusNotificationReq",
		8:   "ID_GetDiagnosticsReq",
		9:   "ID_DiagnosticsStatusNotificationReq",
		10:  "ID_DeviceRegistrationReq",
		11:  "ID_GetReportReq",
		12:  "ID_GetVariablesReq",
		16:  "ID_RemoteStartTransactionReq",
		17:  "ID_RemoteStopTransactionReq",
		18:  "ID_StartTransactionReq",
		19:  "ID_StopTransactionReq",
		20:  "ID_AuthorizeReq",
		21:  "ID_ReserveNowReq",
		22:  "ID_CancelReservationReq",
		26:  "ID_UpdateIdCardCacheReq",
		27:  "ID_StatusNotificationReq",
		33:  "ID_TelemetryReq",
		35:  "ID_ChargingInfoReq",
		36:  "ID_TriggerMessageReq",
		48:  "ID_GetTransactionsReq",
		49:  "ID_TransactionReq",
		50:  "ID_GetWarningReq",
		51:  "ID_WarningReq",
		52:  "ID_SetTariffReq",
		53:  "ID_GetBaseReportReq",
		54:  "ID_NotifyReportReq",
		55:  "ID_SetVariablesReq",
		56:  "ID_GetLogReq",
		57:  "ID_LogStatusNotificationReq",
		64:  "ID_SendLocalAuthorizationListReq",
		65:  "ID_DataTransferReq",
		66:  "ID_SetChargingProfileReq",
		67:  "ID_ClearChargingProfileReq",
		68:  "ID_GetChargingProfileReq",
		69:  "ID_ReportChargingProfileReq",
		129: "ID_BootNotificationConf",
		130: "ID_HeartbeatConf",
		131: "ID_ChangeConfigurationConf",
		132: "ID_GetConfigurationConf",
		133: "ID_RemoteControlConf",
		134: "ID_UpdateFirmwareConf",
		135: "ID_FirmwareStatusNotificationConf",
		136: "ID_GetDiagnosticsConf",
		138: "ID_DeviceRegistrationConf",
		139: "ID_GetReportConf",
		140: "ID_GetVariablesConf",
		144: "ID_RemoteStartTransactionConf",
		145: "ID_RemoteStopTransactionConf",
		146: "ID_StartTransactionConf",
		147: "ID_StopTransactionConf",
		148: "ID_AuthorizeConf",
		149: "ID_ReserveNowConf",
		150: "ID_CancelReservationConf",
		154: "ID_UpdateIdCardCacheConf",
		176: "ID_GetTransactionsConf",
		177: "ID_TransactionConf",
		178: "ID_GetWarningConf",
		179: "ID_WarningConf",
		180: "ID_SetTariffConf",
		181: "ID_GetBaseReportConf",
		182: "ID_NotifyReportConf",
		183: "ID_SetVariablesConf",
		184: "ID_GetLogConf",
		185: "ID_LogStatusNotificationConf",
		186: "ID_SendLocalAuthorizationListConf",
		187: "ID_DataTransferConf",
		188: "ID_SetChargingProfileConf",
		189: "ID_ClearChargingProfileConf",
		190: "ID_GetChargingProfileConf",
		191: "ID_ReportChargingProfileConf",
		255: "ID_MessageError",
	}
	MessageID_value = map[string]int32{
		"ID_None":                             0,
		"ID_BootNotificationReq":              1,
		"ID_HeartbeatReq":                     2,
		"ID_ChangeConfigurationReq":           3,
		"ID_GetConfigurationReq":              4,
		"ID_RemoteControlReq":                 5,
		"ID_UpdateFirmwareReq":                6,
		"ID_FirmwareStatusNotificationReq":    7,
		"ID_GetDiagnosticsReq":                8,
		"ID_DiagnosticsStatusNotificationReq": 9,
		"ID_DeviceRegistrationReq":            10,
		"ID_GetReportReq":                     11,
		"ID_GetVariablesReq":                  12,
		"ID_RemoteStartTransactionReq":        16,
		"ID_RemoteStopTransactionReq":         17,
		"ID_StartTransactionReq":              18,
		"ID_StopTransactionReq":               19,
		"ID_AuthorizeReq":                     20,
		"ID_ReserveNowReq":                    21,
		"ID_CancelReservationReq":             22,
		"ID_UpdateIdCardCacheReq":             26,
		"ID_StatusNotificationReq":            27,
		"ID_TelemetryReq":                     33,
		"ID_ChargingInfoReq":                  35,
		"ID_TriggerMessageReq":                36,
		"ID_GetTransactionsReq":               48,
		"ID_TransactionReq":                   49,
		"ID_GetWarningReq":                    50,
		"ID_WarningReq":                       51,
		"ID_SetTariffReq":                     52,
		"ID_GetBaseReportReq":                 53,
		"ID_NotifyReportReq":                  54,
		"ID_SetVariablesReq":                  55,
		"ID_GetLogReq":                        56,
		"ID_LogStatusNotificationReq":         57,
		"ID_SendLocalAuthorizationListReq":    64,
		"ID_DataTransferReq":                  65,
		"ID_SetChargingProfileReq":            66,
		"ID_ClearChargingProfileReq":          67,
		"ID_GetChargingProfileReq":            68,
		"ID_ReportChargingProfileReq":         69,
		"ID_BootNotificationConf":             129,
		"ID_HeartbeatConf":                    130,
		"ID_ChangeConfigurationConf":          131,
		"ID_GetConfigurationConf":             132,
		"ID_RemoteControlConf":                133,
		"ID_UpdateFirmwareConf":               134,
		"ID_FirmwareStatusNotificationConf":   135,
		"ID_GetDiagnosticsConf":               136,
		"ID_DeviceRegistrationConf":           138,
		"ID_GetReportConf":                    139,
		"ID_GetVariablesConf":                 140,
		"ID_RemoteStartTransactionConf":       144,
		"ID_RemoteStopTransactionConf":        145,
		"ID_StartTransactionConf":             146,
		"ID_StopTransactionConf":              147,
		"ID_AuthorizeConf":                    148,
		"ID_ReserveNowConf":                   149,
		"ID_CancelReservationConf":            150,
		"ID_UpdateIdCardCacheConf":            154,
		"ID_GetTransactionsConf":              176,
		"ID_TransactionConf":                  177,
		"ID_GetWarningConf":                   178,
		"ID_WarningConf":                      179,
		"ID_SetTariffConf":                    180,
		"ID_GetBaseReportConf":                181,
		"ID_NotifyReportConf":                 182,
		"ID_SetVariablesConf":                 183,
		"ID_GetLogConf":                       184,
		"ID_LogStatusNotificationConf":        185,
		"ID_SendLocalAuthorizationListConf":   186,
		"ID_DataTransferConf":                 187,
		"ID_SetChargingProfileConf":           188,
		"ID_ClearChargingProfileConf":         189,
		"ID_GetChargingProfileConf":           190,
		"ID_ReportChargingProfileConf":        191,
		"ID_MessageError":                     255,
	}
)

func (x MessageID) Enum() *MessageID {
	p := new(MessageID)
	*p = x
	return p
}

func (x MessageID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageID) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[0].Descriptor()
}

func (MessageID) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[0]
}

func (x MessageID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageID.Descriptor instead.
func (MessageID) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{0}
}

//*
//ErrorCode
//定义错误消息错误代码
type ErrorCode int32

const (
	ErrorCode_EC_GenericError  ErrorCode = 0 //其它错误
	ErrorCode_EC_NotSupported  ErrorCode = 1 //不支持该请求
	ErrorCode_EC_InternalError ErrorCode = 2 //处理请求时，发生内部错误
	ErrorCode_EC_ProtocolError ErrorCode = 3 //解析消息payload错误
	ErrorCode_EC_TypeViolation ErrorCode = 4 //解析消息成功，但有域数据类型不对
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "EC_GenericError",
		1: "EC_NotSupported",
		2: "EC_InternalError",
		3: "EC_ProtocolError",
		4: "EC_TypeViolation",
	}
	ErrorCode_value = map[string]int32{
		"EC_GenericError":  0,
		"EC_NotSupported":  1,
		"EC_InternalError": 2,
		"EC_ProtocolError": 3,
		"EC_TypeViolation": 4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{1}
}

//*
//ConfigurationStatus
//“远程设置参数应答”，设置状态定义
type ConfigurationStatus int32

const (
	ConfigurationStatus_CFS_Accepted       ConfigurationStatus = 0 //参数支持，已设置
	ConfigurationStatus_CFS_Rejected       ConfigurationStatus = 1 //参数支持，但设置失败
	ConfigurationStatus_CFS_RebootRequired ConfigurationStatus = 2 //参数支持，已设置，但需要重启生效
	ConfigurationStatus_CFS_NotSupported   ConfigurationStatus = 3 //参数不支持
)

// Enum value maps for ConfigurationStatus.
var (
	ConfigurationStatus_name = map[int32]string{
		0: "CFS_Accepted",
		1: "CFS_Rejected",
		2: "CFS_RebootRequired",
		3: "CFS_NotSupported",
	}
	ConfigurationStatus_value = map[string]int32{
		"CFS_Accepted":       0,
		"CFS_Rejected":       1,
		"CFS_RebootRequired": 2,
		"CFS_NotSupported":   3,
	}
)

func (x ConfigurationStatus) Enum() *ConfigurationStatus {
	p := new(ConfigurationStatus)
	*p = x
	return p
}

func (x ConfigurationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[2].Descriptor()
}

func (ConfigurationStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[2]
}

func (x ConfigurationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationStatus.Descriptor instead.
func (ConfigurationStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{2}
}

//*
//DiagnosticsStatus
//日志上传状态通知请求，日志上传进度状态
type DiagnosticsStatus int32

const (
	DiagnosticsStatus_DGS_Idle         DiagnosticsStatus = 0 //未进行日志上传任务状态
	DiagnosticsStatus_DGS_Accepted     DiagnosticsStatus = 1 //上传日志指令已接受
	DiagnosticsStatus_DGS_Uploading    DiagnosticsStatus = 2 //正在上传日志
	DiagnosticsStatus_DGS_Uploaded     DiagnosticsStatus = 3 //日志上传成功
	DiagnosticsStatus_DGS_UploadFailed DiagnosticsStatus = 4 //日志上传失败
)

// Enum value maps for DiagnosticsStatus.
var (
	DiagnosticsStatus_name = map[int32]string{
		0: "DGS_Idle",
		1: "DGS_Accepted",
		2: "DGS_Uploading",
		3: "DGS_Uploaded",
		4: "DGS_UploadFailed",
	}
	DiagnosticsStatus_value = map[string]int32{
		"DGS_Idle":         0,
		"DGS_Accepted":     1,
		"DGS_Uploading":    2,
		"DGS_Uploaded":     3,
		"DGS_UploadFailed": 4,
	}
)

func (x DiagnosticsStatus) Enum() *DiagnosticsStatus {
	p := new(DiagnosticsStatus)
	*p = x
	return p
}

func (x DiagnosticsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[3].Descriptor()
}

func (DiagnosticsStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[3]
}

func (x DiagnosticsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticsStatus.Descriptor instead.
func (DiagnosticsStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{3}
}

//*
//FirmwareStatus
//固件升级状态通知请求，固件升级进度状态
type FirmwareStatus int32

const (
	FirmwareStatus_FW_Idle              FirmwareStatus = 0  //未激活
	FirmwareStatus_FW_Pending           FirmwareStatus = 1  //准备中
	FirmwareStatus_FW_DownloadScheduled FirmwareStatus = 2  //固件下载计划中
	FirmwareStatus_FW_Downloading       FirmwareStatus = 3  //固件下载中
	FirmwareStatus_FW_DownloadPaused    FirmwareStatus = 9  //固件暂停下载
	FirmwareStatus_FW_Downloaded        FirmwareStatus = 10 //固件已下载
	FirmwareStatus_FW_SignatureVerified FirmwareStatus = 11 //固件通过签名验证
	FirmwareStatus_FW_InstallScheduled  FirmwareStatus = 20 //固件安装计划中
	FirmwareStatus_FW_Installing        FirmwareStatus = 22 //固件安装中
	FirmwareStatus_FW_Installed         FirmwareStatus = 25 //固件安装成功
	FirmwareStatus_FW_InstallRebooting  FirmwareStatus = 29 //固件重启中
	//失败的情况
	FirmwareStatus_FW_InstallationFailed        FirmwareStatus = 9901 //固件安装失败
	FirmwareStatus_FW_InstallVerificationFailed FirmwareStatus = 9902 //固件验证失败
	FirmwareStatus_FW_InvalidSignature          FirmwareStatus = 9903 //固件验证签名失败
	FirmwareStatus_FW_DownloadFailed            FirmwareStatus = 9904 //固件下载失败
)

// Enum value maps for FirmwareStatus.
var (
	FirmwareStatus_name = map[int32]string{
		0:    "FW_Idle",
		1:    "FW_Pending",
		2:    "FW_DownloadScheduled",
		3:    "FW_Downloading",
		9:    "FW_DownloadPaused",
		10:   "FW_Downloaded",
		11:   "FW_SignatureVerified",
		20:   "FW_InstallScheduled",
		22:   "FW_Installing",
		25:   "FW_Installed",
		29:   "FW_InstallRebooting",
		9901: "FW_InstallationFailed",
		9902: "FW_InstallVerificationFailed",
		9903: "FW_InvalidSignature",
		9904: "FW_DownloadFailed",
	}
	FirmwareStatus_value = map[string]int32{
		"FW_Idle":                      0,
		"FW_Pending":                   1,
		"FW_DownloadScheduled":         2,
		"FW_Downloading":               3,
		"FW_DownloadPaused":            9,
		"FW_Downloaded":                10,
		"FW_SignatureVerified":         11,
		"FW_InstallScheduled":          20,
		"FW_Installing":                22,
		"FW_Installed":                 25,
		"FW_InstallRebooting":          29,
		"FW_InstallationFailed":        9901,
		"FW_InstallVerificationFailed": 9902,
		"FW_InvalidSignature":          9903,
		"FW_DownloadFailed":            9904,
	}
)

func (x FirmwareStatus) Enum() *FirmwareStatus {
	p := new(FirmwareStatus)
	*p = x
	return p
}

func (x FirmwareStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirmwareStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[4].Descriptor()
}

func (FirmwareStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[4]
}

func (x FirmwareStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirmwareStatus.Descriptor instead.
func (FirmwareStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{4}
}

//*
//身份类型
type IdType int32

const (
	IdType_ID_DEFAULT     IdType = 0  //默认
	IdType_ID_AUTH_CARD   IdType = 10 //充电卡用户
	IdType_ID_WALLET_CARD IdType = 11 //离线钱包卡
)

// Enum value maps for IdType.
var (
	IdType_name = map[int32]string{
		0:  "ID_DEFAULT",
		10: "ID_AUTH_CARD",
		11: "ID_WALLET_CARD",
	}
	IdType_value = map[string]int32{
		"ID_DEFAULT":     0,
		"ID_AUTH_CARD":   10,
		"ID_WALLET_CARD": 11,
	}
)

func (x IdType) Enum() *IdType {
	p := new(IdType)
	*p = x
	return p
}

func (x IdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[5].Descriptor()
}

func (IdType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[5]
}

func (x IdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdType.Descriptor instead.
func (IdType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{5}
}

//*
//鉴权卡细分卡类型定义
type CardType int32

const (
	CardType_CARD_DEFAULT CardType = 0 //默认，未指定类型
	CardType_CARD_BALANCE CardType = 1 //余额卡
	CardType_CARD_TIME    CardType = 2 //时效卡（月卡／年卡）
	CardType_CARD_COUNT   CardType = 3 //次数卡
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "CARD_DEFAULT",
		1: "CARD_BALANCE",
		2: "CARD_TIME",
		3: "CARD_COUNT",
	}
	CardType_value = map[string]int32{
		"CARD_DEFAULT": 0,
		"CARD_BALANCE": 1,
		"CARD_TIME":    2,
		"CARD_COUNT":   3,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[6].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[6]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{6}
}

//*
//“鉴权应答”消息鉴权结果
type AuthorizationStatus int32

const (
	AuthorizationStatus_AS_Accepted           AuthorizationStatus = 0  //鉴权通过，允许用户充电
	AuthorizationStatus_AS_Blocked            AuthorizationStatus = 1  //鉴权被挡住，不允许充电
	AuthorizationStatus_AS_Expired            AuthorizationStatus = 2  //账户过期，不允许充电
	AuthorizationStatus_AS_Invalid            AuthorizationStatus = 3  //账户无法识别，无效，不允许充电
	AuthorizationStatus_AS_ConcurrentTx       AuthorizationStatus = 4  //账户有未结算的订单，不能同时开启多个订单，不允许充电
	AuthorizationStatus_AS_Insufficient       AuthorizationStatus = 5  //账户余额不足，不允许充电
	AuthorizationStatus_AS_PasswordError      AuthorizationStatus = 6  //用户密码错误
	AuthorizationStatus_AS_SystemError        AuthorizationStatus = 7  //系统错误
	AuthorizationStatus_AS_NoCredit           AuthorizationStatus = 8  // 信用额度不足
	AuthorizationStatus_AS_NotAllowedTypeEVSE AuthorizationStatus = 9  // 不可在此设备充电，Identifier is valid, but not allowed to charge at this type of EVSE.
	AuthorizationStatus_AS_NotAtThisLocation  AuthorizationStatus = 10 // 不可在此站充电
	AuthorizationStatus_AS_NotAtThisTime      AuthorizationStatus = 11 // 不可在此时充电
	AuthorizationStatus_AS_Unknown            AuthorizationStatus = 99 // 未知
)

// Enum value maps for AuthorizationStatus.
var (
	AuthorizationStatus_name = map[int32]string{
		0:  "AS_Accepted",
		1:  "AS_Blocked",
		2:  "AS_Expired",
		3:  "AS_Invalid",
		4:  "AS_ConcurrentTx",
		5:  "AS_Insufficient",
		6:  "AS_PasswordError",
		7:  "AS_SystemError",
		8:  "AS_NoCredit",
		9:  "AS_NotAllowedTypeEVSE",
		10: "AS_NotAtThisLocation",
		11: "AS_NotAtThisTime",
		99: "AS_Unknown",
	}
	AuthorizationStatus_value = map[string]int32{
		"AS_Accepted":           0,
		"AS_Blocked":            1,
		"AS_Expired":            2,
		"AS_Invalid":            3,
		"AS_ConcurrentTx":       4,
		"AS_Insufficient":       5,
		"AS_PasswordError":      6,
		"AS_SystemError":        7,
		"AS_NoCredit":           8,
		"AS_NotAllowedTypeEVSE": 9,
		"AS_NotAtThisLocation":  10,
		"AS_NotAtThisTime":      11,
		"AS_Unknown":            99,
	}
)

func (x AuthorizationStatus) Enum() *AuthorizationStatus {
	p := new(AuthorizationStatus)
	*p = x
	return p
}

func (x AuthorizationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[7].Descriptor()
}

func (AuthorizationStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[7]
}

func (x AuthorizationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationStatus.Descriptor instead.
func (AuthorizationStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{7}
}

//*
//授权启动充电方式
type AuthorizationMode int32

const (
	AuthorizationMode_AM_LocalPlug          AuthorizationMode = 0  //本地即插即充启动
	AuthorizationMode_AM_LocalAdmin         AuthorizationMode = 1  //本地管理员启动
	AuthorizationMode_AM_LocalIdentityCard  AuthorizationMode = 2  //鉴权卡刷卡本地鉴权启动
	AuthorizationMode_AM_OnlineIdentityCard AuthorizationMode = 3  //鉴权卡刷卡在线鉴权启动
	AuthorizationMode_AM_LocalWalletCard    AuthorizationMode = 4  //本地钱包卡刷卡启动
	AuthorizationMode_AM_LocalVIN           AuthorizationMode = 5  //车辆VIN本地鉴权启动
	AuthorizationMode_AM_OnlineVIN          AuthorizationMode = 6  //车辆VIN在线鉴权启动
	AuthorizationMode_AM_Bluetooth          AuthorizationMode = 7  //本地通过蓝牙启动
	AuthorizationMode_AM_MAC                AuthorizationMode = 8  //本地通过输入校验码启动
	AuthorizationMode_AM_RemoteAdmin        AuthorizationMode = 9  //远程管理员启动
	AuthorizationMode_AM_RemoteUser         AuthorizationMode = 10 //远程用户启动
)

// Enum value maps for AuthorizationMode.
var (
	AuthorizationMode_name = map[int32]string{
		0:  "AM_LocalPlug",
		1:  "AM_LocalAdmin",
		2:  "AM_LocalIdentityCard",
		3:  "AM_OnlineIdentityCard",
		4:  "AM_LocalWalletCard",
		5:  "AM_LocalVIN",
		6:  "AM_OnlineVIN",
		7:  "AM_Bluetooth",
		8:  "AM_MAC",
		9:  "AM_RemoteAdmin",
		10: "AM_RemoteUser",
	}
	AuthorizationMode_value = map[string]int32{
		"AM_LocalPlug":          0,
		"AM_LocalAdmin":         1,
		"AM_LocalIdentityCard":  2,
		"AM_OnlineIdentityCard": 3,
		"AM_LocalWalletCard":    4,
		"AM_LocalVIN":           5,
		"AM_OnlineVIN":          6,
		"AM_Bluetooth":          7,
		"AM_MAC":                8,
		"AM_RemoteAdmin":        9,
		"AM_RemoteUser":         10,
	}
)

func (x AuthorizationMode) Enum() *AuthorizationMode {
	p := new(AuthorizationMode)
	*p = x
	return p
}

func (x AuthorizationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[8].Descriptor()
}

func (AuthorizationMode) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[8]
}

func (x AuthorizationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationMode.Descriptor instead.
func (AuthorizationMode) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{8}
}

//*
//ServiceMode
//充电桩服务模式
type ServiceMode int32

const (
	ServiceMode_SM_AutoCharge      ServiceMode = 0 //自动充满模式
	ServiceMode_SM_ChargeByElec    ServiceMode = 1 //预设电量充电模式
	ServiceMode_SM_ChargeByTime    ServiceMode = 2 //预设时间充电模式
	ServiceMode_SM_ChargeByMoney   ServiceMode = 3 //预设金额充电模式
	ServiceMode_SM_DischargeByElec ServiceMode = 4 //按电量放电
	ServiceMode_SM_AutoDischarge   ServiceMode = 5 //自动放电
)

// Enum value maps for ServiceMode.
var (
	ServiceMode_name = map[int32]string{
		0: "SM_AutoCharge",
		1: "SM_ChargeByElec",
		2: "SM_ChargeByTime",
		3: "SM_ChargeByMoney",
		4: "SM_DischargeByElec",
		5: "SM_AutoDischarge",
	}
	ServiceMode_value = map[string]int32{
		"SM_AutoCharge":      0,
		"SM_ChargeByElec":    1,
		"SM_ChargeByTime":    2,
		"SM_ChargeByMoney":   3,
		"SM_DischargeByElec": 4,
		"SM_AutoDischarge":   5,
	}
)

func (x ServiceMode) Enum() *ServiceMode {
	p := new(ServiceMode)
	*p = x
	return p
}

func (x ServiceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[9].Descriptor()
}

func (ServiceMode) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[9]
}

func (x ServiceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceMode.Descriptor instead.
func (ServiceMode) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{9}
}

//*
//StopReason
//“充电结束通知”请求消息充电停止原因定义
type StopReason int32

const (
	StopReason_SR_Normal         StopReason = 0  // 按照服务类型（按电量充电，按时长充电，按金额充电,
	StopReason_SR_LocalCard      StopReason = 1  // 用户本地刷卡停止充电
	StopReason_SR_LocalPIN       StopReason = 2  // 用户本地输入校验码停止充电
	StopReason_SR_RemoteUser     StopReason = 3  // 用户远程结束
	StopReason_SR_RemoteAdmin    StopReason = 4  // 管理员远程结束
	StopReason_SR_EmergencyStop  StopReason = 5  // 急停按下，停止充电
	StopReason_SR_EVDisconnected StopReason = 6  // 检测到枪头断开，停止充电
	StopReason_SR_Reboot         StopReason = 7  // 系统重启停止充电
	StopReason_SR_OffLine        StopReason = 8  // 充电桩断线，停止充电（对于不允许离线充电的充电桩）
	StopReason_SR_PowerLoss      StopReason = 9  // 充电桩掉电，停止充电
	StopReason_SR_SystemFault    StopReason = 10 // 充电桩故障，停止充电
	StopReason_SR_BMSFault       StopReason = 11 // 电动车故障，停止充电
	StopReason_SR_Other          StopReason = 12 // 其它原因，停止充电
	StopReason_SR_MeterFault     StopReason = 13 // 电表故障
	StopReason_SR_SocFull        StopReason = 16 // soc充满停止
	StopReason_SR_NotEnoughMoney StopReason = 17 // 余额不足
	StopReason_SR_OverLoad       StopReason = 18 // 过载停止
	StopReason_SR_OverVoltage    StopReason = 19 // 过压停止
	StopReason_SR_UnderVoltage   StopReason = 20 // 欠压停止
	StopReason_SR_NetTimeout     StopReason = 21 // 网络同步超时停止充电
	StopReason_SR_OverTime       StopReason = 22 // 超过设置时间
	StopReason_SR_OverMeter      StopReason = 23 // 超过设置电量
	StopReason_SR_OverSOC        StopReason = 24 // 超过设置SOC
	StopReason_SR_CPError        StopReason = 25 // CP错误
	StopReason_SR_Leakage        StopReason = 26 // 漏电故障
	// 100以内的停止理由留给我们自己的固件扩展
	StopReason_SR_FullOfSelfStop   StopReason = 101 // 充满自停(原22)
	StopReason_SR_AdminForceStop   StopReason = 102 // 管理员强制结束(原23)
	StopReason_SR_EVOccupy         StopReason = 103 // 接口已被占用(原24)
	StopReason_SR_NoTariff         StopReason = 104 // 没有计费模版(原25)
	StopReason_SR_ConnectorFault   StopReason = 105 // 充电枪故障(原26)
	StopReason_SR_CC1NoConnect     StopReason = 106 // 充电枪未连接(充电中车辆控制引导异常/CC1连接异常)(原27)
	StopReason_SR_Deauthorized     StopReason = 107 // 取消授权
	StopReason_SR_EVConnectTimeout StopReason = 108 // 连接超时
	StopReason_SR_Server_Error     StopReason = 999 // 平台错误
)

// Enum value maps for StopReason.
var (
	StopReason_name = map[int32]string{
		0:   "SR_Normal",
		1:   "SR_LocalCard",
		2:   "SR_LocalPIN",
		3:   "SR_RemoteUser",
		4:   "SR_RemoteAdmin",
		5:   "SR_EmergencyStop",
		6:   "SR_EVDisconnected",
		7:   "SR_Reboot",
		8:   "SR_OffLine",
		9:   "SR_PowerLoss",
		10:  "SR_SystemFault",
		11:  "SR_BMSFault",
		12:  "SR_Other",
		13:  "SR_MeterFault",
		16:  "SR_SocFull",
		17:  "SR_NotEnoughMoney",
		18:  "SR_OverLoad",
		19:  "SR_OverVoltage",
		20:  "SR_UnderVoltage",
		21:  "SR_NetTimeout",
		22:  "SR_OverTime",
		23:  "SR_OverMeter",
		24:  "SR_OverSOC",
		25:  "SR_CPError",
		26:  "SR_Leakage",
		101: "SR_FullOfSelfStop",
		102: "SR_AdminForceStop",
		103: "SR_EVOccupy",
		104: "SR_NoTariff",
		105: "SR_ConnectorFault",
		106: "SR_CC1NoConnect",
		107: "SR_Deauthorized",
		108: "SR_EVConnectTimeout",
		999: "SR_Server_Error",
	}
	StopReason_value = map[string]int32{
		"SR_Normal":           0,
		"SR_LocalCard":        1,
		"SR_LocalPIN":         2,
		"SR_RemoteUser":       3,
		"SR_RemoteAdmin":      4,
		"SR_EmergencyStop":    5,
		"SR_EVDisconnected":   6,
		"SR_Reboot":           7,
		"SR_OffLine":          8,
		"SR_PowerLoss":        9,
		"SR_SystemFault":      10,
		"SR_BMSFault":         11,
		"SR_Other":            12,
		"SR_MeterFault":       13,
		"SR_SocFull":          16,
		"SR_NotEnoughMoney":   17,
		"SR_OverLoad":         18,
		"SR_OverVoltage":      19,
		"SR_UnderVoltage":     20,
		"SR_NetTimeout":       21,
		"SR_OverTime":         22,
		"SR_OverMeter":        23,
		"SR_OverSOC":          24,
		"SR_CPError":          25,
		"SR_Leakage":          26,
		"SR_FullOfSelfStop":   101,
		"SR_AdminForceStop":   102,
		"SR_EVOccupy":         103,
		"SR_NoTariff":         104,
		"SR_ConnectorFault":   105,
		"SR_CC1NoConnect":     106,
		"SR_Deauthorized":     107,
		"SR_EVConnectTimeout": 108,
		"SR_Server_Error":     999,
	}
)

func (x StopReason) Enum() *StopReason {
	p := new(StopReason)
	*p = x
	return p
}

func (x StopReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopReason) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[10].Descriptor()
}

func (StopReason) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[10]
}

func (x StopReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopReason.Descriptor instead.
func (StopReason) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{10}
}

//*
//电池类型定义，枚举类型
type BatteryType int32

const (
	BatteryType_BAT_Unkown   BatteryType = 0
	BatteryType_BAT_LeadAcid BatteryType = 1 //铅酸电池
	BatteryType_BAT_NiMH     BatteryType = 2 //镍氢电池
	BatteryType_BAT_LFP      BatteryType = 3 //磷酸铁锂电池
	BatteryType_BAT_LMO      BatteryType = 4 //锰酸锂电池
	BatteryType_BAT_LCO      BatteryType = 5 //钴酸锂电池
	BatteryType_BAT_NCM      BatteryType = 6 //三元材料电池
	BatteryType_BAT_LIB      BatteryType = 7 //聚合物锂离子电池
	BatteryType_BAT_LTO      BatteryType = 8 //钛酸锂电池
	BatteryType_BAT_Other    BatteryType = 9 //其它电池
)

// Enum value maps for BatteryType.
var (
	BatteryType_name = map[int32]string{
		0: "BAT_Unkown",
		1: "BAT_LeadAcid",
		2: "BAT_NiMH",
		3: "BAT_LFP",
		4: "BAT_LMO",
		5: "BAT_LCO",
		6: "BAT_NCM",
		7: "BAT_LIB",
		8: "BAT_LTO",
		9: "BAT_Other",
	}
	BatteryType_value = map[string]int32{
		"BAT_Unkown":   0,
		"BAT_LeadAcid": 1,
		"BAT_NiMH":     2,
		"BAT_LFP":      3,
		"BAT_LMO":      4,
		"BAT_LCO":      5,
		"BAT_NCM":      6,
		"BAT_LIB":      7,
		"BAT_LTO":      8,
		"BAT_Other":    9,
	}
)

func (x BatteryType) Enum() *BatteryType {
	p := new(BatteryType)
	*p = x
	return p
}

func (x BatteryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[11].Descriptor()
}

func (BatteryType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[11]
}

func (x BatteryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryType.Descriptor instead.
func (BatteryType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{11}
}

//*
//BMSChargingType
//BMS充电模式
type BMSChargingType int32

const (
	BMSChargingType_BMS_None            BMSChargingType = 0 //
	BMSChargingType_BMS_ConstantVoltage BMSChargingType = 1 //恒压充电
	BMSChargingType_BMS_ConstantCurrent BMSChargingType = 2 //恒流充电
)

// Enum value maps for BMSChargingType.
var (
	BMSChargingType_name = map[int32]string{
		0: "BMS_None",
		1: "BMS_ConstantVoltage",
		2: "BMS_ConstantCurrent",
	}
	BMSChargingType_value = map[string]int32{
		"BMS_None":            0,
		"BMS_ConstantVoltage": 1,
		"BMS_ConstantCurrent": 2,
	}
)

func (x BMSChargingType) Enum() *BMSChargingType {
	p := new(BMSChargingType)
	*p = x
	return p
}

func (x BMSChargingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMSChargingType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[12].Descriptor()
}

func (BMSChargingType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[12]
}

func (x BMSChargingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMSChargingType.Descriptor instead.
func (BMSChargingType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{12}
}

//*
//BMS测量值状态
type BMSMeasureStatus int32

const (
	BMSMeasureStatus_BMSM_Normal     BMSMeasureStatus = 0 //测量值正常
	BMSMeasureStatus_BMSM_OverLevel  BMSMeasureStatus = 1 //过高
	BMSMeasureStatus_BMSM_UnderLevel BMSMeasureStatus = 2 //过低或者不可信
)

// Enum value maps for BMSMeasureStatus.
var (
	BMSMeasureStatus_name = map[int32]string{
		0: "BMSM_Normal",
		1: "BMSM_OverLevel",
		2: "BMSM_UnderLevel",
	}
	BMSMeasureStatus_value = map[string]int32{
		"BMSM_Normal":     0,
		"BMSM_OverLevel":  1,
		"BMSM_UnderLevel": 2,
	}
)

func (x BMSMeasureStatus) Enum() *BMSMeasureStatus {
	p := new(BMSMeasureStatus)
	*p = x
	return p
}

func (x BMSMeasureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMSMeasureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[13].Descriptor()
}

func (BMSMeasureStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[13]
}

func (x BMSMeasureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMSMeasureStatus.Descriptor instead.
func (BMSMeasureStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{13}
}

//*
//BMSTelesignallingStatus
//动力蓄电池绝缘状态
type BMSTelesignalStatus int32

const (
	BMSTelesignalStatus_BMST_Normal   BMSTelesignalStatus = 0 //正常
	BMSTelesignalStatus_BMST_Abnormal BMSTelesignalStatus = 1 //异常
	BMSTelesignalStatus_BMST_Unknown  BMSTelesignalStatus = 2 //不可信
)

// Enum value maps for BMSTelesignalStatus.
var (
	BMSTelesignalStatus_name = map[int32]string{
		0: "BMST_Normal",
		1: "BMST_Abnormal",
		2: "BMST_Unknown",
	}
	BMSTelesignalStatus_value = map[string]int32{
		"BMST_Normal":   0,
		"BMST_Abnormal": 1,
		"BMST_Unknown":  2,
	}
)

func (x BMSTelesignalStatus) Enum() *BMSTelesignalStatus {
	p := new(BMSTelesignalStatus)
	*p = x
	return p
}

func (x BMSTelesignalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMSTelesignalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[14].Descriptor()
}

func (BMSTelesignalStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[14]
}

func (x BMSTelesignalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMSTelesignalStatus.Descriptor instead.
func (BMSTelesignalStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{14}
}

//*
//ChargerStatus
//充电接口工作状态定义
type ChargerStatus int32

const (
	ChargerStatus_CHS_Idle          ChargerStatus = 0 //已连接，未开启充电会话
	ChargerStatus_CHS_EVConnected   ChargerStatus = 1
	ChargerStatus_CHS_Charging      ChargerStatus = 2 //充电中
	ChargerStatus_CHS_SuspendedEV   ChargerStatus = 3 //充电已开启，电动汽车还未充电
	ChargerStatus_CHS_SuspendedEVSE ChargerStatus = 4 //充电已开启，但充电桩还未输出
)

// Enum value maps for ChargerStatus.
var (
	ChargerStatus_name = map[int32]string{
		0: "CHS_Idle",
		1: "CHS_EVConnected",
		2: "CHS_Charging",
		3: "CHS_SuspendedEV",
		4: "CHS_SuspendedEVSE",
	}
	ChargerStatus_value = map[string]int32{
		"CHS_Idle":          0,
		"CHS_EVConnected":   1,
		"CHS_Charging":      2,
		"CHS_SuspendedEV":   3,
		"CHS_SuspendedEVSE": 4,
	}
)

func (x ChargerStatus) Enum() *ChargerStatus {
	p := new(ChargerStatus)
	*p = x
	return p
}

func (x ChargerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[15].Descriptor()
}

func (ChargerStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[15]
}

func (x ChargerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargerStatus.Descriptor instead.
func (ChargerStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{15}
}

//*
//Components
//告警和遥测信息，设备组件定义
type Components int32

const (
	Components_CP_None       Components = 0  //未分类
	Components_CP_System     Components = 1  //系统
	Components_CP_TCU        Components = 2  //计费控制单元
	Components_CP_CCM        Components = 3  //充电控制单元
	Components_CP_BMS        Components = 4  //电动汽车BMS
	Components_CP_PKL        Components = 5  //智能车位锁
	Components_CP_PKD        Components = 6  //智能车位探测
	Components_CP_Meter      Components = 7  //电表
	Components_CP_LCD        Components = 8  //显示屏
	Components_CP_CardReader Components = 9  //读卡器
	Components_CP_Fan        Components = 10 //系统风扇
	Components_CP_Connector  Components = 11 //充电接口
	Components_CP_PSM        Components = 12 //电源模块
)

// Enum value maps for Components.
var (
	Components_name = map[int32]string{
		0:  "CP_None",
		1:  "CP_System",
		2:  "CP_TCU",
		3:  "CP_CCM",
		4:  "CP_BMS",
		5:  "CP_PKL",
		6:  "CP_PKD",
		7:  "CP_Meter",
		8:  "CP_LCD",
		9:  "CP_CardReader",
		10: "CP_Fan",
		11: "CP_Connector",
		12: "CP_PSM",
	}
	Components_value = map[string]int32{
		"CP_None":       0,
		"CP_System":     1,
		"CP_TCU":        2,
		"CP_CCM":        3,
		"CP_BMS":        4,
		"CP_PKL":        5,
		"CP_PKD":        6,
		"CP_Meter":      7,
		"CP_LCD":        8,
		"CP_CardReader": 9,
		"CP_Fan":        10,
		"CP_Connector":  11,
		"CP_PSM":        12,
	}
)

func (x Components) Enum() *Components {
	p := new(Components)
	*p = x
	return p
}

func (x Components) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Components) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[16].Descriptor()
}

func (Components) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[16]
}

func (x Components) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Components.Descriptor instead.
func (Components) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{16}
}

//*
//WarningLevel
//Warning类告警等级定义
type WarningLevel int32

const (
	WarningLevel_WL_Critical WarningLevel = 0   //系统严重故障，系统不能工作了
	WarningLevel_WL_Alert    WarningLevel = 1   //故障，需要立即中止本次充电，不影响下次充电
	WarningLevel_WL_Warning  WarningLevel = 2   //系统警告，不影响充电
	WarningLevel_WL_Notice   WarningLevel = 3   //事件通知
	WarningLevel_WL_Info     WarningLevel = 4   //信息
	WarningLevel_WL_Hardware WarningLevel = 100 //硬件故障
	WarningLevel_WL_SYSTEM   WarningLevel = 101 //系统故障
)

// Enum value maps for WarningLevel.
var (
	WarningLevel_name = map[int32]string{
		0:   "WL_Critical",
		1:   "WL_Alert",
		2:   "WL_Warning",
		3:   "WL_Notice",
		4:   "WL_Info",
		100: "WL_Hardware",
		101: "WL_SYSTEM",
	}
	WarningLevel_value = map[string]int32{
		"WL_Critical": 0,
		"WL_Alert":    1,
		"WL_Warning":  2,
		"WL_Notice":   3,
		"WL_Info":     4,
		"WL_Hardware": 100,
		"WL_SYSTEM":   101,
	}
)

func (x WarningLevel) Enum() *WarningLevel {
	p := new(WarningLevel)
	*p = x
	return p
}

func (x WarningLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WarningLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[17].Descriptor()
}

func (WarningLevel) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[17]
}

func (x WarningLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WarningLevel.Descriptor instead.
func (WarningLevel) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{17}
}

type IdTokenEnumType int32

const (
	IdTokenEnumType_ITE_Central         IdTokenEnumType = 0 // A centrally, in the CSMS (or other server) generated id (for example used for a remotely started transaction that is activated by SMS). No format defined, might be a UUID.
	IdTokenEnumType_ITE_eMAID           IdTokenEnumType = 1 // Electro-mobility account id as defined in ISO 15118
	IdTokenEnumType_ITE_ISO14443        IdTokenEnumType = 2 // ISO 14443 UID of RFID card. It is represented as an array of 4 or 7 bytes in hexadecimal representation.
	IdTokenEnumType_ITE_ISO15693        IdTokenEnumType = 3 // ISO 15693 UID of RFID card. It is represented as an array of 8 bytes in hexadecimal representation.
	IdTokenEnumType_ITE_KeyCode         IdTokenEnumType = 4 // User use a private key-code to authorize a charging transaction. For example: Pin-code.
	IdTokenEnumType_ITE_Local           IdTokenEnumType = 5 // A locally generated id (e.g. internal id created by the Charging Station). No format defined, might be a UUID
	IdTokenEnumType_ITE_MacAddress      IdTokenEnumType = 6
	IdTokenEnumType_ITE_NoAuthorization IdTokenEnumType = 7 // Transaction is started and no authorization possible. Charging Station only has a start button or mechanical key etc. IdToken field SHALL be left empty.
)

// Enum value maps for IdTokenEnumType.
var (
	IdTokenEnumType_name = map[int32]string{
		0: "ITE_Central",
		1: "ITE_eMAID",
		2: "ITE_ISO14443",
		3: "ITE_ISO15693",
		4: "ITE_KeyCode",
		5: "ITE_Local",
		6: "ITE_MacAddress",
		7: "ITE_NoAuthorization",
	}
	IdTokenEnumType_value = map[string]int32{
		"ITE_Central":         0,
		"ITE_eMAID":           1,
		"ITE_ISO14443":        2,
		"ITE_ISO15693":        3,
		"ITE_KeyCode":         4,
		"ITE_Local":           5,
		"ITE_MacAddress":      6,
		"ITE_NoAuthorization": 7,
	}
)

func (x IdTokenEnumType) Enum() *IdTokenEnumType {
	p := new(IdTokenEnumType)
	*p = x
	return p
}

func (x IdTokenEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdTokenEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[18].Descriptor()
}

func (IdTokenEnumType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[18]
}

func (x IdTokenEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdTokenEnumType.Descriptor instead.
func (IdTokenEnumType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{18}
}

type ChargingRateUnit int32

const (
	ChargingRateUnit_W  ChargingRateUnit = 0
	ChargingRateUnit_A  ChargingRateUnit = 1
	ChargingRateUnit_KW ChargingRateUnit = 2
)

// Enum value maps for ChargingRateUnit.
var (
	ChargingRateUnit_name = map[int32]string{
		0: "W",
		1: "A",
		2: "KW",
	}
	ChargingRateUnit_value = map[string]int32{
		"W":  0,
		"A":  1,
		"KW": 2,
	}
)

func (x ChargingRateUnit) Enum() *ChargingRateUnit {
	p := new(ChargingRateUnit)
	*p = x
	return p
}

func (x ChargingRateUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingRateUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[19].Descriptor()
}

func (ChargingRateUnit) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[19]
}

func (x ChargingRateUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingRateUnit.Descriptor instead.
func (ChargingRateUnit) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{19}
}

type GetChargingProfilesStatus int32

const (
	GetChargingProfilesStatus_Accepted GetChargingProfilesStatus = 0
	GetChargingProfilesStatus_Unknown  GetChargingProfilesStatus = 1
)

// Enum value maps for GetChargingProfilesStatus.
var (
	GetChargingProfilesStatus_name = map[int32]string{
		0: "Accepted",
		1: "Unknown",
	}
	GetChargingProfilesStatus_value = map[string]int32{
		"Accepted": 0,
		"Unknown":  1,
	}
)

func (x GetChargingProfilesStatus) Enum() *GetChargingProfilesStatus {
	p := new(GetChargingProfilesStatus)
	*p = x
	return p
}

func (x GetChargingProfilesStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChargingProfilesStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[20].Descriptor()
}

func (GetChargingProfilesStatus) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[20]
}

func (x GetChargingProfilesStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChargingProfilesStatus.Descriptor instead.
func (GetChargingProfilesStatus) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{20}
}

type UpdateFirmwareConf_Status int32

const (
	UpdateFirmwareConf_Accepted           UpdateFirmwareConf_Status = 0 // Accepted this firmware update request. This does not mean the firmware update is successful, the Charging Station will now start the firmware update process.
	UpdateFirmwareConf_Rejected           UpdateFirmwareConf_Status = 1 // Firmware update request rejected.
	UpdateFirmwareConf_AcceptedCanceled   UpdateFirmwareConf_Status = 2 // Accepted this firmware update request, but in doing this has canceled an ongoing firmware update.
	UpdateFirmwareConf_InvalidCertificate UpdateFirmwareConf_Status = 3 // The certificate is invalid.
	UpdateFirmwareConf_RevokedCertificate UpdateFirmwareConf_Status = 4 // Failure end state. The Firmware Signing certificate has been revoked.
)

// Enum value maps for UpdateFirmwareConf_Status.
var (
	UpdateFirmwareConf_Status_name = map[int32]string{
		0: "Accepted",
		1: "Rejected",
		2: "AcceptedCanceled",
		3: "InvalidCertificate",
		4: "RevokedCertificate",
	}
	UpdateFirmwareConf_Status_value = map[string]int32{
		"Accepted":           0,
		"Rejected":           1,
		"AcceptedCanceled":   2,
		"InvalidCertificate": 3,
		"RevokedCertificate": 4,
	}
)

func (x UpdateFirmwareConf_Status) Enum() *UpdateFirmwareConf_Status {
	p := new(UpdateFirmwareConf_Status)
	*p = x
	return p
}

func (x UpdateFirmwareConf_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateFirmwareConf_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[21].Descriptor()
}

func (UpdateFirmwareConf_Status) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[21]
}

func (x UpdateFirmwareConf_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateFirmwareConf_Status.Descriptor instead.
func (UpdateFirmwareConf_Status) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{12, 0}
}

type GetBaseReportReq_ReportBaseEnumType int32

const (
	GetBaseReportReq_ConfigurationInventory GetBaseReportReq_ReportBaseEnumType = 0
	GetBaseReportReq_FullInventory          GetBaseReportReq_ReportBaseEnumType = 1
	GetBaseReportReq_SummaryInventory       GetBaseReportReq_ReportBaseEnumType = 2
)

// Enum value maps for GetBaseReportReq_ReportBaseEnumType.
var (
	GetBaseReportReq_ReportBaseEnumType_name = map[int32]string{
		0: "ConfigurationInventory",
		1: "FullInventory",
		2: "SummaryInventory",
	}
	GetBaseReportReq_ReportBaseEnumType_value = map[string]int32{
		"ConfigurationInventory": 0,
		"FullInventory":          1,
		"SummaryInventory":       2,
	}
)

func (x GetBaseReportReq_ReportBaseEnumType) Enum() *GetBaseReportReq_ReportBaseEnumType {
	p := new(GetBaseReportReq_ReportBaseEnumType)
	*p = x
	return p
}

func (x GetBaseReportReq_ReportBaseEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBaseReportReq_ReportBaseEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[22].Descriptor()
}

func (GetBaseReportReq_ReportBaseEnumType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[22]
}

func (x GetBaseReportReq_ReportBaseEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBaseReportReq_ReportBaseEnumType.Descriptor instead.
func (GetBaseReportReq_ReportBaseEnumType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{60, 0}
}

type GetLogReq_LogType int32

const (
	GetLogReq_DiagnosticsLog GetLogReq_LogType = 0 // This contains the field definition of a diagnostics log file
	GetLogReq_SecurityLog    GetLogReq_LogType = 1 // Sent by the CSMS to the Charging Station to request that the Charging Station uploads the security log.
)

// Enum value maps for GetLogReq_LogType.
var (
	GetLogReq_LogType_name = map[int32]string{
		0: "DiagnosticsLog",
		1: "SecurityLog",
	}
	GetLogReq_LogType_value = map[string]int32{
		"DiagnosticsLog": 0,
		"SecurityLog":    1,
	}
)

func (x GetLogReq_LogType) Enum() *GetLogReq_LogType {
	p := new(GetLogReq_LogType)
	*p = x
	return p
}

func (x GetLogReq_LogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLogReq_LogType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[23].Descriptor()
}

func (GetLogReq_LogType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[23]
}

func (x GetLogReq_LogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLogReq_LogType.Descriptor instead.
func (GetLogReq_LogType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{69, 0}
}

type GetLogConf_LogStatusEnumType int32

const (
	GetLogConf_Accepted         GetLogConf_LogStatusEnumType = 0
	GetLogConf_Rejected         GetLogConf_LogStatusEnumType = 1
	GetLogConf_AcceptedCanceled GetLogConf_LogStatusEnumType = 2 // 接受此日志上传，但这样做将取消正在进行的日志文件上传。
)

// Enum value maps for GetLogConf_LogStatusEnumType.
var (
	GetLogConf_LogStatusEnumType_name = map[int32]string{
		0: "Accepted",
		1: "Rejected",
		2: "AcceptedCanceled",
	}
	GetLogConf_LogStatusEnumType_value = map[string]int32{
		"Accepted":         0,
		"Rejected":         1,
		"AcceptedCanceled": 2,
	}
)

func (x GetLogConf_LogStatusEnumType) Enum() *GetLogConf_LogStatusEnumType {
	p := new(GetLogConf_LogStatusEnumType)
	*p = x
	return p
}

func (x GetLogConf_LogStatusEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetLogConf_LogStatusEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[24].Descriptor()
}

func (GetLogConf_LogStatusEnumType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[24]
}

func (x GetLogConf_LogStatusEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetLogConf_LogStatusEnumType.Descriptor instead.
func (GetLogConf_LogStatusEnumType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{70, 0}
}

type LogStatusNotificationReq_UploadLogStatusEnumType int32

const (
	LogStatusNotificationReq_BadMessage            LogStatusNotificationReq_UploadLogStatusEnumType = 0
	LogStatusNotificationReq_Idle                  LogStatusNotificationReq_UploadLogStatusEnumType = 1
	LogStatusNotificationReq_NotSupportedOperation LogStatusNotificationReq_UploadLogStatusEnumType = 2
	LogStatusNotificationReq_PermissionDenied      LogStatusNotificationReq_UploadLogStatusEnumType = 3
	LogStatusNotificationReq_Uploaded              LogStatusNotificationReq_UploadLogStatusEnumType = 4
	LogStatusNotificationReq_UploadFailure         LogStatusNotificationReq_UploadLogStatusEnumType = 5
	LogStatusNotificationReq_Uploading             LogStatusNotificationReq_UploadLogStatusEnumType = 6
	LogStatusNotificationReq_AcceptedCanceled      LogStatusNotificationReq_UploadLogStatusEnumType = 7
)

// Enum value maps for LogStatusNotificationReq_UploadLogStatusEnumType.
var (
	LogStatusNotificationReq_UploadLogStatusEnumType_name = map[int32]string{
		0: "BadMessage",
		1: "Idle",
		2: "NotSupportedOperation",
		3: "PermissionDenied",
		4: "Uploaded",
		5: "UploadFailure",
		6: "Uploading",
		7: "AcceptedCanceled",
	}
	LogStatusNotificationReq_UploadLogStatusEnumType_value = map[string]int32{
		"BadMessage":            0,
		"Idle":                  1,
		"NotSupportedOperation": 2,
		"PermissionDenied":      3,
		"Uploaded":              4,
		"UploadFailure":         5,
		"Uploading":             6,
		"AcceptedCanceled":      7,
	}
)

func (x LogStatusNotificationReq_UploadLogStatusEnumType) Enum() *LogStatusNotificationReq_UploadLogStatusEnumType {
	p := new(LogStatusNotificationReq_UploadLogStatusEnumType)
	*p = x
	return p
}

func (x LogStatusNotificationReq_UploadLogStatusEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogStatusNotificationReq_UploadLogStatusEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[25].Descriptor()
}

func (LogStatusNotificationReq_UploadLogStatusEnumType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[25]
}

func (x LogStatusNotificationReq_UploadLogStatusEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogStatusNotificationReq_UploadLogStatusEnumType.Descriptor instead.
func (LogStatusNotificationReq_UploadLogStatusEnumType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{71, 0}
}

type SendLocalAuthorizationListReq_UpdateEnumType int32

const (
	SendLocalAuthorizationListReq_Differential SendLocalAuthorizationListReq_UpdateEnumType = 0 //更新不一致的
	SendLocalAuthorizationListReq_Full         SendLocalAuthorizationListReq_UpdateEnumType = 1 //更新全部
)

// Enum value maps for SendLocalAuthorizationListReq_UpdateEnumType.
var (
	SendLocalAuthorizationListReq_UpdateEnumType_name = map[int32]string{
		0: "Differential",
		1: "Full",
	}
	SendLocalAuthorizationListReq_UpdateEnumType_value = map[string]int32{
		"Differential": 0,
		"Full":         1,
	}
)

func (x SendLocalAuthorizationListReq_UpdateEnumType) Enum() *SendLocalAuthorizationListReq_UpdateEnumType {
	p := new(SendLocalAuthorizationListReq_UpdateEnumType)
	*p = x
	return p
}

func (x SendLocalAuthorizationListReq_UpdateEnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendLocalAuthorizationListReq_UpdateEnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[26].Descriptor()
}

func (SendLocalAuthorizationListReq_UpdateEnumType) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[26]
}

func (x SendLocalAuthorizationListReq_UpdateEnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendLocalAuthorizationListReq_UpdateEnumType.Descriptor instead.
func (SendLocalAuthorizationListReq_UpdateEnumType) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{78, 0}
}

type ReserveNowConf_Status int32

const (
	ReserveNowConf_Accepted    ReserveNowConf_Status = 0 //接受
	ReserveNowConf_Faulted     ReserveNowConf_Status = 1 //未预约成功，枪故障
	ReserveNowConf_Occupied    ReserveNowConf_Status = 2 //未预约成功，枪被占用
	ReserveNowConf_Rejected    ReserveNowConf_Status = 3 //未预约成功，设备不支持预约功能
	ReserveNowConf_Unavailable ReserveNowConf_Status = 4 //未预约成功，枪不可用
)

// Enum value maps for ReserveNowConf_Status.
var (
	ReserveNowConf_Status_name = map[int32]string{
		0: "Accepted",
		1: "Faulted",
		2: "Occupied",
		3: "Rejected",
		4: "Unavailable",
	}
	ReserveNowConf_Status_value = map[string]int32{
		"Accepted":    0,
		"Faulted":     1,
		"Occupied":    2,
		"Rejected":    3,
		"Unavailable": 4,
	}
)

func (x ReserveNowConf_Status) Enum() *ReserveNowConf_Status {
	p := new(ReserveNowConf_Status)
	*p = x
	return p
}

func (x ReserveNowConf_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReserveNowConf_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[27].Descriptor()
}

func (ReserveNowConf_Status) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[27]
}

func (x ReserveNowConf_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReserveNowConf_Status.Descriptor instead.
func (ReserveNowConf_Status) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{81, 0}
}

type CancelReservationConf_Status int32

const (
	CancelReservationConf_Accepted CancelReservationConf_Status = 0 //接受
	CancelReservationConf_Rejected CancelReservationConf_Status = 1 //未取消预约成功
)

// Enum value maps for CancelReservationConf_Status.
var (
	CancelReservationConf_Status_name = map[int32]string{
		0: "Accepted",
		1: "Rejected",
	}
	CancelReservationConf_Status_value = map[string]int32{
		"Accepted": 0,
		"Rejected": 1,
	}
)

func (x CancelReservationConf_Status) Enum() *CancelReservationConf_Status {
	p := new(CancelReservationConf_Status)
	*p = x
	return p
}

func (x CancelReservationConf_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelReservationConf_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[28].Descriptor()
}

func (CancelReservationConf_Status) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[28]
}

func (x CancelReservationConf_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelReservationConf_Status.Descriptor instead.
func (CancelReservationConf_Status) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{83, 0}
}

type ChargingProfile_Purpose int32

const (
	ChargingProfile_ChargingStationExternalConstraints ChargingProfile_Purpose = 0
	ChargingProfile_ChargingStationMaxProfile          ChargingProfile_Purpose = 1
	ChargingProfile_TxDefaultProfile                   ChargingProfile_Purpose = 2
	ChargingProfile_TxProfile                          ChargingProfile_Purpose = 3
)

// Enum value maps for ChargingProfile_Purpose.
var (
	ChargingProfile_Purpose_name = map[int32]string{
		0: "ChargingStationExternalConstraints",
		1: "ChargingStationMaxProfile",
		2: "TxDefaultProfile",
		3: "TxProfile",
	}
	ChargingProfile_Purpose_value = map[string]int32{
		"ChargingStationExternalConstraints": 0,
		"ChargingStationMaxProfile":          1,
		"TxDefaultProfile":                   2,
		"TxProfile":                          3,
	}
)

func (x ChargingProfile_Purpose) Enum() *ChargingProfile_Purpose {
	p := new(ChargingProfile_Purpose)
	*p = x
	return p
}

func (x ChargingProfile_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingProfile_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[29].Descriptor()
}

func (ChargingProfile_Purpose) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[29]
}

func (x ChargingProfile_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingProfile_Purpose.Descriptor instead.
func (ChargingProfile_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{99, 0}
}

type ChargingProfile_Status int32

const (
	ChargingProfile_Accepted ChargingProfile_Status = 0
	ChargingProfile_Rejected ChargingProfile_Status = 1
)

// Enum value maps for ChargingProfile_Status.
var (
	ChargingProfile_Status_name = map[int32]string{
		0: "Accepted",
		1: "Rejected",
	}
	ChargingProfile_Status_value = map[string]int32{
		"Accepted": 0,
		"Rejected": 1,
	}
)

func (x ChargingProfile_Status) Enum() *ChargingProfile_Status {
	p := new(ChargingProfile_Status)
	*p = x
	return p
}

func (x ChargingProfile_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingProfile_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[30].Descriptor()
}

func (ChargingProfile_Status) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[30]
}

func (x ChargingProfile_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingProfile_Status.Descriptor instead.
func (ChargingProfile_Status) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{99, 1}
}

type SalesTariff_ConsumptionCost_Cost_Kind int32

const (
	SalesTariff_ConsumptionCost_Cost_CarbonDioxideEmission         SalesTariff_ConsumptionCost_Cost_Kind = 0
	SalesTariff_ConsumptionCost_Cost_RelativePricePercentage       SalesTariff_ConsumptionCost_Cost_Kind = 1
	SalesTariff_ConsumptionCost_Cost_RenewableGenerationPercentage SalesTariff_ConsumptionCost_Cost_Kind = 2
)

// Enum value maps for SalesTariff_ConsumptionCost_Cost_Kind.
var (
	SalesTariff_ConsumptionCost_Cost_Kind_name = map[int32]string{
		0: "CarbonDioxideEmission",
		1: "RelativePricePercentage",
		2: "RenewableGenerationPercentage",
	}
	SalesTariff_ConsumptionCost_Cost_Kind_value = map[string]int32{
		"CarbonDioxideEmission":         0,
		"RelativePricePercentage":       1,
		"RenewableGenerationPercentage": 2,
	}
)

func (x SalesTariff_ConsumptionCost_Cost_Kind) Enum() *SalesTariff_ConsumptionCost_Cost_Kind {
	p := new(SalesTariff_ConsumptionCost_Cost_Kind)
	*p = x
	return p
}

func (x SalesTariff_ConsumptionCost_Cost_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SalesTariff_ConsumptionCost_Cost_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[31].Descriptor()
}

func (SalesTariff_ConsumptionCost_Cost_Kind) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[31]
}

func (x SalesTariff_ConsumptionCost_Cost_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SalesTariff_ConsumptionCost_Cost_Kind.Descriptor instead.
func (SalesTariff_ConsumptionCost_Cost_Kind) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{101, 1, 0, 0}
}

type ClearChargingProfile_Status int32

const (
	ClearChargingProfile_Accepted ClearChargingProfile_Status = 0
	ClearChargingProfile_Rejected ClearChargingProfile_Status = 1
)

// Enum value maps for ClearChargingProfile_Status.
var (
	ClearChargingProfile_Status_name = map[int32]string{
		0: "Accepted",
		1: "Rejected",
	}
	ClearChargingProfile_Status_value = map[string]int32{
		"Accepted": 0,
		"Rejected": 1,
	}
)

func (x ClearChargingProfile_Status) Enum() *ClearChargingProfile_Status {
	p := new(ClearChargingProfile_Status)
	*p = x
	return p
}

func (x ClearChargingProfile_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClearChargingProfile_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_charger_proto_enumTypes[32].Descriptor()
}

func (ClearChargingProfile_Status) Type() protoreflect.EnumType {
	return &file_charger_proto_enumTypes[32]
}

func (x ClearChargingProfile_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClearChargingProfile_Status.Descriptor instead.
func (ClearChargingProfile_Status) EnumDescriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{104, 0}
}

//*
//APDU
//消息报文定义
type APDU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   int32     `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                       //消息unix时间戳
	SequenceId  uint64    `protobuf:"varint,2,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`                                     //定义消息的唯一ID，应答报文中此字段必须与请求报文中的一致，用来匹配请求和应答
	MessageId   MessageID `protobuf:"varint,3,opt,name=messageId,proto3,enum=Goiot.Protocol.Charger.MessageID" json:"messageId,omitempty"` //消息代码,参考 MessageID 定义
	Payload     []byte    `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`                                            //消息经protocol buffer序列化后的数据，实际的消息内容
	NoNeedReply bool      `protobuf:"varint,5,opt,name=no_need_reply,json=noNeedReply,proto3" json:"no_need_reply,omitempty"`              //不需要回复
	Sync        bool      `protobuf:"varint,6,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *APDU) Reset() {
	*x = APDU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APDU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APDU) ProtoMessage() {}

func (x *APDU) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APDU.ProtoReflect.Descriptor instead.
func (*APDU) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{0}
}

func (x *APDU) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *APDU) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *APDU) GetMessageId() MessageID {
	if x != nil {
		return x.MessageId
	}
	return MessageID_ID_None
}

func (x *APDU) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *APDU) GetNoNeedReply() bool {
	if x != nil {
		return x.NoNeedReply
	}
	return false
}

func (x *APDU) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

//*
//MessageError
//错误消息定义
type MessageError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error ErrorCode `protobuf:"varint,1,opt,name=error,proto3,enum=Goiot.Protocol.Charger.ErrorCode" json:"error,omitempty"` //充电桩或者中心平台向对方发送APDU，
	//如果对方无法正确解析及回应APDU内的消息，返回错误消息。返回ErrorCode类型错误原因
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"` //返回错误描述。
}

func (x *MessageError) Reset() {
	*x = MessageError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageError) ProtoMessage() {}

func (x *MessageError) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageError.ProtoReflect.Descriptor instead.
func (*MessageError) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{1}
}

func (x *MessageError) GetError() ErrorCode {
	if x != nil {
		return x.Error
	}
	return ErrorCode_EC_GenericError
}

func (x *MessageError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

//*
//BootNotificationReq
//启动通知请求消息定义
type BootNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber               string `protobuf:"bytes,1,opt,name=partNumber,proto3" json:"partNumber,omitempty"`                                                                     //设备型号
	SerialNumber             string `protobuf:"bytes,2,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`                                                                 //设备序列号
	VendorId                 string `protobuf:"bytes,3,opt,name=vendorId,proto3" json:"vendorId,omitempty"`                                                                         //供应商代码
	FirmwareVersion          string `protobuf:"bytes,4,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`                                                           //固件版本号
	ProtocolVersion          string `protobuf:"bytes,5,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`                                                           //协议版本
	ConnectorNumber          int32  `protobuf:"varint,6,opt,name=connectorNumber,proto3" json:"connectorNumber,omitempty"`                                                          //充电接口数量，已废弃，在设备注册时候会上传connectorNumber
	DeviceCode               string `protobuf:"bytes,8,opt,name=deviceCode,proto3" json:"deviceCode,omitempty"`                                                                     //中心平台分配的设备识别码
	ICCID                    string `protobuf:"bytes,9,opt,name=ICCID,proto3" json:"ICCID,omitempty"`                                                                               //SIM卡识别号(ICCID (21Bytes)/ TMSI 16(Bytes))
	IsTimeoutStopRemoteStart bool   `protobuf:"varint,10,opt,name=is_timeout_stop_remote_start,json=isTimeoutStopRemoteStart,proto3" json:"is_timeout_stop_remote_start,omitempty"` //是否支持超时停止充电
	ProductID                string `protobuf:"bytes,11,opt,name=productID,proto3" json:"productID,omitempty"`                                                                      //产品代码
	Keepalive                uint32 `protobuf:"varint,12,opt,name=keepalive,proto3" json:"keepalive,omitempty"`                                                                     //保活时间
	ComponentBits            uint64 `protobuf:"varint,13,opt,name=ComponentBits,proto3" json:"ComponentBits,omitempty"`                                                             // 功能开关, 以比特位的形式进行传输，0表示基本功能（功能支持，见goiot协议）
	Protocol                 string `protobuf:"bytes,14,opt,name=protocol,proto3" json:"protocol,omitempty"`                                                                        //使用的协议
	Controllee               string `protobuf:"bytes,15,opt,name=controllee,proto3" json:"controllee,omitempty"`                                                                    // 目前连接在哪个pod上
	RemoteAddress            string `protobuf:"bytes,16,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`                                         // 远程ip地址
}

func (x *BootNotificationReq) Reset() {
	*x = BootNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootNotificationReq) ProtoMessage() {}

func (x *BootNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootNotificationReq.ProtoReflect.Descriptor instead.
func (*BootNotificationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{2}
}

func (x *BootNotificationReq) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *BootNotificationReq) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *BootNotificationReq) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *BootNotificationReq) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *BootNotificationReq) GetProtocolVersion() string {
	if x != nil {
		return x.ProtocolVersion
	}
	return ""
}

func (x *BootNotificationReq) GetConnectorNumber() int32 {
	if x != nil {
		return x.ConnectorNumber
	}
	return 0
}

func (x *BootNotificationReq) GetDeviceCode() string {
	if x != nil {
		return x.DeviceCode
	}
	return ""
}

func (x *BootNotificationReq) GetICCID() string {
	if x != nil {
		return x.ICCID
	}
	return ""
}

func (x *BootNotificationReq) GetIsTimeoutStopRemoteStart() bool {
	if x != nil {
		return x.IsTimeoutStopRemoteStart
	}
	return false
}

func (x *BootNotificationReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *BootNotificationReq) GetKeepalive() uint32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *BootNotificationReq) GetComponentBits() uint64 {
	if x != nil {
		return x.ComponentBits
	}
	return 0
}

func (x *BootNotificationReq) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *BootNotificationReq) GetControllee() string {
	if x != nil {
		return x.Controllee
	}
	return ""
}

func (x *BootNotificationReq) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

//*
//BootNotificationConf
//启动通知应答消息定义
type BootNotificationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTime int32    `protobuf:"varint,1,opt,name=currentTime,proto3" json:"currentTime,omitempty"` //服务器当前时间
	Interval    int32    `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`       //心跳时间间隔（秒）
	Status      int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`           //返回中心平台登录状态
	Qrcodes     []string `protobuf:"bytes,4,rep,name=qrcodes,proto3" json:"qrcodes,omitempty"`          //二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
}

func (x *BootNotificationConf) Reset() {
	*x = BootNotificationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootNotificationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootNotificationConf) ProtoMessage() {}

func (x *BootNotificationConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootNotificationConf.ProtoReflect.Descriptor instead.
func (*BootNotificationConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{3}
}

func (x *BootNotificationConf) GetCurrentTime() int32 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *BootNotificationConf) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *BootNotificationConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BootNotificationConf) GetQrcodes() []string {
	if x != nil {
		return x.Qrcodes
	}
	return nil
}

//*
//KeyValue
//“获取设备参数”，参数和参数值信息定义
type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`            //参数名
	Readonly bool   `protobuf:"varint,2,opt,name=readonly,proto3" json:"readonly,omitempty"` //只读。若等于1，表明参数不能改写。
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`        //参数值
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{4}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
//ChangeConfigurationReq
//远程设置参数请求消息定义
type ChangeConfigurationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigurationKey []*KeyValue `protobuf:"bytes,1,rep,name=configurationKey,proto3" json:"configurationKey,omitempty"` //设置参数列表
}

func (x *ChangeConfigurationReq) Reset() {
	*x = ChangeConfigurationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConfigurationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigurationReq) ProtoMessage() {}

func (x *ChangeConfigurationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigurationReq.ProtoReflect.Descriptor instead.
func (*ChangeConfigurationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeConfigurationReq) GetConfigurationKey() []*KeyValue {
	if x != nil {
		return x.ConfigurationKey
	}
	return nil
}

//*
//ChangeConfigurationConf
//远程设置参数应答消息定义
type ChangeConfigurationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConfigurationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.ConfigurationStatus" json:"status,omitempty"` //设置参数返回值
}

func (x *ChangeConfigurationConf) Reset() {
	*x = ChangeConfigurationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeConfigurationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigurationConf) ProtoMessage() {}

func (x *ChangeConfigurationConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigurationConf.ProtoReflect.Descriptor instead.
func (*ChangeConfigurationConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeConfigurationConf) GetStatus() ConfigurationStatus {
	if x != nil {
		return x.Status
	}
	return ConfigurationStatus_CFS_Accepted
}

//*
//GetConfigurationReq
//获取设备参数请求消息定义
type GetConfigurationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*KeyValue `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"` //获取参数列表，协议标准参数通过KeyValue对象的key域指定
}

func (x *GetConfigurationReq) Reset() {
	*x = GetConfigurationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationReq) ProtoMessage() {}

func (x *GetConfigurationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationReq.ProtoReflect.Descriptor instead.
func (*GetConfigurationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{7}
}

func (x *GetConfigurationReq) GetKeys() []*KeyValue {
	if x != nil {
		return x.Keys
	}
	return nil
}

//*
//GetConfigurationConf
//获取设备参数请求消息定义
type GetConfigurationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*KeyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"` //获取参数返回值列表，当获取的参数不存在时，KeyValue对象的value域为空
}

func (x *GetConfigurationConf) Reset() {
	*x = GetConfigurationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationConf) ProtoMessage() {}

func (x *GetConfigurationConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationConf.ProtoReflect.Descriptor instead.
func (*GetConfigurationConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{8}
}

func (x *GetConfigurationConf) GetValues() []*KeyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

//*
//RemoteControlReq
//远程控制请求消息定义
type RemoteControlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function  string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`   //远程控制功能，协议标准功能参考远程控制功能列表
	Parameter string `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"` //控制参数
}

func (x *RemoteControlReq) Reset() {
	*x = RemoteControlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteControlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteControlReq) ProtoMessage() {}

func (x *RemoteControlReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteControlReq.ProtoReflect.Descriptor instead.
func (*RemoteControlReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{9}
}

func (x *RemoteControlReq) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *RemoteControlReq) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

//*
//RemoteControlConf
//远程控制应答消息定义
type RemoteControlConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //远程控制返回状态
}

func (x *RemoteControlConf) Reset() {
	*x = RemoteControlConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteControlConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteControlConf) ProtoMessage() {}

func (x *RemoteControlConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteControlConf.ProtoReflect.Descriptor instead.
func (*RemoteControlConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{10}
}

func (x *RemoteControlConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//*
//UpdateFirmwareReq
//远程升级请求消息定义
type UpdateFirmwareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                               //升级文件ftp服务器地址
	Checksum      string `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`                     //升级文件md5校验值
	Retries       int32  `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`                      //设备下载失败重试次数
	RetryDate     int32  `protobuf:"varint,4,opt,name=retryDate,proto3" json:"retryDate,omitempty"`                  //执行升级的时间,时间戳类型类型
	RetryInterval int32  `protobuf:"varint,5,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`          //重试间隔时间，单位秒
	RequestId     int32  `protobuf:"varint,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` //升级ID
}

func (x *UpdateFirmwareReq) Reset() {
	*x = UpdateFirmwareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFirmwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirmwareReq) ProtoMessage() {}

func (x *UpdateFirmwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirmwareReq.ProtoReflect.Descriptor instead.
func (*UpdateFirmwareReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateFirmwareReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateFirmwareReq) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *UpdateFirmwareReq) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *UpdateFirmwareReq) GetRetryDate() int32 {
	if x != nil {
		return x.RetryDate
	}
	return 0
}

func (x *UpdateFirmwareReq) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *UpdateFirmwareReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

//*
// UpdateFirmwareConf
// 远程升级应答
type UpdateFirmwareConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpdateFirmwareConf_Status `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.UpdateFirmwareConf_Status" json:"status,omitempty"`
}

func (x *UpdateFirmwareConf) Reset() {
	*x = UpdateFirmwareConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFirmwareConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirmwareConf) ProtoMessage() {}

func (x *UpdateFirmwareConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirmwareConf.ProtoReflect.Descriptor instead.
func (*UpdateFirmwareConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateFirmwareConf) GetStatus() UpdateFirmwareConf_Status {
	if x != nil {
		return x.Status
	}
	return UpdateFirmwareConf_Accepted
}

//*
// FirmwareStatusNotificationReq
// 远程升级状态通知请求消息定义
type FirmwareStatusNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    FirmwareStatus `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.FirmwareStatus" json:"status,omitempty"` //固件升级进度状态
	RequestId int32          `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                     //请求ID
}

func (x *FirmwareStatusNotificationReq) Reset() {
	*x = FirmwareStatusNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareStatusNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareStatusNotificationReq) ProtoMessage() {}

func (x *FirmwareStatusNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareStatusNotificationReq.ProtoReflect.Descriptor instead.
func (*FirmwareStatusNotificationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{13}
}

func (x *FirmwareStatusNotificationReq) GetStatus() FirmwareStatus {
	if x != nil {
		return x.Status
	}
	return FirmwareStatus_FW_Idle
}

func (x *FirmwareStatusNotificationReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

//*
// FirmwareStatusNotificationConf
// 远程升级状态通知应答消息定义
type FirmwareStatusNotificationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FirmwareStatusNotificationConf) Reset() {
	*x = FirmwareStatusNotificationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareStatusNotificationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareStatusNotificationConf) ProtoMessage() {}

func (x *FirmwareStatusNotificationConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareStatusNotificationConf.ProtoReflect.Descriptor instead.
func (*FirmwareStatusNotificationConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{14}
}

//*
//GetDiagnosticsReq
//获取设备诊断日志请求消息定义
type GetDiagnosticsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                      //日志上传ftp服务器地址
	Retries       int32  `protobuf:"varint,2,opt,name=retries,proto3" json:"retries,omitempty"`             //日志上传失败重试次数
	RetryInterval int32  `protobuf:"varint,3,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"` //重试间隔时间，单位秒
	StartTime     int32  `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`         //日志开始时间
	EndTime       int32  `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`             //日志结束时间
}

func (x *GetDiagnosticsReq) Reset() {
	*x = GetDiagnosticsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticsReq) ProtoMessage() {}

func (x *GetDiagnosticsReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticsReq.ProtoReflect.Descriptor instead.
func (*GetDiagnosticsReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{15}
}

func (x *GetDiagnosticsReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetDiagnosticsReq) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *GetDiagnosticsReq) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *GetDiagnosticsReq) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetDiagnosticsReq) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

//*
//GetDiagnosticsConf
//获取设备诊断日志应答消息定义
type GetDiagnosticsConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //上传的日志文件名
}

func (x *GetDiagnosticsConf) Reset() {
	*x = GetDiagnosticsConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticsConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticsConf) ProtoMessage() {}

func (x *GetDiagnosticsConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticsConf.ProtoReflect.Descriptor instead.
func (*GetDiagnosticsConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{16}
}

func (x *GetDiagnosticsConf) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

//*
//DiagnosticsStatusNotificationReq
//诊断日志状态通知请求消息定义
type DiagnosticsStatusNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DiagnosticsStatus `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.DiagnosticsStatus" json:"status,omitempty"` //日志上传进度状态
}

func (x *DiagnosticsStatusNotificationReq) Reset() {
	*x = DiagnosticsStatusNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticsStatusNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticsStatusNotificationReq) ProtoMessage() {}

func (x *DiagnosticsStatusNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticsStatusNotificationReq.ProtoReflect.Descriptor instead.
func (*DiagnosticsStatusNotificationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{17}
}

func (x *DiagnosticsStatusNotificationReq) GetStatus() DiagnosticsStatus {
	if x != nil {
		return x.Status
	}
	return DiagnosticsStatus_DGS_Idle
}

//*
//注册请求
type DeviceRegistrationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber         string  `protobuf:"bytes,1,opt,name=partNumber,proto3" json:"partNumber,omitempty"`                      //设备型号（用于区分不同类型的桩）
	SerialNumber       string  `protobuf:"bytes,2,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`                  //设备序列号（由工厂生产时烧录）
	VendorId           string  `protobuf:"bytes,3,opt,name=vendorId,proto3" json:"vendorId,omitempty"`                          //供应商代码
	RegistrationCode   string  `protobuf:"bytes,4,opt,name=registrationCode,proto3" json:"registrationCode,omitempty"`          //注册码（由运营后台生成，分配给工厂，烧录到设备中）
	NeedToEncodeEvseID bool    `protobuf:"varint,5,opt,name=needToEncodeEvseID,proto3" json:"needToEncodeEvseID,omitempty"`     //是否需要转码设备ID
	TopicPrefix        string  `protobuf:"bytes,6,opt,name=topic_prefix,json=topicPrefix,proto3" json:"topic_prefix,omitempty"` //topic的前缀
	ProductID          string  `protobuf:"bytes,7,opt,name=productID,proto3" json:"productID,omitempty"`                        //产品型号
	ConnectorNumber    []int32 `protobuf:"varint,8,rep,packed,name=connectorNumber,proto3" json:"connectorNumber,omitempty"`    //充电接口数量
	ConnectorType      []int32 `protobuf:"varint,9,rep,packed,name=connectorType,proto3" json:"connectorType,omitempty"`        //充电接口类型列表，列表第1项为接口1类型，第2项为接口2类型，依次类推
	//类型定义如下：1-交流充电插座，2-交流充电枪，3-直流充电枪，4-三角插座
	RemoteAddress string `protobuf:"bytes,10,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"` // 桩的ip
}

func (x *DeviceRegistrationReq) Reset() {
	*x = DeviceRegistrationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegistrationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistrationReq) ProtoMessage() {}

func (x *DeviceRegistrationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistrationReq.ProtoReflect.Descriptor instead.
func (*DeviceRegistrationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceRegistrationReq) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *DeviceRegistrationReq) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DeviceRegistrationReq) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DeviceRegistrationReq) GetRegistrationCode() string {
	if x != nil {
		return x.RegistrationCode
	}
	return ""
}

func (x *DeviceRegistrationReq) GetNeedToEncodeEvseID() bool {
	if x != nil {
		return x.NeedToEncodeEvseID
	}
	return false
}

func (x *DeviceRegistrationReq) GetTopicPrefix() string {
	if x != nil {
		return x.TopicPrefix
	}
	return ""
}

func (x *DeviceRegistrationReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceRegistrationReq) GetConnectorNumber() []int32 {
	if x != nil {
		return x.ConnectorNumber
	}
	return nil
}

func (x *DeviceRegistrationReq) GetConnectorType() []int32 {
	if x != nil {
		return x.ConnectorType
	}
	return nil
}

func (x *DeviceRegistrationReq) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

//*
//注册应答
type DeviceRegistrationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                          //返回中心平台注册状态
	DeviceCode   string   `protobuf:"bytes,2,opt,name=deviceCode,proto3" json:"deviceCode,omitempty"`                   //中心平台分配的设备识别码
	MqttUsername string   `protobuf:"bytes,3,opt,name=mqttUsername,proto3" json:"mqttUsername,omitempty"`               //mqtt的用户名
	MqttPassword string   `protobuf:"bytes,4,opt,name=mqttPassword,proto3" json:"mqttPassword,omitempty"`               //mqtt的密码
	QrcodeHost   string   `protobuf:"bytes,5,opt,name=qrcode_host,json=qrcodeHost,proto3" json:"qrcode_host,omitempty"` //QRcode host
	Qrcodes      []string `protobuf:"bytes,6,rep,name=qrcodes,proto3" json:"qrcodes,omitempty"`                         //二维码数组，第0个为设备的二维码，第1个为借口二维码，以此类推...
}

func (x *DeviceRegistrationConf) Reset() {
	*x = DeviceRegistrationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRegistrationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRegistrationConf) ProtoMessage() {}

func (x *DeviceRegistrationConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRegistrationConf.ProtoReflect.Descriptor instead.
func (*DeviceRegistrationConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceRegistrationConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceRegistrationConf) GetDeviceCode() string {
	if x != nil {
		return x.DeviceCode
	}
	return ""
}

func (x *DeviceRegistrationConf) GetMqttUsername() string {
	if x != nil {
		return x.MqttUsername
	}
	return ""
}

func (x *DeviceRegistrationConf) GetMqttPassword() string {
	if x != nil {
		return x.MqttPassword
	}
	return ""
}

func (x *DeviceRegistrationConf) GetQrcodeHost() string {
	if x != nil {
		return x.QrcodeHost
	}
	return ""
}

func (x *DeviceRegistrationConf) GetQrcodes() []string {
	if x != nil {
		return x.Qrcodes
	}
	return nil
}

//*
//TriggerMessageReq
//触发消息重发请求
type TriggerMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request     MessageID `protobuf:"varint,1,opt,name=request,proto3,enum=Goiot.Protocol.Charger.MessageID" json:"request,omitempty"` //请求重发的消息代码
	ConnectorId int32     `protobuf:"varint,2,opt,name=connectorId,proto3" json:"connectorId,omitempty"`                               //指定充电接口
}

func (x *TriggerMessageReq) Reset() {
	*x = TriggerMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerMessageReq) ProtoMessage() {}

func (x *TriggerMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerMessageReq.ProtoReflect.Descriptor instead.
func (*TriggerMessageReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{20}
}

func (x *TriggerMessageReq) GetRequest() MessageID {
	if x != nil {
		return x.Request
	}
	return MessageID_ID_None
}

func (x *TriggerMessageReq) GetConnectorId() int32 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

//
//计费模版相关
//分功率段按时长充电计费模版
type TariffTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Powerstart int32 `protobuf:"varint,1,opt,name=powerstart,proto3" json:"powerstart,omitempty"` //分段费率起始功率，分辨率W
	Powerend   int32 `protobuf:"varint,2,opt,name=powerend,proto3" json:"powerend,omitempty"`     //分段费率结束功率，分辨率W
	Timestart  int32 `protobuf:"varint,3,opt,name=timestart,proto3" json:"timestart,omitempty"`   //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
	Timeend    int32 `protobuf:"varint,4,opt,name=timeend,proto3" json:"timeend,omitempty"`       //分段费率结束时间，以24小时内分钟数表示。例如480表示此费率到8:00（480/60）结束
	Price      int32 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`           //按小时服务费价格，分辨率RMB 0.1分。
}

func (x *TariffTime) Reset() {
	*x = TariffTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffTime) ProtoMessage() {}

func (x *TariffTime) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffTime.ProtoReflect.Descriptor instead.
func (*TariffTime) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{21}
}

func (x *TariffTime) GetPowerstart() int32 {
	if x != nil {
		return x.Powerstart
	}
	return 0
}

func (x *TariffTime) GetPowerend() int32 {
	if x != nil {
		return x.Powerend
	}
	return 0
}

func (x *TariffTime) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *TariffTime) GetTimeend() int32 {
	if x != nil {
		return x.Timeend
	}
	return 0
}

func (x *TariffTime) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

//
//计费模版相关
//分时段按电价计费充电计费模版
type TariffCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestart    int32  `protobuf:"varint,1,opt,name=timestart,proto3" json:"timestart,omitempty"`       //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
	Timeend      int32  `protobuf:"varint,2,opt,name=timeend,proto3" json:"timeend,omitempty"`           //分段费率结束时间，同上
	Tag          string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`                    //分段标签，比如"尖"，"峰"，"平"，"谷"
	Elecprice    int32  `protobuf:"varint,4,opt,name=elecprice,proto3" json:"elecprice,omitempty"`       //按度电价，分辨率RMB0.1分
	Serviceprice int32  `protobuf:"varint,5,opt,name=serviceprice,proto3" json:"serviceprice,omitempty"` //按度服务费价格，分辨率RMB0.1分
	Occupyprice  int32  `protobuf:"varint,6,opt,name=occupyprice,proto3" json:"occupyprice,omitempty"`   //按小时占用费用, 分辨率RMB0.1分
}

func (x *TariffCharge) Reset() {
	*x = TariffCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffCharge) ProtoMessage() {}

func (x *TariffCharge) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffCharge.ProtoReflect.Descriptor instead.
func (*TariffCharge) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{22}
}

func (x *TariffCharge) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *TariffCharge) GetTimeend() int32 {
	if x != nil {
		return x.Timeend
	}
	return 0
}

func (x *TariffCharge) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TariffCharge) GetElecprice() int32 {
	if x != nil {
		return x.Elecprice
	}
	return 0
}

func (x *TariffCharge) GetServiceprice() int32 {
	if x != nil {
		return x.Serviceprice
	}
	return 0
}

func (x *TariffCharge) GetOccupyprice() int32 {
	if x != nil {
		return x.Occupyprice
	}
	return 0
}

//
//计费模版相关
//分时段计时停车费
type TariffParking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestart int32 `protobuf:"varint,1,opt,name=timestart,proto3" json:"timestart,omitempty"` //开始时间，从停车开始计时时间段，分辨率分钟。例如30表示此费率从停车30分钟后开始
	Price     int32 `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`         //按小时停车费，分辨率RMB0.1分
}

func (x *TariffParking) Reset() {
	*x = TariffParking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffParking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffParking) ProtoMessage() {}

func (x *TariffParking) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffParking.ProtoReflect.Descriptor instead.
func (*TariffParking) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{23}
}

func (x *TariffParking) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *TariffParking) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

//*
//Cost
//计费模版相关，充电消费账单消息定义
type CostBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestart    int32  `protobuf:"varint,1,opt,name=timestart,proto3" json:"timestart,omitempty"`       //分段费率开始时间，以24小时内分钟数表示。例如420表示此费率从7:00（420/60）开始
	Timeend      int32  `protobuf:"varint,2,opt,name=timeend,proto3" json:"timeend,omitempty"`           //分段费率结束时间，同上
	Tag          string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`                    //分段标签，比如"尖"，"峰"，"平"，"谷"
	Electric     int32  `protobuf:"varint,4,opt,name=electric,proto3" json:"electric,omitempty"`         //该分段所消耗电量
	Electriccost int32  `protobuf:"varint,5,opt,name=electriccost,proto3" json:"electriccost,omitempty"` //该分段所消费电量电费,单位分
	Servicecost  int32  `protobuf:"varint,6,opt,name=servicecost,proto3" json:"servicecost,omitempty"`   //该分段所消费服务费,单位分
	Occupycost   int32  `protobuf:"varint,7,opt,name=occupycost,proto3" json:"occupycost,omitempty"`     //按分段所消费停车费,单位分
}

func (x *CostBill) Reset() {
	*x = CostBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CostBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostBill) ProtoMessage() {}

func (x *CostBill) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostBill.ProtoReflect.Descriptor instead.
func (*CostBill) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{24}
}

func (x *CostBill) GetTimestart() int32 {
	if x != nil {
		return x.Timestart
	}
	return 0
}

func (x *CostBill) GetTimeend() int32 {
	if x != nil {
		return x.Timeend
	}
	return 0
}

func (x *CostBill) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *CostBill) GetElectric() int32 {
	if x != nil {
		return x.Electric
	}
	return 0
}

func (x *CostBill) GetElectriccost() int32 {
	if x != nil {
		return x.Electriccost
	}
	return 0
}

func (x *CostBill) GetServicecost() int32 {
	if x != nil {
		return x.Servicecost
	}
	return 0
}

func (x *CostBill) GetOccupycost() int32 {
	if x != nil {
		return x.Occupycost
	}
	return 0
}

type Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bills             []*CostBill `protobuf:"bytes,1,rep,name=bills,proto3" json:"bills,omitempty"`                                                     //消费清单
	Tariffid          uint64      `protobuf:"varint,2,opt,name=tariffid,proto3" json:"tariffid,omitempty"`                                              //计费模版id
	Totalcost         int32       `protobuf:"varint,6,opt,name=totalcost,proto3" json:"totalcost,omitempty"`                                            //总消费
	Tariffpower       int32       `protobuf:"varint,7,opt,name=tariffpower,proto3" json:"tariffpower,omitempty"`                                        //计费功率
	Totalelec         int32       `protobuf:"varint,8,opt,name=totalelec,proto3" json:"totalelec,omitempty"`                                            //计费总电量
	ConflictTotalCost int32       `protobuf:"varint,9,opt,name=conflict_total_cost,json=conflictTotalCost,proto3" json:"conflict_total_cost,omitempty"` //费用冲突，一般用于核算费用，核算分段计费与总消费不一致的情况，如果一致则此字段为默认值0
}

func (x *Cost) Reset() {
	*x = Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{25}
}

func (x *Cost) GetBills() []*CostBill {
	if x != nil {
		return x.Bills
	}
	return nil
}

func (x *Cost) GetTariffid() uint64 {
	if x != nil {
		return x.Tariffid
	}
	return 0
}

func (x *Cost) GetTotalcost() int32 {
	if x != nil {
		return x.Totalcost
	}
	return 0
}

func (x *Cost) GetTariffpower() int32 {
	if x != nil {
		return x.Tariffpower
	}
	return 0
}

func (x *Cost) GetTotalelec() int32 {
	if x != nil {
		return x.Totalelec
	}
	return 0
}

func (x *Cost) GetConflictTotalCost() int32 {
	if x != nil {
		return x.ConflictTotalCost
	}
	return 0
}

type TariffChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elec     map[string]int32 `protobuf:"bytes,1,rep,name=elec,proto3" json:"elec,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`       //电费
	Service  map[string]int32 `protobuf:"bytes,2,rep,name=service,proto3" json:"service,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //服务费
	Tariffid uint64           `protobuf:"varint,3,opt,name=tariffid,proto3" json:"tariffid,omitempty"`                                                                                       //计费模版id号
}

func (x *TariffChannel) Reset() {
	*x = TariffChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffChannel) ProtoMessage() {}

func (x *TariffChannel) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffChannel.ProtoReflect.Descriptor instead.
func (*TariffChannel) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{26}
}

func (x *TariffChannel) GetElec() map[string]int32 {
	if x != nil {
		return x.Elec
	}
	return nil
}

func (x *TariffChannel) GetService() map[string]int32 {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *TariffChannel) GetTariffid() uint64 {
	if x != nil {
		return x.Tariffid
	}
	return 0
}

//*
//SetTariffReq
//设置计费模版
type SetTariffReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    message OccupyTariff {
	//        int32 free_time = 1;                    //免费时间
	//        int32 max_fee = 2;                      //最高/封顶费用，分辨率RMB 0.1分
	//        int32 unit_fee = 3;                     //每分钟的费用，分辨率RMB 0.1分
	//    }
	Tariffid        uint64                    `protobuf:"varint,1,opt,name=tariffid,proto3" json:"tariffid,omitempty"`                                                                                        //计费模版id号
	Description     string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                                                                   //描述
	Chargetariffs   []*TariffCharge           `protobuf:"bytes,3,rep,name=chargetariffs,proto3" json:"chargetariffs,omitempty"`                                                                               //按电量充电费用
	Timetariffs     []*TariffTime             `protobuf:"bytes,4,rep,name=timetariffs,proto3" json:"timetariffs,omitempty"`                                                                                   //按时长充电费用
	Parkingtariffs  []*TariffParking          `protobuf:"bytes,5,rep,name=parkingtariffs,proto3" json:"parkingtariffs,omitempty"`                                                                             //停车费
	Test            bool                      `protobuf:"varint,6,opt,name=test,proto3" json:"test,omitempty"`                                                                                                //测试下，是否通过校验，并不真正下发
	Unitprice       int32                     `protobuf:"varint,7,opt,name=unitprice,proto3" json:"unitprice,omitempty"`                                                                                      //计费单价，分辨率RMB 0.1分。
	FreeChargerTime int32                     `protobuf:"varint,8,opt,name=free_charger_time,json=freeChargerTime,proto3" json:"free_charger_time,omitempty"`                                                 //免费充电时间
	Channels        map[string]*TariffChannel `protobuf:"bytes,9,rep,name=channels,proto3" json:"channels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //渠道对应的费率集合
	ChannelKey      string                    `protobuf:"bytes,10,opt,name=channel_key,json=channelKey,proto3" json:"channel_key,omitempty"`                                                                  //渠道费率的键值
}

func (x *SetTariffReq) Reset() {
	*x = SetTariffReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTariffReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTariffReq) ProtoMessage() {}

func (x *SetTariffReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTariffReq.ProtoReflect.Descriptor instead.
func (*SetTariffReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{27}
}

func (x *SetTariffReq) GetTariffid() uint64 {
	if x != nil {
		return x.Tariffid
	}
	return 0
}

func (x *SetTariffReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetTariffReq) GetChargetariffs() []*TariffCharge {
	if x != nil {
		return x.Chargetariffs
	}
	return nil
}

func (x *SetTariffReq) GetTimetariffs() []*TariffTime {
	if x != nil {
		return x.Timetariffs
	}
	return nil
}

func (x *SetTariffReq) GetParkingtariffs() []*TariffParking {
	if x != nil {
		return x.Parkingtariffs
	}
	return nil
}

func (x *SetTariffReq) GetTest() bool {
	if x != nil {
		return x.Test
	}
	return false
}

func (x *SetTariffReq) GetUnitprice() int32 {
	if x != nil {
		return x.Unitprice
	}
	return 0
}

func (x *SetTariffReq) GetFreeChargerTime() int32 {
	if x != nil {
		return x.FreeChargerTime
	}
	return 0
}

func (x *SetTariffReq) GetChannels() map[string]*TariffChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *SetTariffReq) GetChannelKey() string {
	if x != nil {
		return x.ChannelKey
	}
	return ""
}

//*
//SetTariffConf
//设置计费模版应答
type SetTariffConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //充电桩返回状态
}

func (x *SetTariffConf) Reset() {
	*x = SetTariffConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTariffConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTariffConf) ProtoMessage() {}

func (x *SetTariffConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTariffConf.ProtoReflect.Descriptor instead.
func (*SetTariffConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{28}
}

func (x *SetTariffConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//*用户身份鉴权信息
type IdToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                           //Id的卡号
	IdType      IdType              `protobuf:"varint,2,opt,name=id_type,json=idType,proto3,enum=Goiot.Protocol.Charger.IdType" json:"id_type,omitempty"` //用户类型
	Brand       string              `protobuf:"bytes,3,opt,name=brand,proto3" json:"brand,omitempty"`                                                     //卡的品牌，比如goiot或某地的公交卡
	Password    string              `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                                               //IdToken的密码
	Customer    string              `protobuf:"bytes,5,opt,name=customer,proto3" json:"customer,omitempty"`                                               //运营商
	ExpiryDate  int32               `protobuf:"varint,6,opt,name=expiryDate,proto3" json:"expiryDate,omitempty"`                                          //用户账户失效时间,时间戳类型
	Balance     int32               `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`                                                //用户账户余额。单位分
	Status      AuthorizationStatus `protobuf:"varint,8,opt,name=status,proto3,enum=Goiot.Protocol.Charger.AuthorizationStatus" json:"status,omitempty"`  //中心平台鉴权结果。用户账户是否通过中心平台鉴权。
	Type        CardType            `protobuf:"varint,9,opt,name=type,proto3,enum=Goiot.Protocol.Charger.CardType" json:"type,omitempty"`                 //用户卡类型
	Chargecount int32               `protobuf:"varint,10,opt,name=chargecount,proto3" json:"chargecount,omitempty"`                                       //剩余充电次数
}

func (x *IdToken) Reset() {
	*x = IdToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdToken) ProtoMessage() {}

func (x *IdToken) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdToken.ProtoReflect.Descriptor instead.
func (*IdToken) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{29}
}

func (x *IdToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdToken) GetIdType() IdType {
	if x != nil {
		return x.IdType
	}
	return IdType_ID_DEFAULT
}

func (x *IdToken) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *IdToken) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *IdToken) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *IdToken) GetExpiryDate() int32 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

func (x *IdToken) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *IdToken) GetStatus() AuthorizationStatus {
	if x != nil {
		return x.Status
	}
	return AuthorizationStatus_AS_Accepted
}

func (x *IdToken) GetType() CardType {
	if x != nil {
		return x.Type
	}
	return CardType_CARD_DEFAULT
}

func (x *IdToken) GetChargecount() int32 {
	if x != nil {
		return x.Chargecount
	}
	return 0
}

//*
//AuthorizeReq
//鉴权请求
type AuthorizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdData            *IdToken          `protobuf:"bytes,1,opt,name=IdData,proto3" json:"IdData,omitempty"`                                                                                               //用户身份识别号
	Password          string            `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`                                                                                           //用户密码
	Payment           int32             `protobuf:"varint,3,opt,name=payment,proto3" json:"payment,omitempty"`                                                                                            //用户请求扣费金额
	AuthorizationMode AuthorizationMode `protobuf:"varint,4,opt,name=authorization_mode,json=authorizationMode,proto3,enum=Goiot.Protocol.Charger.AuthorizationMode" json:"authorization_mode,omitempty"` //鉴权类型
}

func (x *AuthorizeReq) Reset() {
	*x = AuthorizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeReq) ProtoMessage() {}

func (x *AuthorizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeReq.ProtoReflect.Descriptor instead.
func (*AuthorizeReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{30}
}

func (x *AuthorizeReq) GetIdData() *IdToken {
	if x != nil {
		return x.IdData
	}
	return nil
}

func (x *AuthorizeReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthorizeReq) GetPayment() int32 {
	if x != nil {
		return x.Payment
	}
	return 0
}

func (x *AuthorizeReq) GetAuthorizationMode() AuthorizationMode {
	if x != nil {
		return x.AuthorizationMode
	}
	return AuthorizationMode_AM_LocalPlug
}

//*
//AuthorizeConf
//鉴权应答
type AuthorizeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idinfo        *IdToken      `protobuf:"bytes,1,opt,name=idinfo,proto3" json:"idinfo,omitempty"`               //中心平台返回鉴权结果
	PriceScheme   *SetTariffReq `protobuf:"bytes,2,opt,name=priceScheme,proto3" json:"priceScheme,omitempty"`     //价格模版
	TransactionId string        `protobuf:"bytes,3,opt,name=transactionId,proto3" json:"transactionId,omitempty"` //中心平台返回订单号
}

func (x *AuthorizeConf) Reset() {
	*x = AuthorizeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeConf) ProtoMessage() {}

func (x *AuthorizeConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeConf.ProtoReflect.Descriptor instead.
func (*AuthorizeConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{31}
}

func (x *AuthorizeConf) GetIdinfo() *IdToken {
	if x != nil {
		return x.Idinfo
	}
	return nil
}

func (x *AuthorizeConf) GetPriceScheme() *SetTariffReq {
	if x != nil {
		return x.PriceScheme
	}
	return nil
}

func (x *AuthorizeConf) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

//*
//UpdateIdCardCacheReq
//后台更新充电站用户卡信息
type UpdateIdCardCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cardinfo []*IdToken `protobuf:"bytes,1,rep,name=cardinfo,proto3" json:"cardinfo,omitempty"`
}

func (x *UpdateIdCardCacheReq) Reset() {
	*x = UpdateIdCardCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIdCardCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIdCardCacheReq) ProtoMessage() {}

func (x *UpdateIdCardCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIdCardCacheReq.ProtoReflect.Descriptor instead.
func (*UpdateIdCardCacheReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateIdCardCacheReq) GetCardinfo() []*IdToken {
	if x != nil {
		return x.Cardinfo
	}
	return nil
}

//*
// HeartbeatResp
// 心跳回复
type HeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTime int64 `protobuf:"varint,1,opt,name=currentTime,proto3" json:"currentTime,omitempty"` // 桩的时间
}

func (x *HeartbeatReq) Reset() {
	*x = HeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReq) ProtoMessage() {}

func (x *HeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReq.ProtoReflect.Descriptor instead.
func (*HeartbeatReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{33}
}

func (x *HeartbeatReq) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

//*
// HeartbeatResp
// 心跳回复
type HeartbeatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatResp) Reset() {
	*x = HeartbeatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResp) ProtoMessage() {}

func (x *HeartbeatResp) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResp.ProtoReflect.Descriptor instead.
func (*HeartbeatResp) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{34}
}

//*
//RemoteStartTransactionReq
//远程启动充电请求消息定义
type RemoteStartTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId     string           `protobuf:"bytes,1,opt,name=connectorId,proto3" json:"connectorId,omitempty"`     //充电接口号，必须大于0。若充电桩只有一个接口，可以不填
	IdData          *IdToken         `protobuf:"bytes,2,opt,name=IdData,proto3" json:"IdData,omitempty"`               //用户身份识别号
	TransactionId   string           `protobuf:"bytes,3,opt,name=transactionId,proto3" json:"transactionId,omitempty"` //中心平台生成的订单号
	Pin             string           `protobuf:"bytes,4,opt,name=pin,proto3" json:"pin,omitempty"`                     //充电桩pin码
	EvseId          string           `protobuf:"bytes,5,opt,name=evseId,proto3" json:"evseId,omitempty"`
	ServiceMode     ServiceMode      `protobuf:"varint,6,opt,name=serviceMode,proto3,enum=Goiot.Protocol.Charger.ServiceMode" json:"serviceMode,omitempty"` //充电／放电服务模式。按电量充电，按金额充电，按时间充电，自动充满 ，按电量放电，自动放电
	TimingStart     int32            `protobuf:"varint,7,opt,name=timingStart,proto3" json:"timingStart,omitempty"`                                         //定时启动时间。充电将在设定的时间启动。如果为0或者未填，立即启动充电
	AllowedMinute   int32            `protobuf:"varint,8,opt,name=allowedMinute,proto3" json:"allowedMinute,omitempty"`                                     //按时间充电时，最大允许充电时间，单位秒
	AllowedKwh      int32            `protobuf:"varint,9,opt,name=allowedKwh,proto3" json:"allowedKwh,omitempty"`                                           //按电量充电时，最大允许充电电量，分辨率0.01kwh
	AllowedRMB      int32            `protobuf:"varint,10,opt,name=allowedRMB,proto3" json:"allowedRMB,omitempty"`                                          //按金额充电时，最大允许充电金额，单位分
	PriceScheme     *SetTariffReq    `protobuf:"bytes,11,opt,name=priceScheme,proto3" json:"priceScheme,omitempty"`                                         //价格模版。对于某些针对特定用户启用特定计费模版
	ScheduleTime    int32            `protobuf:"varint,12,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`                  // 定时充电时间戳(秒), 0表示即时充电
	RemoteStartId   string           `protobuf:"bytes,13,opt,name=remoteStartId,proto3" json:"remoteStartId,omitempty"`
	ChargingProfile *ChargingProfile `protobuf:"bytes,14,opt,name=chargingProfile,proto3" json:"chargingProfile,omitempty"`
}

func (x *RemoteStartTransactionReq) Reset() {
	*x = RemoteStartTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStartTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStartTransactionReq) ProtoMessage() {}

func (x *RemoteStartTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStartTransactionReq.ProtoReflect.Descriptor instead.
func (*RemoteStartTransactionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{35}
}

func (x *RemoteStartTransactionReq) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *RemoteStartTransactionReq) GetIdData() *IdToken {
	if x != nil {
		return x.IdData
	}
	return nil
}

func (x *RemoteStartTransactionReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RemoteStartTransactionReq) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *RemoteStartTransactionReq) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

func (x *RemoteStartTransactionReq) GetServiceMode() ServiceMode {
	if x != nil {
		return x.ServiceMode
	}
	return ServiceMode_SM_AutoCharge
}

func (x *RemoteStartTransactionReq) GetTimingStart() int32 {
	if x != nil {
		return x.TimingStart
	}
	return 0
}

func (x *RemoteStartTransactionReq) GetAllowedMinute() int32 {
	if x != nil {
		return x.AllowedMinute
	}
	return 0
}

func (x *RemoteStartTransactionReq) GetAllowedKwh() int32 {
	if x != nil {
		return x.AllowedKwh
	}
	return 0
}

func (x *RemoteStartTransactionReq) GetAllowedRMB() int32 {
	if x != nil {
		return x.AllowedRMB
	}
	return 0
}

func (x *RemoteStartTransactionReq) GetPriceScheme() *SetTariffReq {
	if x != nil {
		return x.PriceScheme
	}
	return nil
}

func (x *RemoteStartTransactionReq) GetScheduleTime() int32 {
	if x != nil {
		return x.ScheduleTime
	}
	return 0
}

func (x *RemoteStartTransactionReq) GetRemoteStartId() string {
	if x != nil {
		return x.RemoteStartId
	}
	return ""
}

func (x *RemoteStartTransactionReq) GetChargingProfile() *ChargingProfile {
	if x != nil {
		return x.ChargingProfile
	}
	return nil
}

//*
//RemoteStartTransactionConf
//远程启动充电应答消息定义
type RemoteStartTransactionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     int32      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                        // 充电请求，充电桩返回状态
	Reason     StopReason `protobuf:"varint,2,opt,name=reason,proto3,enum=Goiot.Protocol.Charger.StopReason" json:"reason,omitempty"` // 充电结束原因。
	ReasonDesc string     `protobuf:"bytes,3,opt,name=reason_desc,json=reasonDesc,proto3" json:"reason_desc,omitempty"`               //停止理由描述
	RecordId   string     `protobuf:"bytes,4,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`                     // 设备流水号
}

func (x *RemoteStartTransactionConf) Reset() {
	*x = RemoteStartTransactionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStartTransactionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStartTransactionConf) ProtoMessage() {}

func (x *RemoteStartTransactionConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStartTransactionConf.ProtoReflect.Descriptor instead.
func (*RemoteStartTransactionConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{36}
}

func (x *RemoteStartTransactionConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RemoteStartTransactionConf) GetReason() StopReason {
	if x != nil {
		return x.Reason
	}
	return StopReason_SR_Normal
}

func (x *RemoteStartTransactionConf) GetReasonDesc() string {
	if x != nil {
		return x.ReasonDesc
	}
	return ""
}

func (x *RemoteStartTransactionConf) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

//*
//RemoteStopTransactionReq
//远程停止充电请求消息定义
type RemoteStopTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string     `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`                           // 充电交易的订单号
	Reason        StopReason `protobuf:"varint,2,opt,name=reason,proto3,enum=Goiot.Protocol.Charger.StopReason" json:"reason,omitempty"` // 充电结束原因。
}

func (x *RemoteStopTransactionReq) Reset() {
	*x = RemoteStopTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStopTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStopTransactionReq) ProtoMessage() {}

func (x *RemoteStopTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStopTransactionReq.ProtoReflect.Descriptor instead.
func (*RemoteStopTransactionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{37}
}

func (x *RemoteStopTransactionReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RemoteStopTransactionReq) GetReason() StopReason {
	if x != nil {
		return x.Reason
	}
	return StopReason_SR_Normal
}

//*
//RemoteStopTransactionConf
//远程停止充电应答消息定义
type RemoteStopTransactionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //充电桩返回状态
}

func (x *RemoteStopTransactionConf) Reset() {
	*x = RemoteStopTransactionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStopTransactionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStopTransactionConf) ProtoMessage() {}

func (x *RemoteStopTransactionConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStopTransactionConf.ProtoReflect.Descriptor instead.
func (*RemoteStopTransactionConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{38}
}

func (x *RemoteStopTransactionConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//*
//StartTransactionReq
//充电开始通知请求消息定义
type StartTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId               string            `protobuf:"bytes,1,opt,name=recordId,proto3" json:"recordId,omitempty"` //充电桩充电记录号
	EvseId                 string            `protobuf:"bytes,17,opt,name=evseId,proto3" json:"evseId,omitempty"`
	ConnectorId            string            `protobuf:"bytes,2,opt,name=connectorId,proto3" json:"connectorId,omitempty"`                                          //充电接口号，必须大于0。若充电桩只有一个接口，可以不填
	IdData                 *IdToken          `protobuf:"bytes,3,opt,name=IdData,proto3" json:"IdData,omitempty"`                                                    //用户身份识别号
	Mode                   AuthorizationMode `protobuf:"varint,4,opt,name=mode,proto3,enum=Goiot.Protocol.Charger.AuthorizationMode" json:"mode,omitempty"`         //授权启动充电方式，用户远程启动，本地刷卡启动，本地蓝牙启动等
	ServiceMode            ServiceMode       `protobuf:"varint,5,opt,name=serviceMode,proto3,enum=Goiot.Protocol.Charger.ServiceMode" json:"serviceMode,omitempty"` //充电服务模式。按电量充电，按金额充电，按时间充电，自动充满等
	MeterStart             int32             `protobuf:"varint,6,opt,name=meterStart,proto3" json:"meterStart,omitempty"`                                           //充电开始时电表度数，分辨率0.01kwh
	Timestamp              int32             `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                             //充电开始时间,时间戳
	ReservationId          int32             `protobuf:"varint,8,opt,name=reservationId,proto3" json:"reservationId,omitempty"`                                     //预约ID
	TransactionId          string            `protobuf:"bytes,9,opt,name=transactionId,proto3" json:"transactionId,omitempty"`                                      //平台中心生成的订单号。此订单号是从“远程启动充电”请求消息获取的
	Pin                    string            `protobuf:"bytes,10,opt,name=pin,proto3" json:"pin,omitempty"`                                                         //充电桩校验码。当充电桩离线时，可以通过在充电桩屏幕输入pin码结束充电
	TariffId               uint64            `protobuf:"varint,11,opt,name=tariffId,proto3" json:"tariffId,omitempty"`                                              //计费模版ID。此订单将使用对应的计费模版计费
	ServiceAmount          int32             `protobuf:"varint,12,opt,name=serviceAmount,proto3" json:"serviceAmount,omitempty"`                                    //充电量/钱/时间。对应充电服务模式中的按电量充电，按金额充电，按时间充电，自动充满进行赋值
	Transparent            string            `protobuf:"bytes,13,opt,name=transparent,proto3" json:"transparent,omitempty"`                                         //透传字段，会在 confi报文里传回来 transparent
	Soc                    uint32            `protobuf:"varint,14,opt,name=soc,proto3" json:"soc,omitempty"`                                                        //启动电量的SOC
	IsReserved             bool              `protobuf:"varint,15,opt,name=is_reserved,json=isReserved,proto3" json:"is_reserved,omitempty"`                        //是否预约中
	RemoteStartId          int32             `protobuf:"varint,18,opt,name=remoteStartId,proto3" json:"remoteStartId,omitempty"`
	CreatedAt              int32             `protobuf:"varint,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` //订单创建时间，用于解决部分协议在充电中不上报启动充电时间的bug（启动充电时间会用于协助寻找是否已存在的订单）
	ConnectorChargingState ChargerStatus     `protobuf:"varint,19,opt,name=connectorChargingState,proto3,enum=Goiot.Protocol.Charger.ChargerStatus" json:"connectorChargingState,omitempty"`
	Offline                bool              `protobuf:"varint,20,opt,name=offline,proto3" json:"offline,omitempty"` // 是否是离线订单
}

func (x *StartTransactionReq) Reset() {
	*x = StartTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransactionReq) ProtoMessage() {}

func (x *StartTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransactionReq.ProtoReflect.Descriptor instead.
func (*StartTransactionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{39}
}

func (x *StartTransactionReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *StartTransactionReq) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

func (x *StartTransactionReq) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *StartTransactionReq) GetIdData() *IdToken {
	if x != nil {
		return x.IdData
	}
	return nil
}

func (x *StartTransactionReq) GetMode() AuthorizationMode {
	if x != nil {
		return x.Mode
	}
	return AuthorizationMode_AM_LocalPlug
}

func (x *StartTransactionReq) GetServiceMode() ServiceMode {
	if x != nil {
		return x.ServiceMode
	}
	return ServiceMode_SM_AutoCharge
}

func (x *StartTransactionReq) GetMeterStart() int32 {
	if x != nil {
		return x.MeterStart
	}
	return 0
}

func (x *StartTransactionReq) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StartTransactionReq) GetReservationId() int32 {
	if x != nil {
		return x.ReservationId
	}
	return 0
}

func (x *StartTransactionReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *StartTransactionReq) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *StartTransactionReq) GetTariffId() uint64 {
	if x != nil {
		return x.TariffId
	}
	return 0
}

func (x *StartTransactionReq) GetServiceAmount() int32 {
	if x != nil {
		return x.ServiceAmount
	}
	return 0
}

func (x *StartTransactionReq) GetTransparent() string {
	if x != nil {
		return x.Transparent
	}
	return ""
}

func (x *StartTransactionReq) GetSoc() uint32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *StartTransactionReq) GetIsReserved() bool {
	if x != nil {
		return x.IsReserved
	}
	return false
}

func (x *StartTransactionReq) GetRemoteStartId() int32 {
	if x != nil {
		return x.RemoteStartId
	}
	return 0
}

func (x *StartTransactionReq) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *StartTransactionReq) GetConnectorChargingState() ChargerStatus {
	if x != nil {
		return x.ConnectorChargingState
	}
	return ChargerStatus_CHS_Idle
}

func (x *StartTransactionReq) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

//*
//StartTransactionConf
//充电开始通知应答消息定义
type StartTransactionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"` //平台中心生成的订单号,如果“充电开始通知”请求没有transactionId。
	//中心平台应答时，生成订单号回复充电桩。
	IdInfo      *IdToken `protobuf:"bytes,2,opt,name=idInfo,proto3" json:"idInfo,omitempty"`           //中心平台返回鉴权结果
	RecordID    string   `protobuf:"bytes,3,opt,name=recordID,proto3" json:"recordID,omitempty"`       //充电桩充电记录号
	Transparent string   `protobuf:"bytes,4,opt,name=transparent,proto3" json:"transparent,omitempty"` // req传过来的， 要透传回去
}

func (x *StartTransactionConf) Reset() {
	*x = StartTransactionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransactionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransactionConf) ProtoMessage() {}

func (x *StartTransactionConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransactionConf.ProtoReflect.Descriptor instead.
func (*StartTransactionConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{40}
}

func (x *StartTransactionConf) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *StartTransactionConf) GetIdInfo() *IdToken {
	if x != nil {
		return x.IdInfo
	}
	return nil
}

func (x *StartTransactionConf) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *StartTransactionConf) GetTransparent() string {
	if x != nil {
		return x.Transparent
	}
	return ""
}

//*
//StopTransactionReq
//充电结束通知请求消息定义
type StopTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId            string     `protobuf:"bytes,1,opt,name=recordId,proto3" json:"recordId,omitempty"`                                     // 充电桩充电记录号
	TransactionId       string     `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`                           // 平台中心生成的订单号。此订单号是从“远程启动充电”请求消息获取的
	IdData              *IdToken   `protobuf:"bytes,3,opt,name=IdData,proto3" json:"IdData,omitempty"`                                         // 用户身份识别号
	Reason              StopReason `protobuf:"varint,4,opt,name=reason,proto3,enum=Goiot.Protocol.Charger.StopReason" json:"reason,omitempty"` // 充电结束原因。用户远程结束，本地结束，异常结束等
	MeterStop           int32      `protobuf:"varint,5,opt,name=meterStop,proto3" json:"meterStop,omitempty"`                                  // 充电结束时电表度数，分辨率0.01kwh
	Timestamp           int32      `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  // 充电结束时间,时间戳，精度：秒
	Cost                *Cost      `protobuf:"bytes,7,opt,name=cost,proto3" json:"cost,omitempty"`                                             // 充电订单计费信息
	EvseId              string     `protobuf:"bytes,8,opt,name=evseId,proto3" json:"evseId,omitempty"`
	Deduction           int32      `protobuf:"varint,9,opt,name=deduction,proto3" json:"deduction,omitempty"`                                                     // 本地扣款金额。单位分
	TAC                 string     `protobuf:"bytes,10,opt,name=TAC,proto3" json:"TAC,omitempty"`                                                                 // 本地卡片扣款校验数据
	ElecData            []byte     `protobuf:"bytes,11,opt,name=elecData,proto3" json:"elecData,omitempty"`                                                       // 充电过程电量信息, 每5分钟间隔电量，每个点的电量一个字节表示
	ReasonDesc          string     `protobuf:"bytes,12,opt,name=reason_desc,json=reasonDesc,proto3" json:"reason_desc,omitempty"`                                 // 停止理由描述
	IsDisabledTimeStart bool       `protobuf:"varint,13,opt,name=is_disabled_time_start,json=isDisabledTimeStart,proto3" json:"is_disabled_time_start,omitempty"` // 是否禁用开始时间来找订单记录，如有的设备在启动通知报文中没有启动时间，这一项就要设置成true，如盛宏、优力特的设备
	Soc                 uint32     `protobuf:"varint,14,opt,name=soc,proto3" json:"soc,omitempty"`                                                                // 停止的SOC
	CalcCostByBackend   bool       `protobuf:"varint,15,opt,name=calc_cost_by_backend,json=calcCostByBackend,proto3" json:"calc_cost_by_backend,omitempty"`       // 后台计费
	ReservationId       int32      `protobuf:"varint,16,opt,name=reservationId,proto3" json:"reservationId,omitempty"`                                            //预约ID
	ConnectorId         string     `protobuf:"bytes,17,opt,name=connectorId,proto3" json:"connectorId,omitempty"`
}

func (x *StopTransactionReq) Reset() {
	*x = StopTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTransactionReq) ProtoMessage() {}

func (x *StopTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTransactionReq.ProtoReflect.Descriptor instead.
func (*StopTransactionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{41}
}

func (x *StopTransactionReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *StopTransactionReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *StopTransactionReq) GetIdData() *IdToken {
	if x != nil {
		return x.IdData
	}
	return nil
}

func (x *StopTransactionReq) GetReason() StopReason {
	if x != nil {
		return x.Reason
	}
	return StopReason_SR_Normal
}

func (x *StopTransactionReq) GetMeterStop() int32 {
	if x != nil {
		return x.MeterStop
	}
	return 0
}

func (x *StopTransactionReq) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StopTransactionReq) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *StopTransactionReq) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

func (x *StopTransactionReq) GetDeduction() int32 {
	if x != nil {
		return x.Deduction
	}
	return 0
}

func (x *StopTransactionReq) GetTAC() string {
	if x != nil {
		return x.TAC
	}
	return ""
}

func (x *StopTransactionReq) GetElecData() []byte {
	if x != nil {
		return x.ElecData
	}
	return nil
}

func (x *StopTransactionReq) GetReasonDesc() string {
	if x != nil {
		return x.ReasonDesc
	}
	return ""
}

func (x *StopTransactionReq) GetIsDisabledTimeStart() bool {
	if x != nil {
		return x.IsDisabledTimeStart
	}
	return false
}

func (x *StopTransactionReq) GetSoc() uint32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *StopTransactionReq) GetCalcCostByBackend() bool {
	if x != nil {
		return x.CalcCostByBackend
	}
	return false
}

func (x *StopTransactionReq) GetReservationId() int32 {
	if x != nil {
		return x.ReservationId
	}
	return 0
}

func (x *StopTransactionReq) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

//*
//StopTransactionConf
//充电结束通知应答消息定义
type StopTransactionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance       int32  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`     //用户账户余额
	TotalCost     int32  `protobuf:"varint,2,opt,name=totalCost,proto3" json:"totalCost,omitempty"` //中心平台返回的总费用
	Charged       bool   `protobuf:"varint,3,opt,name=charged,proto3" json:"charged,omitempty"`     //是否已扣费
	TransactionId string `protobuf:"bytes,4,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *StopTransactionConf) Reset() {
	*x = StopTransactionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTransactionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTransactionConf) ProtoMessage() {}

func (x *StopTransactionConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTransactionConf.ProtoReflect.Descriptor instead.
func (*StopTransactionConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{42}
}

func (x *StopTransactionConf) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *StopTransactionConf) GetTotalCost() int32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *StopTransactionConf) GetCharged() bool {
	if x != nil {
		return x.Charged
	}
	return false
}

func (x *StopTransactionConf) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
type BMSHandshakeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BMSVersion     string      `protobuf:"bytes,1,opt,name=BMSVersion,proto3" json:"BMSVersion,omitempty"`                                    //BMS通信协议版本号
	AllowedVoltage int32       `protobuf:"varint,2,opt,name=allowedVoltage,proto3" json:"allowedVoltage,omitempty"`                           //BMS最高允许充电电压
	BatType        BatteryType `protobuf:"varint,3,opt,name=batType,proto3,enum=Goiot.Protocol.Charger.BatteryType" json:"batType,omitempty"` //电池类型
	RatedCapacity  int32       `protobuf:"varint,4,opt,name=ratedCapacity,proto3" json:"ratedCapacity,omitempty"`                             //整车动力蓄电池系统额定容量
	RatedVoltage   int32       `protobuf:"varint,5,opt,name=ratedVoltage,proto3" json:"ratedVoltage,omitempty"`                               //整车动力蓄电池系统额定总电压
	Vendor         string      `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"`                                            //电池生产厂商
	SerialNumber   string      `protobuf:"bytes,7,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`                                //电池组序号
	ProductionDate int32       `protobuf:"varint,8,opt,name=productionDate,proto3" json:"productionDate,omitempty"`                           //电池组生产日期,时间戳，精度：秒
	Cycles         int32       `protobuf:"varint,9,opt,name=cycles,proto3" json:"cycles,omitempty"`                                           //电池组充电次数
	Property       int32       `protobuf:"varint,10,opt,name=property,proto3" json:"property,omitempty"`                                      //电池组产权标识。0-租赁，1-车自有
	VIN            string      `protobuf:"bytes,11,opt,name=VIN,proto3" json:"VIN,omitempty"`                                                 //车辆识别码
	FWVersion      string      `protobuf:"bytes,12,opt,name=FWVersion,proto3" json:"FWVersion,omitempty"`                                     //BMS软件版本号
}

func (x *BMSHandshakeInfo) Reset() {
	*x = BMSHandshakeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSHandshakeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSHandshakeInfo) ProtoMessage() {}

func (x *BMSHandshakeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSHandshakeInfo.ProtoReflect.Descriptor instead.
func (*BMSHandshakeInfo) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{43}
}

func (x *BMSHandshakeInfo) GetBMSVersion() string {
	if x != nil {
		return x.BMSVersion
	}
	return ""
}

func (x *BMSHandshakeInfo) GetAllowedVoltage() int32 {
	if x != nil {
		return x.AllowedVoltage
	}
	return 0
}

func (x *BMSHandshakeInfo) GetBatType() BatteryType {
	if x != nil {
		return x.BatType
	}
	return BatteryType_BAT_Unkown
}

func (x *BMSHandshakeInfo) GetRatedCapacity() int32 {
	if x != nil {
		return x.RatedCapacity
	}
	return 0
}

func (x *BMSHandshakeInfo) GetRatedVoltage() int32 {
	if x != nil {
		return x.RatedVoltage
	}
	return 0
}

func (x *BMSHandshakeInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *BMSHandshakeInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *BMSHandshakeInfo) GetProductionDate() int32 {
	if x != nil {
		return x.ProductionDate
	}
	return 0
}

func (x *BMSHandshakeInfo) GetCycles() int32 {
	if x != nil {
		return x.Cycles
	}
	return 0
}

func (x *BMSHandshakeInfo) GetProperty() int32 {
	if x != nil {
		return x.Property
	}
	return 0
}

func (x *BMSHandshakeInfo) GetVIN() string {
	if x != nil {
		return x.VIN
	}
	return ""
}

func (x *BMSHandshakeInfo) GetFWVersion() string {
	if x != nil {
		return x.FWVersion
	}
	return ""
}

// 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
type BMSConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedCellVol int32 `protobuf:"varint,1,opt,name=allowedCellVol,proto3" json:"allowedCellVol,omitempty"` //单体动力蓄电池最高允许充电电压
	AllowedCurrent int32 `protobuf:"varint,2,opt,name=allowedCurrent,proto3" json:"allowedCurrent,omitempty"` //最高允许充电电流
	NominalEnergy  int32 `protobuf:"varint,3,opt,name=nominalEnergy,proto3" json:"nominalEnergy,omitempty"`   //动力蓄电池标称总能量
	AlowedVoltage  int32 `protobuf:"varint,4,opt,name=alowedVoltage,proto3" json:"alowedVoltage,omitempty"`   //最高允许充电总电压
	AlowedTemp     int32 `protobuf:"varint,5,opt,name=alowedTemp,proto3" json:"alowedTemp,omitempty"`         //最高允许温度
	Soc            int32 `protobuf:"varint,6,opt,name=soc,proto3" json:"soc,omitempty"`                       //整车动力蓄电池荷电状态
	Voltage        int32 `protobuf:"varint,7,opt,name=voltage,proto3" json:"voltage,omitempty"`               //整车动力蓄电池当前电池电压
}

func (x *BMSConfigInfo) Reset() {
	*x = BMSConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSConfigInfo) ProtoMessage() {}

func (x *BMSConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSConfigInfo.ProtoReflect.Descriptor instead.
func (*BMSConfigInfo) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{44}
}

func (x *BMSConfigInfo) GetAllowedCellVol() int32 {
	if x != nil {
		return x.AllowedCellVol
	}
	return 0
}

func (x *BMSConfigInfo) GetAllowedCurrent() int32 {
	if x != nil {
		return x.AllowedCurrent
	}
	return 0
}

func (x *BMSConfigInfo) GetNominalEnergy() int32 {
	if x != nil {
		return x.NominalEnergy
	}
	return 0
}

func (x *BMSConfigInfo) GetAlowedVoltage() int32 {
	if x != nil {
		return x.AlowedVoltage
	}
	return 0
}

func (x *BMSConfigInfo) GetAlowedTemp() int32 {
	if x != nil {
		return x.AlowedTemp
	}
	return 0
}

func (x *BMSConfigInfo) GetSoc() int32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *BMSConfigInfo) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

//*
//BMSChargingInfo
//充电中信息定义
type BMSChargingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 电压单位V 精度0.01
	// 电流单位A 精度0.01
	RequestVoltage    int32               `protobuf:"varint,1,opt,name=requestVoltage,proto3" json:"requestVoltage,omitempty"`                                                      // 电压需求
	RequestCurrent    int32               `protobuf:"varint,2,opt,name=requestCurrent,proto3" json:"requestCurrent,omitempty"`                                                      // 电流需求
	ChargeMode        BMSChargingType     `protobuf:"varint,3,opt,name=chargeMode,proto3,enum=Goiot.Protocol.Charger.BMSChargingType" json:"chargeMode,omitempty"`                  // 充电模式
	Voltage           int32               `protobuf:"varint,4,opt,name=voltage,proto3" json:"voltage,omitempty"`                                                                    // 充电电压测量值
	Current           int32               `protobuf:"varint,5,opt,name=current,proto3" json:"current,omitempty"`                                                                    // 充电电流测量值
	Soc               int32               `protobuf:"varint,6,opt,name=soc,proto3" json:"soc,omitempty"`                                                                            // 当前荷电状态	数据范围：0~100
	RemainingTime     int32               `protobuf:"varint,7,opt,name=remainingTime,proto3" json:"remainingTime,omitempty"`                                                        // 估算剩余充电时间 单位秒
	HighestVoltage    *Cell               `protobuf:"bytes,8,opt,name=highestVoltage,proto3" json:"highestVoltage,omitempty"`                                                       // 最高动力蓄电池电压及编号
	HighestTemp       *Cell               `protobuf:"bytes,9,opt,name=highestTemp,proto3" json:"highestTemp,omitempty"`                                                             // 最高动力蓄电池温度及编号
	LowestTemp        *Cell               `protobuf:"bytes,10,opt,name=lowestTemp,proto3" json:"lowestTemp,omitempty"`                                                              // 最低动力蓄电池温度及编号
	CellVoltageStatus BMSMeasureStatus    `protobuf:"varint,11,opt,name=cellVoltageStatus,proto3,enum=Goiot.Protocol.Charger.BMSMeasureStatus" json:"cellVoltageStatus,omitempty"`  // 单体动力蓄电池电压告警
	SocStatus         BMSMeasureStatus    `protobuf:"varint,12,opt,name=socStatus,proto3,enum=Goiot.Protocol.Charger.BMSMeasureStatus" json:"socStatus,omitempty"`                  // 整车动力蓄电池荷电状态告警
	CurrentStatus     BMSMeasureStatus    `protobuf:"varint,13,opt,name=currentStatus,proto3,enum=Goiot.Protocol.Charger.BMSMeasureStatus" json:"currentStatus,omitempty"`          // 动力蓄电池充电电流
	TemperatureStatus BMSMeasureStatus    `protobuf:"varint,14,opt,name=temperatureStatus,proto3,enum=Goiot.Protocol.Charger.BMSMeasureStatus" json:"temperatureStatus,omitempty"`  // 动力蓄电池温度告警
	InsulationStatus  BMSTelesignalStatus `protobuf:"varint,15,opt,name=insulationStatus,proto3,enum=Goiot.Protocol.Charger.BMSTelesignalStatus" json:"insulationStatus,omitempty"` // 动力蓄电池绝缘状态
	ContactorStatus   BMSTelesignalStatus `protobuf:"varint,16,opt,name=contactorStatus,proto3,enum=Goiot.Protocol.Charger.BMSTelesignalStatus" json:"contactorStatus,omitempty"`   // 动力蓄电池组输出继电器连接状态
	CellVoltage       []*Cell             `protobuf:"bytes,17,rep,name=cellVoltage,proto3" json:"cellVoltage,omitempty"`                                                            // 单体蓄电池电压列表
	CellTemperature   []*Cell             `protobuf:"bytes,18,rep,name=cellTemperature,proto3" json:"cellTemperature,omitempty"`                                                    // 单体蓄电池温度列表
	BMSVersion        string              `protobuf:"bytes,19,opt,name=BMSVersion,proto3" json:"BMSVersion,omitempty"`                                                              // BMS通信协议版本号
	AllowedVoltage    int32               `protobuf:"varint,20,opt,name=allowedVoltage,proto3" json:"allowedVoltage,omitempty"`                                                     // BMS最高允许充电电压
	BatType           BatteryType         `protobuf:"varint,21,opt,name=batType,proto3,enum=Goiot.Protocol.Charger.BatteryType" json:"batType,omitempty"`                           // 电池类型
	RatedCapacity     int32               `protobuf:"varint,22,opt,name=ratedCapacity,proto3" json:"ratedCapacity,omitempty"`                                                       // 整车动力蓄电池系统额定容量
	RatedVoltage      int32               `protobuf:"varint,23,opt,name=ratedVoltage,proto3" json:"ratedVoltage,omitempty"`                                                         // 整车动力蓄电池系统额定总电压
	Vendor            string              `protobuf:"bytes,24,opt,name=vendor,proto3" json:"vendor,omitempty"`                                                                      // 电池生产厂商
	SerialNumber      string              `protobuf:"bytes,25,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`                                                          // 电池组序号
	ProductionDate    int32               `protobuf:"varint,26,opt,name=productionDate,proto3" json:"productionDate,omitempty"`                                                     // 电池组生产日期,时间戳，精度：秒
	Cycles            int32               `protobuf:"varint,27,opt,name=cycles,proto3" json:"cycles,omitempty"`                                                                     // 电池组充电次数
	Property          int32               `protobuf:"varint,28,opt,name=property,proto3" json:"property,omitempty"`                                                                 // 电池组产权标识。0-租赁，1-车自有
	VIN               string              `protobuf:"bytes,29,opt,name=VIN,proto3" json:"VIN,omitempty"`                                                                            // 车辆识别码
	FWVersion         string              `protobuf:"bytes,30,opt,name=FWVersion,proto3" json:"FWVersion,omitempty"`                                                                // BMS软件版本号
	BmsCode           string              `protobuf:"bytes,31,opt,name=bmsCode,proto3" json:"bmsCode,omitempty"`                                                                    // BMS编码	<=50字符
	AllowedCurrent    int32               `protobuf:"varint,32,opt,name=allowedCurrent,proto3" json:"allowedCurrent,omitempty"`                                                     // 最高允许充电电流	单位:A 精度0.01
	CallAlowedVoltage int32               `protobuf:"varint,33,opt,name=callAlowedVoltage,proto3" json:"callAlowedVoltage,omitempty"`                                               // 单体最高允许电压	单位:V 精度0.01
	AlowedTemp        int32               `protobuf:"varint,34,opt,name=alowedTemp,proto3" json:"alowedTemp,omitempty"`                                                             // 最高允许温度	单位：℃
	AllowedCellVol    int32               `protobuf:"varint,35,opt,name=allowedCellVol,proto3" json:"allowedCellVol,omitempty"`                                                     // 单体动力蓄电池最高允许充电电压
	NominalEnergy     int32               `protobuf:"varint,36,opt,name=nominalEnergy,proto3" json:"nominalEnergy,omitempty"`                                                       // 动力蓄电池标称总能量
	AlowedVoltage     int32               `protobuf:"varint,37,opt,name=alowedVoltage,proto3" json:"alowedVoltage,omitempty"`                                                       // 最高允许充电总电压
}

func (x *BMSChargingInfo) Reset() {
	*x = BMSChargingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSChargingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSChargingInfo) ProtoMessage() {}

func (x *BMSChargingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSChargingInfo.ProtoReflect.Descriptor instead.
func (*BMSChargingInfo) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{45}
}

func (x *BMSChargingInfo) GetRequestVoltage() int32 {
	if x != nil {
		return x.RequestVoltage
	}
	return 0
}

func (x *BMSChargingInfo) GetRequestCurrent() int32 {
	if x != nil {
		return x.RequestCurrent
	}
	return 0
}

func (x *BMSChargingInfo) GetChargeMode() BMSChargingType {
	if x != nil {
		return x.ChargeMode
	}
	return BMSChargingType_BMS_None
}

func (x *BMSChargingInfo) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BMSChargingInfo) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BMSChargingInfo) GetSoc() int32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *BMSChargingInfo) GetRemainingTime() int32 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

func (x *BMSChargingInfo) GetHighestVoltage() *Cell {
	if x != nil {
		return x.HighestVoltage
	}
	return nil
}

func (x *BMSChargingInfo) GetHighestTemp() *Cell {
	if x != nil {
		return x.HighestTemp
	}
	return nil
}

func (x *BMSChargingInfo) GetLowestTemp() *Cell {
	if x != nil {
		return x.LowestTemp
	}
	return nil
}

func (x *BMSChargingInfo) GetCellVoltageStatus() BMSMeasureStatus {
	if x != nil {
		return x.CellVoltageStatus
	}
	return BMSMeasureStatus_BMSM_Normal
}

func (x *BMSChargingInfo) GetSocStatus() BMSMeasureStatus {
	if x != nil {
		return x.SocStatus
	}
	return BMSMeasureStatus_BMSM_Normal
}

func (x *BMSChargingInfo) GetCurrentStatus() BMSMeasureStatus {
	if x != nil {
		return x.CurrentStatus
	}
	return BMSMeasureStatus_BMSM_Normal
}

func (x *BMSChargingInfo) GetTemperatureStatus() BMSMeasureStatus {
	if x != nil {
		return x.TemperatureStatus
	}
	return BMSMeasureStatus_BMSM_Normal
}

func (x *BMSChargingInfo) GetInsulationStatus() BMSTelesignalStatus {
	if x != nil {
		return x.InsulationStatus
	}
	return BMSTelesignalStatus_BMST_Normal
}

func (x *BMSChargingInfo) GetContactorStatus() BMSTelesignalStatus {
	if x != nil {
		return x.ContactorStatus
	}
	return BMSTelesignalStatus_BMST_Normal
}

func (x *BMSChargingInfo) GetCellVoltage() []*Cell {
	if x != nil {
		return x.CellVoltage
	}
	return nil
}

func (x *BMSChargingInfo) GetCellTemperature() []*Cell {
	if x != nil {
		return x.CellTemperature
	}
	return nil
}

func (x *BMSChargingInfo) GetBMSVersion() string {
	if x != nil {
		return x.BMSVersion
	}
	return ""
}

func (x *BMSChargingInfo) GetAllowedVoltage() int32 {
	if x != nil {
		return x.AllowedVoltage
	}
	return 0
}

func (x *BMSChargingInfo) GetBatType() BatteryType {
	if x != nil {
		return x.BatType
	}
	return BatteryType_BAT_Unkown
}

func (x *BMSChargingInfo) GetRatedCapacity() int32 {
	if x != nil {
		return x.RatedCapacity
	}
	return 0
}

func (x *BMSChargingInfo) GetRatedVoltage() int32 {
	if x != nil {
		return x.RatedVoltage
	}
	return 0
}

func (x *BMSChargingInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *BMSChargingInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *BMSChargingInfo) GetProductionDate() int32 {
	if x != nil {
		return x.ProductionDate
	}
	return 0
}

func (x *BMSChargingInfo) GetCycles() int32 {
	if x != nil {
		return x.Cycles
	}
	return 0
}

func (x *BMSChargingInfo) GetProperty() int32 {
	if x != nil {
		return x.Property
	}
	return 0
}

func (x *BMSChargingInfo) GetVIN() string {
	if x != nil {
		return x.VIN
	}
	return ""
}

func (x *BMSChargingInfo) GetFWVersion() string {
	if x != nil {
		return x.FWVersion
	}
	return ""
}

func (x *BMSChargingInfo) GetBmsCode() string {
	if x != nil {
		return x.BmsCode
	}
	return ""
}

func (x *BMSChargingInfo) GetAllowedCurrent() int32 {
	if x != nil {
		return x.AllowedCurrent
	}
	return 0
}

func (x *BMSChargingInfo) GetCallAlowedVoltage() int32 {
	if x != nil {
		return x.CallAlowedVoltage
	}
	return 0
}

func (x *BMSChargingInfo) GetAlowedTemp() int32 {
	if x != nil {
		return x.AlowedTemp
	}
	return 0
}

func (x *BMSChargingInfo) GetAllowedCellVol() int32 {
	if x != nil {
		return x.AllowedCellVol
	}
	return 0
}

func (x *BMSChargingInfo) GetNominalEnergy() int32 {
	if x != nil {
		return x.NominalEnergy
	}
	return 0
}

func (x *BMSChargingInfo) GetAlowedVoltage() int32 {
	if x != nil {
		return x.AlowedVoltage
	}
	return 0
}

//*
//BMSChargedInfo 已废弃，慢慢的把字段移动到BMSChargingInfo，统一使用BMSChargingInfo
//充电完成信息定义
type BMSChargedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Soc            int32 `protobuf:"varint,1,opt,name=soc,proto3" json:"soc,omitempty"`                       //中止荷电状态
	LowestVoltage  int32 `protobuf:"varint,2,opt,name=lowestVoltage,proto3" json:"lowestVoltage,omitempty"`   //动力蓄电池单体最低电压
	HighestVoltage int32 `protobuf:"varint,3,opt,name=highestVoltage,proto3" json:"highestVoltage,omitempty"` //动力蓄电池单体最高电压
	LowestTemp     int32 `protobuf:"varint,4,opt,name=lowestTemp,proto3" json:"lowestTemp,omitempty"`         //动力蓄电池最低温度
	HighestTemp    int32 `protobuf:"varint,5,opt,name=highestTemp,proto3" json:"highestTemp,omitempty"`       //动力蓄电池最高温度
}

func (x *BMSChargedInfo) Reset() {
	*x = BMSChargedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSChargedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSChargedInfo) ProtoMessage() {}

func (x *BMSChargedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSChargedInfo.ProtoReflect.Descriptor instead.
func (*BMSChargedInfo) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{46}
}

func (x *BMSChargedInfo) GetSoc() int32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *BMSChargedInfo) GetLowestVoltage() int32 {
	if x != nil {
		return x.LowestVoltage
	}
	return 0
}

func (x *BMSChargedInfo) GetHighestVoltage() int32 {
	if x != nil {
		return x.HighestVoltage
	}
	return 0
}

func (x *BMSChargedInfo) GetLowestTemp() int32 {
	if x != nil {
		return x.LowestTemp
	}
	return 0
}

func (x *BMSChargedInfo) GetHighestTemp() int32 {
	if x != nil {
		return x.HighestTemp
	}
	return 0
}

//*
//Cell
//单体电池定义
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"` //单体电池编号
	Value  int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`   //采集值，电压或者温度
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{47}
}

func (x *Cell) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Cell) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//*
//ChargingInfoReq
//充电过程信息请求
type ChargingInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId         string        `protobuf:"bytes,1,opt,name=recordId,proto3" json:"recordId,omitempty"`       //充电桩充电记录号
	ConnectorId      string        `protobuf:"bytes,2,opt,name=connectorId,proto3" json:"connectorId,omitempty"` //指定充电接口
	EvseId           string        `protobuf:"bytes,3,opt,name=evseId,proto3" json:"evseId,omitempty"`
	CurrentA         int32         `protobuf:"varint,4,opt,name=currentA,proto3" json:"currentA,omitempty"`
	CurrentB         int32         `protobuf:"varint,5,opt,name=currentB,proto3" json:"currentB,omitempty"`
	CurrentC         int32         `protobuf:"varint,6,opt,name=currentC,proto3" json:"currentC,omitempty"`
	VoltageA         int32         `protobuf:"varint,7,opt,name=voltageA,proto3" json:"voltageA,omitempty"`
	VoltageB         int32         `protobuf:"varint,8,opt,name=voltageB,proto3" json:"voltageB,omitempty"`
	VoltageC         int32         `protobuf:"varint,9,opt,name=voltageC,proto3" json:"voltageC,omitempty"`
	ConsumedTime     int32         `protobuf:"varint,10,opt,name=consumedTime,proto3" json:"consumedTime,omitempty"`                               //已充充电时间
	ConsumedElectric int32         `protobuf:"varint,11,opt,name=consumedElectric,proto3" json:"consumedElectric,omitempty"`                       //已充电电量
	Cost             *Cost         `protobuf:"bytes,12,opt,name=cost,proto3" json:"cost,omitempty"`                                                //消费金额
	Power            int32         `protobuf:"varint,13,opt,name=power,proto3" json:"power,omitempty"`                                             //充电功率
	RemainingTime    int32         `protobuf:"varint,14,opt,name=remainingTime,proto3" json:"remainingTime,omitempty"`                             //剩余充电时间，精度：秒
	Status           ChargerStatus `protobuf:"varint,15,opt,name=status,proto3,enum=Goiot.Protocol.Charger.ChargerStatus" json:"status,omitempty"` // 充电状态
	Offline          bool          `protobuf:"varint,16,opt,name=offline,proto3" json:"offline,omitempty"`
}

func (x *ChargingInfoReq) Reset() {
	*x = ChargingInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingInfoReq) ProtoMessage() {}

func (x *ChargingInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingInfoReq.ProtoReflect.Descriptor instead.
func (*ChargingInfoReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{48}
}

func (x *ChargingInfoReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *ChargingInfoReq) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *ChargingInfoReq) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

func (x *ChargingInfoReq) GetCurrentA() int32 {
	if x != nil {
		return x.CurrentA
	}
	return 0
}

func (x *ChargingInfoReq) GetCurrentB() int32 {
	if x != nil {
		return x.CurrentB
	}
	return 0
}

func (x *ChargingInfoReq) GetCurrentC() int32 {
	if x != nil {
		return x.CurrentC
	}
	return 0
}

func (x *ChargingInfoReq) GetVoltageA() int32 {
	if x != nil {
		return x.VoltageA
	}
	return 0
}

func (x *ChargingInfoReq) GetVoltageB() int32 {
	if x != nil {
		return x.VoltageB
	}
	return 0
}

func (x *ChargingInfoReq) GetVoltageC() int32 {
	if x != nil {
		return x.VoltageC
	}
	return 0
}

func (x *ChargingInfoReq) GetConsumedTime() int32 {
	if x != nil {
		return x.ConsumedTime
	}
	return 0
}

func (x *ChargingInfoReq) GetConsumedElectric() int32 {
	if x != nil {
		return x.ConsumedElectric
	}
	return 0
}

func (x *ChargingInfoReq) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *ChargingInfoReq) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *ChargingInfoReq) GetRemainingTime() int32 {
	if x != nil {
		return x.RemainingTime
	}
	return 0
}

func (x *ChargingInfoReq) GetStatus() ChargerStatus {
	if x != nil {
		return x.Status
	}
	return ChargerStatus_CHS_Idle
}

func (x *ChargingInfoReq) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

//*
//Transaction
//“上报离线订单请求”消息上报充电记录定义
type TransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId            string            `protobuf:"bytes,1,opt,name=recordId,proto3" json:"recordId,omitempty"`                                                        //充电桩充电记录号，每多增一条充电记录，recordId增1。
	TransactionId       string            `protobuf:"bytes,2,opt,name=transactionId,proto3" json:"transactionId,omitempty"`                                              //中心平台生成的充电交易号
	ConnectorId         string            `protobuf:"bytes,3,opt,name=connectorId,proto3" json:"connectorId,omitempty"`                                                  //充电接口号
	IdData              *IdToken          `protobuf:"bytes,4,opt,name=IdData,proto3" json:"IdData,omitempty"`                                                            //用户身份识别号
	Mode                AuthorizationMode `protobuf:"varint,5,opt,name=mode,proto3,enum=Goiot.Protocol.Charger.AuthorizationMode" json:"mode,omitempty"`                 //授权启动充电方式
	Service             ServiceMode       `protobuf:"varint,6,opt,name=service,proto3,enum=Goiot.Protocol.Charger.ServiceMode" json:"service,omitempty"`                 //充电服务模式
	MeterStart          int32             `protobuf:"varint,7,opt,name=meterStart,proto3" json:"meterStart,omitempty"`                                                   //充电开始时电表度数，分辨率0.01kwh
	MeterStop           int32             `protobuf:"varint,8,opt,name=meterStop,proto3" json:"meterStop,omitempty"`                                                     //充电结束时电表度数，分辨率0.01kwh
	TimeStart           int32             `protobuf:"varint,9,opt,name=timeStart,proto3" json:"timeStart,omitempty"`                                                     //充电订单开始时间，时间戳，精度：秒
	TimeStop            int32             `protobuf:"varint,10,opt,name=timeStop,proto3" json:"timeStop,omitempty"`                                                      //充电订单结束时间，时间戳，精度：秒
	Pin                 string            `protobuf:"bytes,11,opt,name=pin,proto3" json:"pin,omitempty"`                                                                 //充电校验码
	Reason              StopReason        `protobuf:"varint,12,opt,name=reason,proto3,enum=Goiot.Protocol.Charger.StopReason" json:"reason,omitempty"`                   //充电结束原因。用户远程结束，本地结束，异常结束等。
	Cost                *Cost             `protobuf:"bytes,13,opt,name=cost,proto3" json:"cost,omitempty"`                                                               //计费账单信息
	Deduction           int32             `protobuf:"varint,14,opt,name=deduction,proto3" json:"deduction,omitempty"`                                                    //本地扣款金额。单位分
	TAC                 string            `protobuf:"bytes,16,opt,name=TAC,proto3" json:"TAC,omitempty"`                                                                 //本地卡片扣款校验数据
	Charged             bool              `protobuf:"varint,17,opt,name=charged,proto3" json:"charged,omitempty"`                                                        //订单是否已经支付
	Confirmed           bool              `protobuf:"varint,18,opt,name=confirmed,proto3" json:"confirmed,omitempty"`                                                    //该订单是否经过后台确认
	ElecData            []byte            `protobuf:"bytes,19,opt,name=elecData,proto3" json:"elecData,omitempty"`                                                       //充电过程电量信息
	ChargeStartTime     int32             `protobuf:"varint,22,opt,name=chargeStartTime,proto3" json:"chargeStartTime,omitempty"`                                        //真正充电开始时间，时间戳，精度：秒
	ChargeStopTime      int32             `protobuf:"varint,23,opt,name=chargeStopTime,proto3" json:"chargeStopTime,omitempty"`                                          //充电结束时间，时间戳，精度：秒
	ReasonDesc          string            `protobuf:"bytes,24,opt,name=reason_desc,json=reasonDesc,proto3" json:"reason_desc,omitempty"`                                 //停止理由描述
	IsDisabledTimeStart bool              `protobuf:"varint,25,opt,name=is_disabled_time_start,json=isDisabledTimeStart,proto3" json:"is_disabled_time_start,omitempty"` // 是否禁用开始时间来找订单记录，如有的设备在启动通知报文中没有启动时间，这一项就要设置成true，如盛宏、优力特的设备
	StartSoc            uint32            `protobuf:"varint,26,opt,name=start_soc,json=startSoc,proto3" json:"start_soc,omitempty"`                                      //启动soc
	StopSoc             uint32            `protobuf:"varint,27,opt,name=stop_soc,json=stopSoc,proto3" json:"stop_soc,omitempty"`                                         //结束soc
	CalcCostByBackend   bool              `protobuf:"varint,28,opt,name=calc_cost_by_backend,json=calcCostByBackend,proto3" json:"calc_cost_by_backend,omitempty"`       // 后台计费
	ReservationId       int32             `protobuf:"varint,29,opt,name=reservationId,proto3" json:"reservationId,omitempty"`                                            //预约ID
	RemoteStartId       int32             `protobuf:"varint,30,opt,name=remoteStartId,proto3" json:"remoteStartId,omitempty"`
	EvseId              string            `protobuf:"bytes,31,opt,name=evseId,proto3" json:"evseId,omitempty"`
}

func (x *TransactionReq) Reset() {
	*x = TransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReq) ProtoMessage() {}

func (x *TransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReq.ProtoReflect.Descriptor instead.
func (*TransactionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{49}
}

func (x *TransactionReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *TransactionReq) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TransactionReq) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *TransactionReq) GetIdData() *IdToken {
	if x != nil {
		return x.IdData
	}
	return nil
}

func (x *TransactionReq) GetMode() AuthorizationMode {
	if x != nil {
		return x.Mode
	}
	return AuthorizationMode_AM_LocalPlug
}

func (x *TransactionReq) GetService() ServiceMode {
	if x != nil {
		return x.Service
	}
	return ServiceMode_SM_AutoCharge
}

func (x *TransactionReq) GetMeterStart() int32 {
	if x != nil {
		return x.MeterStart
	}
	return 0
}

func (x *TransactionReq) GetMeterStop() int32 {
	if x != nil {
		return x.MeterStop
	}
	return 0
}

func (x *TransactionReq) GetTimeStart() int32 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *TransactionReq) GetTimeStop() int32 {
	if x != nil {
		return x.TimeStop
	}
	return 0
}

func (x *TransactionReq) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *TransactionReq) GetReason() StopReason {
	if x != nil {
		return x.Reason
	}
	return StopReason_SR_Normal
}

func (x *TransactionReq) GetCost() *Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *TransactionReq) GetDeduction() int32 {
	if x != nil {
		return x.Deduction
	}
	return 0
}

func (x *TransactionReq) GetTAC() string {
	if x != nil {
		return x.TAC
	}
	return ""
}

func (x *TransactionReq) GetCharged() bool {
	if x != nil {
		return x.Charged
	}
	return false
}

func (x *TransactionReq) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *TransactionReq) GetElecData() []byte {
	if x != nil {
		return x.ElecData
	}
	return nil
}

func (x *TransactionReq) GetChargeStartTime() int32 {
	if x != nil {
		return x.ChargeStartTime
	}
	return 0
}

func (x *TransactionReq) GetChargeStopTime() int32 {
	if x != nil {
		return x.ChargeStopTime
	}
	return 0
}

func (x *TransactionReq) GetReasonDesc() string {
	if x != nil {
		return x.ReasonDesc
	}
	return ""
}

func (x *TransactionReq) GetIsDisabledTimeStart() bool {
	if x != nil {
		return x.IsDisabledTimeStart
	}
	return false
}

func (x *TransactionReq) GetStartSoc() uint32 {
	if x != nil {
		return x.StartSoc
	}
	return 0
}

func (x *TransactionReq) GetStopSoc() uint32 {
	if x != nil {
		return x.StopSoc
	}
	return 0
}

func (x *TransactionReq) GetCalcCostByBackend() bool {
	if x != nil {
		return x.CalcCostByBackend
	}
	return false
}

func (x *TransactionReq) GetReservationId() int32 {
	if x != nil {
		return x.ReservationId
	}
	return 0
}

func (x *TransactionReq) GetRemoteStartId() int32 {
	if x != nil {
		return x.RemoteStartId
	}
	return 0
}

func (x *TransactionReq) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

//*
//TransactionConf
//离线记录上送回复
type TransactionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`    //状态
	RecordId string `protobuf:"bytes,2,opt,name=recordId,proto3" json:"recordId,omitempty"` //回复的设备订单号
}

func (x *TransactionConf) Reset() {
	*x = TransactionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionConf) ProtoMessage() {}

func (x *TransactionConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionConf.ProtoReflect.Descriptor instead.
func (*TransactionConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{50}
}

func (x *TransactionConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionConf) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

//*
//SampledValue
//“系统信息遥测”，遥测量定义。
type SampledValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurand int32  `protobuf:"varint,1,opt,name=measurand,proto3" json:"measurand,omitempty"` // 遥测变量代码
	VendorEx  string `protobuf:"bytes,2,opt,name=vendorEx,proto3" json:"vendorEx,omitempty"`    // 供应商扩展遥测变量名
	Value     int32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`         // 遥测值
	Rate      int32  `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`           // 倍率(默认值是1)
}

func (x *SampledValue) Reset() {
	*x = SampledValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampledValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampledValue) ProtoMessage() {}

func (x *SampledValue) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampledValue.ProtoReflect.Descriptor instead.
func (*SampledValue) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{51}
}

func (x *SampledValue) GetMeasurand() int32 {
	if x != nil {
		return x.Measurand
	}
	return 0
}

func (x *SampledValue) GetVendorEx() string {
	if x != nil {
		return x.VendorEx
	}
	return ""
}

func (x *SampledValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SampledValue) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

//*
//TelemetryReq
//数据收集
type TelemetryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component     Components      `protobuf:"varint,1,opt,name=component,proto3,enum=Goiot.Protocol.Charger.Components" json:"component,omitempty"` //组件
	ConnectorId   string          `protobuf:"bytes,2,opt,name=connectorId,proto3" json:"connectorId,omitempty"`                                     //充电接口，若测量组件属于某个充电接口，如某个接口的电表，填对应的充电接口号
	EvseId        string          `protobuf:"bytes,3,opt,name=evseId,proto3" json:"evseId,omitempty"`                                               // 设备
	Values        []*SampledValue `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`                                               //遥测值集合
	WarningBitmap uint64          `protobuf:"varint,6,opt,name=warningBitmap,proto3" json:"warningBitmap,omitempty"`                                //故障告警位表，此组件当前所有告警位标志
	RecordId      string          `protobuf:"bytes,7,opt,name=recordId,proto3" json:"recordId,omitempty"`                                           //跟订单相关的遥测信息，才有recordId相关联充电订单号
}

func (x *TelemetryReq) Reset() {
	*x = TelemetryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryReq) ProtoMessage() {}

func (x *TelemetryReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryReq.ProtoReflect.Descriptor instead.
func (*TelemetryReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{52}
}

func (x *TelemetryReq) GetComponent() Components {
	if x != nil {
		return x.Component
	}
	return Components_CP_None
}

func (x *TelemetryReq) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *TelemetryReq) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

func (x *TelemetryReq) GetValues() []*SampledValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TelemetryReq) GetWarningBitmap() uint64 {
	if x != nil {
		return x.WarningBitmap
	}
	return 0
}

func (x *TelemetryReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

//*
// WarningReq
// 上报离线订单请求”消息上报充电记录定义
type WarningReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//WarningCode code = 1;    //告警代码
	Code        int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                                  //告警代码
	VendorEx    string       `protobuf:"bytes,2,opt,name=vendorEx,proto3" json:"vendorEx,omitempty"`                                           //供应商扩展告警代码
	Level       WarningLevel `protobuf:"varint,3,opt,name=level,proto3,enum=Goiot.Protocol.Charger.WarningLevel" json:"level,omitempty"`       //指定告警等级
	Component   Components   `protobuf:"varint,4,opt,name=component,proto3,enum=Goiot.Protocol.Charger.Components" json:"component,omitempty"` //告警所属的组件，组件包括系统，计费控制单元，充电控制单元，电源模块，BMS等
	RecordId    string       `protobuf:"bytes,5,opt,name=recordId,proto3" json:"recordId,omitempty"`                                           //告警所关联的充电会话记录号
	Info        string       `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`                                                   //告警信息。对于供应商自定义的告警，可以在此填充告警相关信息。
	ConnectorId int32        `protobuf:"varint,8,opt,name=connectorId,proto3" json:"connectorId,omitempty"`                                    //充电接口号
	ComponentId int32        `protobuf:"varint,9,opt,name=componentId,proto3" json:"componentId,omitempty"`                                    //组件号
	Ttl         int32        `protobuf:"varint,10,opt,name=ttl,proto3" json:"ttl,omitempty"`                                                   // -1 永远存储; 0  删除告警; >0 存储告警时长(秒),超过自动解除告警
	EventId     uint64       `protobuf:"varint,11,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                            //事件ID
	Time        int32        `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`                                                 //告警时间
}

func (x *WarningReq) Reset() {
	*x = WarningReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningReq) ProtoMessage() {}

func (x *WarningReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningReq.ProtoReflect.Descriptor instead.
func (*WarningReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{53}
}

func (x *WarningReq) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *WarningReq) GetVendorEx() string {
	if x != nil {
		return x.VendorEx
	}
	return ""
}

func (x *WarningReq) GetLevel() WarningLevel {
	if x != nil {
		return x.Level
	}
	return WarningLevel_WL_Critical
}

func (x *WarningReq) GetComponent() Components {
	if x != nil {
		return x.Component
	}
	return Components_CP_None
}

func (x *WarningReq) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *WarningReq) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *WarningReq) GetConnectorId() int32 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *WarningReq) GetComponentId() int32 {
	if x != nil {
		return x.ComponentId
	}
	return 0
}

func (x *WarningReq) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *WarningReq) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *WarningReq) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

//*
// WarningConf
type WarningConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WarningConf) Reset() {
	*x = WarningConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningConf) ProtoMessage() {}

func (x *WarningConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningConf.ProtoReflect.Descriptor instead.
func (*WarningConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{54}
}

//*
//GetTransactionsReq
//获取离线订单请求
type GetTransactionsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectorId int32 `protobuf:"varint,1,opt,name=connectorId,proto3" json:"connectorId,omitempty"` //指定充电接口
	// 0-所有接口（此字段未指定时默认）
	// 非0-指定接口
	Level int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"` //指定已结算或未结算离线订单记录
	// 0-当前订单(此字段未指定时默认)
	// 1-离线未结算订单
	// 2-所有订单
	StartTime int32 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"` //指定记录开始时间,时间戳，精度：秒
	EndTime   int32 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`     //指定记录结束时间,时间戳，精度：秒
}

func (x *GetTransactionsReq) Reset() {
	*x = GetTransactionsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsReq) ProtoMessage() {}

func (x *GetTransactionsReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsReq.ProtoReflect.Descriptor instead.
func (*GetTransactionsReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{55}
}

func (x *GetTransactionsReq) GetConnectorId() int32 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *GetTransactionsReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetTransactionsReq) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTransactionsReq) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

//*
//GetTransactionsConf
//获取离线订单应答
type GetTransactionsConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"` //总记录数。充电桩返回中心平台通过“获取离线订单请求”将获取的记录总数。
}

func (x *GetTransactionsConf) Reset() {
	*x = GetTransactionsConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsConf) ProtoMessage() {}

func (x *GetTransactionsConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsConf.ProtoReflect.Descriptor instead.
func (*GetTransactionsConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{56}
}

func (x *GetTransactionsConf) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//*
//GetWarningReq
//获取告警记录请求
type GetWarningReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level     WarningLevel `protobuf:"varint,1,opt,name=level,proto3,enum=Goiot.Protocol.Charger.WarningLevel" json:"level,omitempty"` //指定要获取的告警记录的告警等级
	StartTime int32        `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`                                  //指定告警开始时间,时间戳，精度：秒
	EndTime   int32        `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`                                      //指定告警结束时间,时间戳，精度：秒
}

func (x *GetWarningReq) Reset() {
	*x = GetWarningReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWarningReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWarningReq) ProtoMessage() {}

func (x *GetWarningReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWarningReq.ProtoReflect.Descriptor instead.
func (*GetWarningReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{57}
}

func (x *GetWarningReq) GetLevel() WarningLevel {
	if x != nil {
		return x.Level
	}
	return WarningLevel_WL_Critical
}

func (x *GetWarningReq) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetWarningReq) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

//*
//GetWarningConf
//获取告警记录应答
type GetWarningConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"` //总记录数
}

func (x *GetWarningConf) Reset() {
	*x = GetWarningConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWarningConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWarningConf) ProtoMessage() {}

func (x *GetWarningConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWarningConf.ProtoReflect.Descriptor instead.
func (*GetWarningConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{58}
}

func (x *GetWarningConf) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

//*
// GetBaseReportConf
// 获取基本报告.应答
type GetBaseReportConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` //状态,0：接受，1：拒绝，2：请求项目不支持，3：请求项目不存在
}

func (x *GetBaseReportConf) Reset() {
	*x = GetBaseReportConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseReportConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseReportConf) ProtoMessage() {}

func (x *GetBaseReportConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseReportConf.ProtoReflect.Descriptor instead.
func (*GetBaseReportConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{59}
}

func (x *GetBaseReportConf) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//*
// GetBaseReportReq
// 获取基本报告.请求
type GetBaseReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32                               `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` //请求ID
	Type      GetBaseReportReq_ReportBaseEnumType `protobuf:"varint,2,opt,name=type,proto3,enum=Goiot.Protocol.Charger.GetBaseReportReq_ReportBaseEnumType" json:"type,omitempty"`
}

func (x *GetBaseReportReq) Reset() {
	*x = GetBaseReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseReportReq) ProtoMessage() {}

func (x *GetBaseReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseReportReq.ProtoReflect.Descriptor instead.
func (*GetBaseReportReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{60}
}

func (x *GetBaseReportReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GetBaseReportReq) GetType() GetBaseReportReq_ReportBaseEnumType {
	if x != nil {
		return x.Type
	}
	return GetBaseReportReq_ConfigurationInventory
}

//*
// NotifyReportReq
// 报告上报.请求
type NotifyReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId  int32             `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`    //请求ID
	GenerateAt int32             `protobuf:"varint,2,opt,name=generate_at,json=generateAt,proto3" json:"generate_at,omitempty"` //生成时间
	Tbc        bool              `protobuf:"varint,3,opt,name=tbc,proto3" json:"tbc,omitempty"`                                 //是否还有没传完的报文
	Seq        int32             `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`                                 //传输序列，第一帧是0
	ReportData []*ReportDataType `protobuf:"bytes,5,rep,name=reportData,proto3" json:"reportData,omitempty"`                    //上报的数据
}

func (x *NotifyReportReq) Reset() {
	*x = NotifyReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyReportReq) ProtoMessage() {}

func (x *NotifyReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyReportReq.ProtoReflect.Descriptor instead.
func (*NotifyReportReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{61}
}

func (x *NotifyReportReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *NotifyReportReq) GetGenerateAt() int32 {
	if x != nil {
		return x.GenerateAt
	}
	return 0
}

func (x *NotifyReportReq) GetTbc() bool {
	if x != nil {
		return x.Tbc
	}
	return false
}

func (x *NotifyReportReq) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *NotifyReportReq) GetReportData() []*ReportDataType {
	if x != nil {
		return x.ReportData
	}
	return nil
}

type ReportDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component         *ComponentType           `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`                 //组件
	Variable          *VariableType            `protobuf:"bytes,2,opt,name=variable,proto3" json:"variable,omitempty"`                   //变量
	VariableAttribute []*VariableAttributeType `protobuf:"bytes,3,rep,name=variableAttribute,proto3" json:"variableAttribute,omitempty"` //变量属性
}

func (x *ReportDataType) Reset() {
	*x = ReportDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDataType) ProtoMessage() {}

func (x *ReportDataType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDataType.ProtoReflect.Descriptor instead.
func (*ReportDataType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{62}
}

func (x *ReportDataType) GetComponent() *ComponentType {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ReportDataType) GetVariable() *VariableType {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *ReportDataType) GetVariableAttribute() []*VariableAttributeType {
	if x != nil {
		return x.VariableAttribute
	}
	return nil
}

type ComponentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                   //名称，比如风扇
	Instance    string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`           //可选，实例名称，比如风扇1、风扇2等
	EvseId      string `protobuf:"bytes,3,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"` //可选，默认为0，0代表是设备
	ConnectorId string `protobuf:"bytes,4,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`
}

func (x *ComponentType) Reset() {
	*x = ComponentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentType) ProtoMessage() {}

func (x *ComponentType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentType.ProtoReflect.Descriptor instead.
func (*ComponentType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{63}
}

func (x *ComponentType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentType) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *ComponentType) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

func (x *ComponentType) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

type VariableType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         //名称，比如转速、电流
	Instance string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"` //可选,实例名称，比如风扇1、风扇2等
}

func (x *VariableType) Reset() {
	*x = VariableType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableType) ProtoMessage() {}

func (x *VariableType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableType.ProtoReflect.Descriptor instead.
func (*VariableType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{64}
}

func (x *VariableType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableType) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

type VariableAttributeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`             //变量类型
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`           //变量的值
	Mutability string `protobuf:"bytes,3,opt,name=mutability,proto3" json:"mutability,omitempty"` //变量权限
}

func (x *VariableAttributeType) Reset() {
	*x = VariableAttributeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableAttributeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableAttributeType) ProtoMessage() {}

func (x *VariableAttributeType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableAttributeType.ProtoReflect.Descriptor instead.
func (*VariableAttributeType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{65}
}

func (x *VariableAttributeType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VariableAttributeType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *VariableAttributeType) GetMutability() string {
	if x != nil {
		return x.Mutability
	}
	return ""
}

//*
// NotifyReportConf
// 上报回复
type NotifyReportConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyReportConf) Reset() {
	*x = NotifyReportConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyReportConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyReportConf) ProtoMessage() {}

func (x *NotifyReportConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyReportConf.ProtoReflect.Descriptor instead.
func (*NotifyReportConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{66}
}

//*
// SetVariablesReq
// 设置变量.请求
type SetVariablesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetVariableData []*SetVariablesReq_SetVariableData `protobuf:"bytes,1,rep,name=setVariableData,proto3" json:"setVariableData,omitempty"` //变量
}

func (x *SetVariablesReq) Reset() {
	*x = SetVariablesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVariablesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariablesReq) ProtoMessage() {}

func (x *SetVariablesReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariablesReq.ProtoReflect.Descriptor instead.
func (*SetVariablesReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{67}
}

func (x *SetVariablesReq) GetSetVariableData() []*SetVariablesReq_SetVariableData {
	if x != nil {
		return x.SetVariableData
	}
	return nil
}

//*
// SetVariablesConf
// 设置变量.应答
type SetVariablesConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetVariablesConf) Reset() {
	*x = SetVariablesConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVariablesConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariablesConf) ProtoMessage() {}

func (x *SetVariablesConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariablesConf.ProtoReflect.Descriptor instead.
func (*SetVariablesConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{68}
}

//*
// GetLogReq
// 获取日志.请求
type GetLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogType       GetLogReq_LogType            `protobuf:"varint,1,opt,name=logType,proto3,enum=Goiot.Protocol.Charger.GetLogReq_LogType" json:"logType,omitempty"`
	RequestId     int32                        `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`             //请求ID
	Retries       int32                        `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`                                  //重试次数
	RetryInterval int32                        `protobuf:"varint,4,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"` //重试间隔
	Log           *GetLogReq_LogParametersType `protobuf:"bytes,5,opt,name=log,proto3" json:"log,omitempty"`                                           //日志请求参数
}

func (x *GetLogReq) Reset() {
	*x = GetLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogReq) ProtoMessage() {}

func (x *GetLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogReq.ProtoReflect.Descriptor instead.
func (*GetLogReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{69}
}

func (x *GetLogReq) GetLogType() GetLogReq_LogType {
	if x != nil {
		return x.LogType
	}
	return GetLogReq_DiagnosticsLog
}

func (x *GetLogReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GetLogReq) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *GetLogReq) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *GetLogReq) GetLog() *GetLogReq_LogParametersType {
	if x != nil {
		return x.Log
	}
	return nil
}

//*
// GetLogResp
// 获取日志.应答
type GetLogConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetLogConf_LogStatusEnumType `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.GetLogConf_LogStatusEnumType" json:"status,omitempty"`
}

func (x *GetLogConf) Reset() {
	*x = GetLogConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogConf) ProtoMessage() {}

func (x *GetLogConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogConf.ProtoReflect.Descriptor instead.
func (*GetLogConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{70}
}

func (x *GetLogConf) GetStatus() GetLogConf_LogStatusEnumType {
	if x != nil {
		return x.Status
	}
	return GetLogConf_Accepted
}

//*
// LogStatusNotificationReq
// 日志状态通知.请求
type LogStatusNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    LogStatusNotificationReq_UploadLogStatusEnumType `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.LogStatusNotificationReq_UploadLogStatusEnumType" json:"status,omitempty"` //状态
	RequestId int32                                            `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                                                       //请求id
}

func (x *LogStatusNotificationReq) Reset() {
	*x = LogStatusNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStatusNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStatusNotificationReq) ProtoMessage() {}

func (x *LogStatusNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStatusNotificationReq.ProtoReflect.Descriptor instead.
func (*LogStatusNotificationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{71}
}

func (x *LogStatusNotificationReq) GetStatus() LogStatusNotificationReq_UploadLogStatusEnumType {
	if x != nil {
		return x.Status
	}
	return LogStatusNotificationReq_BadMessage
}

func (x *LogStatusNotificationReq) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

//*
// LogStatusNotificationConf
// 日志状态通知.应答
type LogStatusNotificationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogStatusNotificationConf) Reset() {
	*x = LogStatusNotificationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStatusNotificationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStatusNotificationConf) ProtoMessage() {}

func (x *LogStatusNotificationConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStatusNotificationConf.ProtoReflect.Descriptor instead.
func (*LogStatusNotificationConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{72}
}

//*
// GetLocalListVersionRequest
// 获取本地授权列表版本.请求
type GetLocalListVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionNumber int32 `protobuf:"varint,1,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"` //版本号
}

func (x *GetLocalListVersionReq) Reset() {
	*x = GetLocalListVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalListVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalListVersionReq) ProtoMessage() {}

func (x *GetLocalListVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalListVersionReq.ProtoReflect.Descriptor instead.
func (*GetLocalListVersionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{73}
}

func (x *GetLocalListVersionReq) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

//*
// GetLocalListVersionConf
// 获取本地授权列表版本.应答
type GetLocalListVersionConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionNumber int32 `protobuf:"varint,1,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"` //版本号
}

func (x *GetLocalListVersionConf) Reset() {
	*x = GetLocalListVersionConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalListVersionConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalListVersionConf) ProtoMessage() {}

func (x *GetLocalListVersionConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalListVersionConf.ProtoReflect.Descriptor instead.
func (*GetLocalListVersionConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{74}
}

func (x *GetLocalListVersionConf) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

type IdTokenInfoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status AuthorizationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.AuthorizationStatus" json:"status,omitempty"`
}

func (x *IdTokenInfoType) Reset() {
	*x = IdTokenInfoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdTokenInfoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdTokenInfoType) ProtoMessage() {}

func (x *IdTokenInfoType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdTokenInfoType.ProtoReflect.Descriptor instead.
func (*IdTokenInfoType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{75}
}

func (x *IdTokenInfoType) GetStatus() AuthorizationStatus {
	if x != nil {
		return x.Status
	}
	return AuthorizationStatus_AS_Accepted
}

//IdTokenType 身份信息，OCPP以及新版本用
type IdTokenType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdToken string          `protobuf:"bytes,1,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	Type    IdTokenEnumType `protobuf:"varint,2,opt,name=type,proto3,enum=Goiot.Protocol.Charger.IdTokenEnumType" json:"type,omitempty"`
}

func (x *IdTokenType) Reset() {
	*x = IdTokenType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdTokenType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdTokenType) ProtoMessage() {}

func (x *IdTokenType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdTokenType.ProtoReflect.Descriptor instead.
func (*IdTokenType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{76}
}

func (x *IdTokenType) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *IdTokenType) GetType() IdTokenEnumType {
	if x != nil {
		return x.Type
	}
	return IdTokenEnumType_ITE_Central
}

//AuthorizationData 授权信息
type AuthorizationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdTokenInfo *IdTokenInfoType `protobuf:"bytes,1,opt,name=idTokenInfo,proto3" json:"idTokenInfo,omitempty"`
	IdToken     *IdTokenType     `protobuf:"bytes,2,opt,name=idToken,proto3" json:"idToken,omitempty"`
}

func (x *AuthorizationData) Reset() {
	*x = AuthorizationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationData) ProtoMessage() {}

func (x *AuthorizationData) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationData.ProtoReflect.Descriptor instead.
func (*AuthorizationData) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{77}
}

func (x *AuthorizationData) GetIdTokenInfo() *IdTokenInfoType {
	if x != nil {
		return x.IdTokenInfo
	}
	return nil
}

func (x *AuthorizationData) GetIdToken() *IdTokenType {
	if x != nil {
		return x.IdToken
	}
	return nil
}

//*
// SendLocalAuthorizationListReq
// 发送本地授权.请求
type SendLocalAuthorizationListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionNumber          int32                                        `protobuf:"varint,1,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`                                                                 //版本号
	UpdateType             SendLocalAuthorizationListReq_UpdateEnumType `protobuf:"varint,2,opt,name=update_type,json=updateType,proto3,enum=Goiot.Protocol.Charger.SendLocalAuthorizationListReq_UpdateEnumType" json:"update_type,omitempty"` //更新类型
	LocalAuthorizationList []*AuthorizationData                         `protobuf:"bytes,3,rep,name=local_authorization_list,json=localAuthorizationList,proto3" json:"local_authorization_list,omitempty"`                                     //授权列表
}

func (x *SendLocalAuthorizationListReq) Reset() {
	*x = SendLocalAuthorizationListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLocalAuthorizationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLocalAuthorizationListReq) ProtoMessage() {}

func (x *SendLocalAuthorizationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLocalAuthorizationListReq.ProtoReflect.Descriptor instead.
func (*SendLocalAuthorizationListReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{78}
}

func (x *SendLocalAuthorizationListReq) GetVersionNumber() int32 {
	if x != nil {
		return x.VersionNumber
	}
	return 0
}

func (x *SendLocalAuthorizationListReq) GetUpdateType() SendLocalAuthorizationListReq_UpdateEnumType {
	if x != nil {
		return x.UpdateType
	}
	return SendLocalAuthorizationListReq_Differential
}

func (x *SendLocalAuthorizationListReq) GetLocalAuthorizationList() []*AuthorizationData {
	if x != nil {
		return x.LocalAuthorizationList
	}
	return nil
}

//*
// SendLocalAuthorizationListConf
// 发送本地授权.应答
type SendLocalAuthorizationListConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendLocalAuthorizationListConf) Reset() {
	*x = SendLocalAuthorizationListConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLocalAuthorizationListConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLocalAuthorizationListConf) ProtoMessage() {}

func (x *SendLocalAuthorizationListConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLocalAuthorizationListConf.ProtoReflect.Descriptor instead.
func (*SendLocalAuthorizationListConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{79}
}

//*
// ReserveNowReq
// 预约充电.请求
type ReserveNowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                 //预约ID
	ExpiryDateTime int32        `protobuf:"varint,2,opt,name=expiry_date_time,json=expiryDateTime,proto3" json:"expiry_date_time,omitempty"` //过期时间
	ConnectorId    int32        `protobuf:"varint,3,opt,name=connector_id,json=connectorId,proto3" json:"connector_id,omitempty"`            //枪ID
	IdToken        *IdTokenType `protobuf:"bytes,4,opt,name=idToken,proto3" json:"idToken,omitempty"`                                        //客户信息
	ChargeTime     int32        `protobuf:"varint,5,opt,name=charge_time,json=chargeTime,proto3" json:"charge_time,omitempty"`               //启动充电的时间
}

func (x *ReserveNowReq) Reset() {
	*x = ReserveNowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveNowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveNowReq) ProtoMessage() {}

func (x *ReserveNowReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveNowReq.ProtoReflect.Descriptor instead.
func (*ReserveNowReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{80}
}

func (x *ReserveNowReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReserveNowReq) GetExpiryDateTime() int32 {
	if x != nil {
		return x.ExpiryDateTime
	}
	return 0
}

func (x *ReserveNowReq) GetConnectorId() int32 {
	if x != nil {
		return x.ConnectorId
	}
	return 0
}

func (x *ReserveNowReq) GetIdToken() *IdTokenType {
	if x != nil {
		return x.IdToken
	}
	return nil
}

func (x *ReserveNowReq) GetChargeTime() int32 {
	if x != nil {
		return x.ChargeTime
	}
	return 0
}

//*
// ReserveNowConf
// 预约充电.响应
type ReserveNowConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ReserveNowConf_Status `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.ReserveNowConf_Status" json:"status,omitempty"` //状态
}

func (x *ReserveNowConf) Reset() {
	*x = ReserveNowConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveNowConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveNowConf) ProtoMessage() {}

func (x *ReserveNowConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveNowConf.ProtoReflect.Descriptor instead.
func (*ReserveNowConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{81}
}

func (x *ReserveNowConf) GetStatus() ReserveNowConf_Status {
	if x != nil {
		return x.Status
	}
	return ReserveNowConf_Accepted
}

//*
// CancelReservationReq
// 取消预约充电.请求
type CancelReservationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //预约ID
}

func (x *CancelReservationReq) Reset() {
	*x = CancelReservationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReservationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationReq) ProtoMessage() {}

func (x *CancelReservationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationReq.ProtoReflect.Descriptor instead.
func (*CancelReservationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{82}
}

func (x *CancelReservationReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

//*
// CancelReservationConf
// 取消预约充电.响应
type CancelReservationConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status CancelReservationConf_Status `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.CancelReservationConf_Status" json:"status,omitempty"` //状态
}

func (x *CancelReservationConf) Reset() {
	*x = CancelReservationConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReservationConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationConf) ProtoMessage() {}

func (x *CancelReservationConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationConf.ProtoReflect.Descriptor instead.
func (*CancelReservationConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{83}
}

func (x *CancelReservationConf) GetStatus() CancelReservationConf_Status {
	if x != nil {
		return x.Status
	}
	return CancelReservationConf_Accepted
}

//*
// DataTransferReq
// 数据传输,请求
type DataTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId                        string                           `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`                                                                            // 生产商 默认Joysonquin
	MessageId                       string                           `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`                                                                         // 消息id 形如公司代号_功能名称_两位递增序列
	RemoteDiagnosisReq              *RemoteDiagnosisReq              `protobuf:"bytes,3,opt,name=remote_diagnosis_req,json=remoteDiagnosisReq,proto3" json:"remote_diagnosis_req,omitempty"`                                            // 具体要传输的数据, 此数据为远程诊断数据
	ReserveStopTransactionReq       *ReserveStopTransactionReq       `protobuf:"bytes,4,opt,name=reserve_stop_transaction_req,json=reserveStopTransactionReq,proto3" json:"reserve_stop_transaction_req,omitempty"`                     // 具体要传输的数据,此数据为预约停止充电数据
	CancelReserveStopTransactionReq *CancelReserveStopTransactionReq `protobuf:"bytes,5,opt,name=cancel_reserve_stop_transaction_req,json=cancelReserveStopTransactionReq,proto3" json:"cancel_reserve_stop_transaction_req,omitempty"` // 具体要传输的数据,此数据为取消预约停止充电数据
}

func (x *DataTransferReq) Reset() {
	*x = DataTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferReq) ProtoMessage() {}

func (x *DataTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferReq.ProtoReflect.Descriptor instead.
func (*DataTransferReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{84}
}

func (x *DataTransferReq) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *DataTransferReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *DataTransferReq) GetRemoteDiagnosisReq() *RemoteDiagnosisReq {
	if x != nil {
		return x.RemoteDiagnosisReq
	}
	return nil
}

func (x *DataTransferReq) GetReserveStopTransactionReq() *ReserveStopTransactionReq {
	if x != nil {
		return x.ReserveStopTransactionReq
	}
	return nil
}

func (x *DataTransferReq) GetCancelReserveStopTransactionReq() *CancelReserveStopTransactionReq {
	if x != nil {
		return x.CancelReserveStopTransactionReq
	}
	return nil
}

type RemoteDiagnosisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagType   string `protobuf:"bytes,1,opt,name=diagType,proto3" json:"diagType,omitempty"`     // 22-read_data_by_identifier 2E-write_data_by_identifier 31-routine_control 14-clear_diagnostic_information 4-vehicle_passthrough
	SendCanID  string `protobuf:"bytes,2,opt,name=sendCanID,proto3" json:"sendCanID,omitempty"`   // send canID
	SendLength string `protobuf:"bytes,3,opt,name=sendLength,proto3" json:"sendLength,omitempty"` // send data byte length
	SendData   string `protobuf:"bytes,4,opt,name=sendData,proto3" json:"sendData,omitempty"`     // send data
	RecvCanID  string `protobuf:"bytes,5,opt,name=recvCanID,proto3" json:"recvCanID,omitempty"`   // receive canID
}

func (x *RemoteDiagnosisReq) Reset() {
	*x = RemoteDiagnosisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDiagnosisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDiagnosisReq) ProtoMessage() {}

func (x *RemoteDiagnosisReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDiagnosisReq.ProtoReflect.Descriptor instead.
func (*RemoteDiagnosisReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{85}
}

func (x *RemoteDiagnosisReq) GetDiagType() string {
	if x != nil {
		return x.DiagType
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetSendCanID() string {
	if x != nil {
		return x.SendCanID
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetSendLength() string {
	if x != nil {
		return x.SendLength
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetSendData() string {
	if x != nil {
		return x.SendData
	}
	return ""
}

func (x *RemoteDiagnosisReq) GetRecvCanID() string {
	if x != nil {
		return x.RecvCanID
	}
	return ""
}

type RemoteDiagnosisResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanID     string `protobuf:"bytes,1,opt,name=canID,proto3" json:"canID,omitempty"`
	CanLength string `protobuf:"bytes,2,opt,name=canLength,proto3" json:"canLength,omitempty"`
	CanData   string `protobuf:"bytes,3,opt,name=canData,proto3" json:"canData,omitempty"`
}

func (x *RemoteDiagnosisResp) Reset() {
	*x = RemoteDiagnosisResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDiagnosisResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDiagnosisResp) ProtoMessage() {}

func (x *RemoteDiagnosisResp) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDiagnosisResp.ProtoReflect.Descriptor instead.
func (*RemoteDiagnosisResp) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{86}
}

func (x *RemoteDiagnosisResp) GetCanID() string {
	if x != nil {
		return x.CanID
	}
	return ""
}

func (x *RemoteDiagnosisResp) GetCanLength() string {
	if x != nil {
		return x.CanLength
	}
	return ""
}

func (x *RemoteDiagnosisResp) GetCanData() string {
	if x != nil {
		return x.CanData
	}
	return ""
}

type ReserveStopTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EvseId         int64  `protobuf:"varint,2,opt,name=evseId,proto3" json:"evseId,omitempty"`
	StopTime       int32  `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	ExpiryDateTime string `protobuf:"bytes,4,opt,name=expiryDateTime,proto3" json:"expiryDateTime,omitempty"`
	IdToken        *Token `protobuf:"bytes,5,opt,name=idToken,proto3" json:"idToken,omitempty"`
}

func (x *ReserveStopTransactionReq) Reset() {
	*x = ReserveStopTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveStopTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveStopTransactionReq) ProtoMessage() {}

func (x *ReserveStopTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveStopTransactionReq.ProtoReflect.Descriptor instead.
func (*ReserveStopTransactionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{87}
}

func (x *ReserveStopTransactionReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReserveStopTransactionReq) GetEvseId() int64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

func (x *ReserveStopTransactionReq) GetStopTime() int32 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *ReserveStopTransactionReq) GetExpiryDateTime() string {
	if x != nil {
		return x.ExpiryDateTime
	}
	return ""
}

func (x *ReserveStopTransactionReq) GetIdToken() *Token {
	if x != nil {
		return x.IdToken
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdToken string `protobuf:"bytes,1,opt,name=idToken,proto3" json:"idToken,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{88}
}

func (x *Token) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *Token) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

//*
// DataTransferConf
// 数据传输,应答
type DataTransferConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDiagnosisResp *RemoteDiagnosisResp `protobuf:"bytes,1,opt,name=remote_diagnosis_resp,json=remoteDiagnosisResp,proto3" json:"remote_diagnosis_resp,omitempty"` // 只返回data,状态判断直接在ac-ocpp中做
}

func (x *DataTransferConf) Reset() {
	*x = DataTransferConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTransferConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTransferConf) ProtoMessage() {}

func (x *DataTransferConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTransferConf.ProtoReflect.Descriptor instead.
func (*DataTransferConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{89}
}

func (x *DataTransferConf) GetRemoteDiagnosisResp() *RemoteDiagnosisResp {
	if x != nil {
		return x.RemoteDiagnosisResp
	}
	return nil
}

type CancelReserveStopTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservationId int32 `protobuf:"varint,1,opt,name=reservationId,proto3" json:"reservationId,omitempty"`
}

func (x *CancelReserveStopTransactionReq) Reset() {
	*x = CancelReserveStopTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReserveStopTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReserveStopTransactionReq) ProtoMessage() {}

func (x *CancelReserveStopTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReserveStopTransactionReq.ProtoReflect.Descriptor instead.
func (*CancelReserveStopTransactionReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{90}
}

func (x *CancelReserveStopTransactionReq) GetReservationId() int32 {
	if x != nil {
		return x.ReservationId
	}
	return 0
}

type StatusNotificationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备id 记住跟杨总的不一样
	EvseId string `protobuf:"bytes,1,opt,name=evseId,proto3" json:"evseId,omitempty"`
	// 枪id
	ConnectorId string `protobuf:"bytes,2,opt,name=connectorId,proto3" json:"connectorId,omitempty"`
	// 枪状态
	ConnectorState int32 `protobuf:"varint,3,opt,name=connectorState,proto3" json:"connectorState,omitempty"`
}

func (x *StatusNotificationReq) Reset() {
	*x = StatusNotificationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotificationReq) ProtoMessage() {}

func (x *StatusNotificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotificationReq.ProtoReflect.Descriptor instead.
func (*StatusNotificationReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{91}
}

func (x *StatusNotificationReq) GetEvseId() string {
	if x != nil {
		return x.EvseId
	}
	return ""
}

func (x *StatusNotificationReq) GetConnectorId() string {
	if x != nil {
		return x.ConnectorId
	}
	return ""
}

func (x *StatusNotificationReq) GetConnectorState() int32 {
	if x != nil {
		return x.ConnectorState
	}
	return 0
}

type GetReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component []*ComponentType `protobuf:"bytes,1,rep,name=component,proto3" json:"component,omitempty"`
}

func (x *GetReportReq) Reset() {
	*x = GetReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportReq) ProtoMessage() {}

func (x *GetReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportReq.ProtoReflect.Descriptor instead.
func (*GetReportReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{92}
}

func (x *GetReportReq) GetComponent() []*ComponentType {
	if x != nil {
		return x.Component
	}
	return nil
}

type GetReportConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetReportConf) Reset() {
	*x = GetReportConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportConf) ProtoMessage() {}

func (x *GetReportConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportConf.ProtoReflect.Descriptor instead.
func (*GetReportConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{93}
}

type GetVariablesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetVariablesData []*GetVariablesData `protobuf:"bytes,1,rep,name=getVariablesData,proto3" json:"getVariablesData,omitempty"`
}

func (x *GetVariablesReq) Reset() {
	*x = GetVariablesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVariablesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariablesReq) ProtoMessage() {}

func (x *GetVariablesReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariablesReq.ProtoReflect.Descriptor instead.
func (*GetVariablesReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{94}
}

func (x *GetVariablesReq) GetGetVariablesData() []*GetVariablesData {
	if x != nil {
		return x.GetVariablesData
	}
	return nil
}

type GetVariablesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component *ComponentType `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	Variable  string         `protobuf:"bytes,2,opt,name=variable,proto3" json:"variable,omitempty"`
}

func (x *GetVariablesData) Reset() {
	*x = GetVariablesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVariablesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariablesData) ProtoMessage() {}

func (x *GetVariablesData) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariablesData.ProtoReflect.Descriptor instead.
func (*GetVariablesData) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{95}
}

func (x *GetVariablesData) GetComponent() *ComponentType {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *GetVariablesData) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

type GetVariablesConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetVariablesResult []*GetVariablesResult `protobuf:"bytes,1,rep,name=getVariablesResult,proto3" json:"getVariablesResult,omitempty"`
}

func (x *GetVariablesConf) Reset() {
	*x = GetVariablesConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVariablesConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariablesConf) ProtoMessage() {}

func (x *GetVariablesConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariablesConf.ProtoReflect.Descriptor instead.
func (*GetVariablesConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{96}
}

func (x *GetVariablesConf) GetGetVariablesResult() []*GetVariablesResult {
	if x != nil {
		return x.GetVariablesResult
	}
	return nil
}

type GetVariablesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component      *ComponentType `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	Variable       *VariableType  `protobuf:"bytes,2,opt,name=variable,proto3" json:"variable,omitempty"`
	AttributeValue string         `protobuf:"bytes,3,opt,name=attributeValue,proto3" json:"attributeValue,omitempty"`
}

func (x *GetVariablesResult) Reset() {
	*x = GetVariablesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVariablesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariablesResult) ProtoMessage() {}

func (x *GetVariablesResult) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariablesResult.ProtoReflect.Descriptor instead.
func (*GetVariablesResult) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{97}
}

func (x *GetVariablesResult) GetComponent() *ComponentType {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *GetVariablesResult) GetVariable() *VariableType {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *GetVariablesResult) GetAttributeValue() string {
	if x != nil {
		return x.AttributeValue
	}
	return ""
}

type SetChargingProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargingProfile *ChargingProfile `protobuf:"bytes,1,opt,name=chargingProfile,proto3" json:"chargingProfile,omitempty"`
}

func (x *SetChargingProfileReq) Reset() {
	*x = SetChargingProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChargingProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChargingProfileReq) ProtoMessage() {}

func (x *SetChargingProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChargingProfileReq.ProtoReflect.Descriptor instead.
func (*SetChargingProfileReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{98}
}

func (x *SetChargingProfileReq) GetChargingProfile() *ChargingProfile {
	if x != nil {
		return x.ChargingProfile
	}
	return nil
}

type ChargingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidFrom        string              `protobuf:"bytes,3,opt,name=validFrom,proto3" json:"validFrom,omitempty"`
	ValidTo          string              `protobuf:"bytes,4,opt,name=validTo,proto3" json:"validTo,omitempty"`
	TransactionID    string              `protobuf:"bytes,5,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	ChargingSchedule []*ChargingSchedule `protobuf:"bytes,6,rep,name=chargingSchedule,proto3" json:"chargingSchedule,omitempty"`
}

func (x *ChargingProfile) Reset() {
	*x = ChargingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingProfile) ProtoMessage() {}

func (x *ChargingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingProfile.ProtoReflect.Descriptor instead.
func (*ChargingProfile) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{99}
}

func (x *ChargingProfile) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChargingProfile) GetValidFrom() string {
	if x != nil {
		return x.ValidFrom
	}
	return ""
}

func (x *ChargingProfile) GetValidTo() string {
	if x != nil {
		return x.ValidTo
	}
	return ""
}

func (x *ChargingProfile) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ChargingProfile) GetChargingSchedule() []*ChargingSchedule {
	if x != nil {
		return x.ChargingSchedule
	}
	return nil
}

type ChargingSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargingRateUnit       ChargingRateUnit               `protobuf:"varint,1,opt,name=chargingRateUnit,proto3,enum=Goiot.Protocol.Charger.ChargingRateUnit" json:"chargingRateUnit,omitempty"`
	ChargingSchedulePeriod []*ChargingSchedule_PeriodType `protobuf:"bytes,2,rep,name=chargingSchedulePeriod,proto3" json:"chargingSchedulePeriod,omitempty"`
}

func (x *ChargingSchedule) Reset() {
	*x = ChargingSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingSchedule) ProtoMessage() {}

func (x *ChargingSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingSchedule.ProtoReflect.Descriptor instead.
func (*ChargingSchedule) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{100}
}

func (x *ChargingSchedule) GetChargingRateUnit() ChargingRateUnit {
	if x != nil {
		return x.ChargingRateUnit
	}
	return ChargingRateUnit_W
}

func (x *ChargingSchedule) GetChargingSchedulePeriod() []*ChargingSchedule_PeriodType {
	if x != nil {
		return x.ChargingSchedulePeriod
	}
	return nil
}

type SalesTariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SalesTariffDescription string               `protobuf:"bytes,2,opt,name=salesTariffDescription,proto3" json:"salesTariffDescription,omitempty"`
	NumEPriceLevels        int32                `protobuf:"varint,3,opt,name=numEPriceLevels,proto3" json:"numEPriceLevels,omitempty"`
	Entry                  []*SalesTariff_Entry `protobuf:"bytes,4,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *SalesTariff) Reset() {
	*x = SalesTariff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesTariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesTariff) ProtoMessage() {}

func (x *SalesTariff) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesTariff.ProtoReflect.Descriptor instead.
func (*SalesTariff) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{101}
}

func (x *SalesTariff) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesTariff) GetSalesTariffDescription() string {
	if x != nil {
		return x.SalesTariffDescription
	}
	return ""
}

func (x *SalesTariff) GetNumEPriceLevels() int32 {
	if x != nil {
		return x.NumEPriceLevels
	}
	return 0
}

func (x *SalesTariff) GetEntry() []*SalesTariff_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type SetChargingProfileConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ChargingProfile_Status `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.ChargingProfile_Status" json:"status,omitempty"`
}

func (x *SetChargingProfileConf) Reset() {
	*x = SetChargingProfileConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChargingProfileConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChargingProfileConf) ProtoMessage() {}

func (x *SetChargingProfileConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChargingProfileConf.ProtoReflect.Descriptor instead.
func (*SetChargingProfileConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{102}
}

func (x *SetChargingProfileConf) GetStatus() ChargingProfile_Status {
	if x != nil {
		return x.Status
	}
	return ChargingProfile_Accepted
}

type ClearChargingProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClearChargingProfile *ClearChargingProfile `protobuf:"bytes,2,opt,name=clearChargingProfile,proto3" json:"clearChargingProfile,omitempty"`
}

func (x *ClearChargingProfileReq) Reset() {
	*x = ClearChargingProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearChargingProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearChargingProfileReq) ProtoMessage() {}

func (x *ClearChargingProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearChargingProfileReq.ProtoReflect.Descriptor instead.
func (*ClearChargingProfileReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{103}
}

func (x *ClearChargingProfileReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClearChargingProfileReq) GetClearChargingProfile() *ClearChargingProfile {
	if x != nil {
		return x.ClearChargingProfile
	}
	return nil
}

type ClearChargingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purpose    ChargingProfile_Purpose `protobuf:"varint,1,opt,name=purpose,proto3,enum=Goiot.Protocol.Charger.ChargingProfile_Purpose" json:"purpose,omitempty"`
	StackLevel int32                   `protobuf:"varint,2,opt,name=stackLevel,proto3" json:"stackLevel,omitempty"`
}

func (x *ClearChargingProfile) Reset() {
	*x = ClearChargingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearChargingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearChargingProfile) ProtoMessage() {}

func (x *ClearChargingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearChargingProfile.ProtoReflect.Descriptor instead.
func (*ClearChargingProfile) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{104}
}

func (x *ClearChargingProfile) GetPurpose() ChargingProfile_Purpose {
	if x != nil {
		return x.Purpose
	}
	return ChargingProfile_ChargingStationExternalConstraints
}

func (x *ClearChargingProfile) GetStackLevel() int32 {
	if x != nil {
		return x.StackLevel
	}
	return 0
}

type ClearChargingProfileConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ClearChargingProfile_Status `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.ClearChargingProfile_Status" json:"status,omitempty"`
}

func (x *ClearChargingProfileConf) Reset() {
	*x = ClearChargingProfileConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearChargingProfileConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearChargingProfileConf) ProtoMessage() {}

func (x *ClearChargingProfileConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearChargingProfileConf.ProtoReflect.Descriptor instead.
func (*ClearChargingProfileConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{105}
}

func (x *ClearChargingProfileConf) GetStatus() ClearChargingProfile_Status {
	if x != nil {
		return x.Status
	}
	return ClearChargingProfile_Accepted
}

type GetChargingProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64                     `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Criterion *ChargingProfilesCriterion `protobuf:"bytes,2,opt,name=criterion,proto3" json:"criterion,omitempty"`
}

func (x *GetChargingProfilesReq) Reset() {
	*x = GetChargingProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChargingProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChargingProfilesReq) ProtoMessage() {}

func (x *GetChargingProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChargingProfilesReq.ProtoReflect.Descriptor instead.
func (*GetChargingProfilesReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{106}
}

func (x *GetChargingProfilesReq) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *GetChargingProfilesReq) GetCriterion() *ChargingProfilesCriterion {
	if x != nil {
		return x.Criterion
	}
	return nil
}

type GetChargingProfilesConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GetChargingProfilesStatus `protobuf:"varint,1,opt,name=status,proto3,enum=Goiot.Protocol.Charger.GetChargingProfilesStatus" json:"status,omitempty"`
}

func (x *GetChargingProfilesConf) Reset() {
	*x = GetChargingProfilesConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChargingProfilesConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChargingProfilesConf) ProtoMessage() {}

func (x *GetChargingProfilesConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChargingProfilesConf.ProtoReflect.Descriptor instead.
func (*GetChargingProfilesConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{107}
}

func (x *GetChargingProfilesConf) GetStatus() GetChargingProfilesStatus {
	if x != nil {
		return x.Status
	}
	return GetChargingProfilesStatus_Accepted
}

type ChargingProfilesCriterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *ChargingProfilesCriterion) Reset() {
	*x = ChargingProfilesCriterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingProfilesCriterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingProfilesCriterion) ProtoMessage() {}

func (x *ChargingProfilesCriterion) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingProfilesCriterion.ProtoReflect.Descriptor instead.
func (*ChargingProfilesCriterion) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{108}
}

func (x *ChargingProfilesCriterion) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

type ReportChargingProfilesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tbc             bool               `protobuf:"varint,1,opt,name=tbc,proto3" json:"tbc,omitempty"`
	ChargingProfile []*ChargingProfile `protobuf:"bytes,2,rep,name=chargingProfile,proto3" json:"chargingProfile,omitempty"`
}

func (x *ReportChargingProfilesReq) Reset() {
	*x = ReportChargingProfilesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportChargingProfilesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportChargingProfilesReq) ProtoMessage() {}

func (x *ReportChargingProfilesReq) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportChargingProfilesReq.ProtoReflect.Descriptor instead.
func (*ReportChargingProfilesReq) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{109}
}

func (x *ReportChargingProfilesReq) GetTbc() bool {
	if x != nil {
		return x.Tbc
	}
	return false
}

func (x *ReportChargingProfilesReq) GetChargingProfile() []*ChargingProfile {
	if x != nil {
		return x.ChargingProfile
	}
	return nil
}

type ReportChargingProfilesConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportChargingProfilesConf) Reset() {
	*x = ReportChargingProfilesConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportChargingProfilesConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportChargingProfilesConf) ProtoMessage() {}

func (x *ReportChargingProfilesConf) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportChargingProfilesConf.ProtoReflect.Descriptor instead.
func (*ReportChargingProfilesConf) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{110}
}

type SetVariablesReq_SetVariableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeType  string         `protobuf:"bytes,1,opt,name=attributeType,proto3" json:"attributeType,omitempty"`   //类型, Target,MinSet,MaxSet,Actual(Default)
	AttributeValue string         `protobuf:"bytes,2,opt,name=attributeValue,proto3" json:"attributeValue,omitempty"` //值
	Component      *ComponentType `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`           //组件
	Variable       *VariableType  `protobuf:"bytes,4,opt,name=variable,proto3" json:"variable,omitempty"`             //变量
}

func (x *SetVariablesReq_SetVariableData) Reset() {
	*x = SetVariablesReq_SetVariableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVariablesReq_SetVariableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariablesReq_SetVariableData) ProtoMessage() {}

func (x *SetVariablesReq_SetVariableData) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariablesReq_SetVariableData.ProtoReflect.Descriptor instead.
func (*SetVariablesReq_SetVariableData) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{67, 0}
}

func (x *SetVariablesReq_SetVariableData) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *SetVariablesReq_SetVariableData) GetAttributeValue() string {
	if x != nil {
		return x.AttributeValue
	}
	return ""
}

func (x *SetVariablesReq_SetVariableData) GetComponent() *ComponentType {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *SetVariablesReq_SetVariableData) GetVariable() *VariableType {
	if x != nil {
		return x.Variable
	}
	return nil
}

type GetLogReq_LogParametersType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteLocation string `protobuf:"bytes,1,opt,name=remote_location,json=remoteLocation,proto3" json:"remote_location,omitempty"` //地址
}

func (x *GetLogReq_LogParametersType) Reset() {
	*x = GetLogReq_LogParametersType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogReq_LogParametersType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogReq_LogParametersType) ProtoMessage() {}

func (x *GetLogReq_LogParametersType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogReq_LogParametersType.ProtoReflect.Descriptor instead.
func (*GetLogReq_LogParametersType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{69, 0}
}

func (x *GetLogReq_LogParametersType) GetRemoteLocation() string {
	if x != nil {
		return x.RemoteLocation
	}
	return ""
}

type ChargingSchedule_PeriodType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  string  `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Limit float64 `protobuf:"fixed64,2,opt,name=limit,proto3" json:"limit,omitempty"`
	To    string  `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ChargingSchedule_PeriodType) Reset() {
	*x = ChargingSchedule_PeriodType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingSchedule_PeriodType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingSchedule_PeriodType) ProtoMessage() {}

func (x *ChargingSchedule_PeriodType) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingSchedule_PeriodType.ProtoReflect.Descriptor instead.
func (*ChargingSchedule_PeriodType) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{100, 0}
}

func (x *ChargingSchedule_PeriodType) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ChargingSchedule_PeriodType) GetLimit() float64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ChargingSchedule_PeriodType) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type SalesTariff_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EPriceLevel     uint32                         `protobuf:"varint,1,opt,name=ePriceLevel,proto3" json:"ePriceLevel,omitempty"`
	Start           int32                          `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"` // 现在的时间 精确到秒
	Duration        int32                          `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	ConsumptionCost []*SalesTariff_ConsumptionCost `protobuf:"bytes,4,rep,name=consumptionCost,proto3" json:"consumptionCost,omitempty"`
}

func (x *SalesTariff_Entry) Reset() {
	*x = SalesTariff_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesTariff_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesTariff_Entry) ProtoMessage() {}

func (x *SalesTariff_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesTariff_Entry.ProtoReflect.Descriptor instead.
func (*SalesTariff_Entry) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{101, 0}
}

func (x *SalesTariff_Entry) GetEPriceLevel() uint32 {
	if x != nil {
		return x.EPriceLevel
	}
	return 0
}

func (x *SalesTariff_Entry) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SalesTariff_Entry) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SalesTariff_Entry) GetConsumptionCost() []*SalesTariff_ConsumptionCost {
	if x != nil {
		return x.ConsumptionCost
	}
	return nil
}

type SalesTariff_ConsumptionCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartValue float64                             `protobuf:"fixed64,1,opt,name=startValue,proto3" json:"startValue,omitempty"`
	Cost       []*SalesTariff_ConsumptionCost_Cost `protobuf:"bytes,2,rep,name=cost,proto3" json:"cost,omitempty"`
}

func (x *SalesTariff_ConsumptionCost) Reset() {
	*x = SalesTariff_ConsumptionCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesTariff_ConsumptionCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesTariff_ConsumptionCost) ProtoMessage() {}

func (x *SalesTariff_ConsumptionCost) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesTariff_ConsumptionCost.ProtoReflect.Descriptor instead.
func (*SalesTariff_ConsumptionCost) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{101, 1}
}

func (x *SalesTariff_ConsumptionCost) GetStartValue() float64 {
	if x != nil {
		return x.StartValue
	}
	return 0
}

func (x *SalesTariff_ConsumptionCost) GetCost() []*SalesTariff_ConsumptionCost_Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

type SalesTariff_ConsumptionCost_Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind             SalesTariff_ConsumptionCost_Cost_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=Goiot.Protocol.Charger.SalesTariff_ConsumptionCost_Cost_Kind" json:"kind,omitempty"`
	Amount           int32                                 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountMultiplier int32                                 `protobuf:"varint,3,opt,name=amountMultiplier,proto3" json:"amountMultiplier,omitempty"`
}

func (x *SalesTariff_ConsumptionCost_Cost) Reset() {
	*x = SalesTariff_ConsumptionCost_Cost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_charger_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesTariff_ConsumptionCost_Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesTariff_ConsumptionCost_Cost) ProtoMessage() {}

func (x *SalesTariff_ConsumptionCost_Cost) ProtoReflect() protoreflect.Message {
	mi := &file_charger_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesTariff_ConsumptionCost_Cost.ProtoReflect.Descriptor instead.
func (*SalesTariff_ConsumptionCost_Cost) Descriptor() ([]byte, []int) {
	return file_charger_proto_rawDescGZIP(), []int{101, 1, 0}
}

func (x *SalesTariff_ConsumptionCost_Cost) GetKind() SalesTariff_ConsumptionCost_Cost_Kind {
	if x != nil {
		return x.Kind
	}
	return SalesTariff_ConsumptionCost_Cost_CarbonDioxideEmission
}

func (x *SalesTariff_ConsumptionCost_Cost) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SalesTariff_ConsumptionCost_Cost) GetAmountMultiplier() int32 {
	if x != nil {
		return x.AmountMultiplier
	}
	return 0
}

var File_charger_proto protoreflect.FileDescriptor

var file_charger_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x04, 0x41, 0x50, 0x44, 0x55,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6e, 0x6f, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e,
	0x63, 0x22, 0x69, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x04, 0x0a,
	0x13, 0x42, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x43, 0x43, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x49, 0x43, 0x43, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x14, 0x42, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x71,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x4c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x5e,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4c, 0x0a,
	0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6a, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x04, 0x22, 0x7e, 0x0a, 0x1d, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x20, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64,
	0x54, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x73, 0x65, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x45, 0x76, 0x73, 0x65, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xd3, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x71, 0x74, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x71,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x47,
	0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6c, 0x65, 0x63, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x63, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x73, 0x74,
	0x42, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x63, 0x6f, 0x73, 0x74,
	0x22, 0xe8, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x65, 0x6c, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x65, 0x6c, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x0d,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x43, 0x0a,
	0x04, 0x65, 0x6c, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x47, 0x6f,
	0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6c,
	0x65, 0x63, 0x12, 0x4c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64, 0x1a, 0x37, 0x0a, 0x09,
	0x45, 0x6c, 0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe0, 0x04, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x12, 0x44, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x66, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x1a, 0x62, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x02,
	0x0a, 0x07, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x06, 0x49, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x69, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x30, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xfb, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4b, 0x77, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4b, 0x77, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x4d, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x4d, 0x42, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0xae, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x33, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x06, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x69, 0x66, 0x66, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x6f, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x06, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xfe, 0x04, 0x0a, 0x12, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x41,
	0x43, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x41, 0x43, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x6f, 0x63,
	0x12, 0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x63, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xab, 0x03, 0x0a, 0x10, 0x42, 0x4d,
	0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x4d, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x4d, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x4e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x49, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x57, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x57,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x0d, 0x42, 0x4d, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x22, 0xf7, 0x0d, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x42, 0x4d, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x73, 0x6f, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x56,
	0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x42, 0x4d, 0x53, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x6f, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x42, 0x4d, 0x53, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x42,
	0x4d, 0x53, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56,
	0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x42, 0x4d, 0x53, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x42, 0x4d, 0x53, 0x54, 0x65, 0x6c,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x69,
	0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x55, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x42, 0x4d, 0x53, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x6f,
	0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0f, 0x63,
	0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x4d, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x4d, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x49, 0x4e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x49, 0x4e, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x57, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x57,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6d, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6d, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x6c,
	0x6c, 0x41, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x41, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x0e,
	0x42, 0x4d, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x6f, 0x63,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x22, 0x34, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x04, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x9c, 0x08, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3d,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x41, 0x43, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x54, 0x41, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x6f, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6c,
	0x63, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x43, 0x6f, 0x73,
	0x74, 0x42, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x45, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x45, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x0a, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x45, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x45, 0x78, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x40, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x35,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x47,
	0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x59, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x62, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x62, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73,
	0x65, 0x71, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x22, 0x7b, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x3e,
	0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x61,
	0x0a, 0x15, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0x12, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0xdd, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x61, 0x0a, 0x0f, 0x73, 0x65, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xe6, 0x01, 0x0a,
	0x0f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0xe5, 0x02, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x43, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x03,
	0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x6f, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x1a, 0x3c, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2e, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x6f, 0x67, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x10,
	0x01, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x45,
	0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x22, 0xc8, 0x02, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x48, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x6f, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x07,
	0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x3f, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x40,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x56, 0x0a, 0x0f, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x49, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0b, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3d, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xc0, 0x02, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e,
	0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x63, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c,
	0x10, 0x01, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x4e, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x50, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x22,
	0x26, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0xa7, 0x03, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x52,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x72, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x47, 0x6f, 0x69, 0x6f,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x19, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x85, 0x01, 0x0a, 0x23, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x1f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x22,
	0xa8, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6e, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x76, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x76, 0x43, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xc0, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65,
	0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x35, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x73, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x5f, 0x0a,
	0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x47,
	0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x47,
	0x0a, 0x1f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x53, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x67, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x54, 0x0a, 0x10, 0x67,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x10, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x6e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x5a, 0x0a, 0x12, 0x67, 0x65,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x12, 0x67, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x10,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x75, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x78, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x78, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x03, 0x22, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0x9d, 0x02,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x47,
	0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x6b, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x46, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x82, 0x06,
	0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x45, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x45, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12,
	0x3f, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x1a, 0xba, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x1a, 0x82, 0x03,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x1a,
	0x80, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x73, 0x74,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22,
	0x61, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x61, 0x72, 0x62, 0x6f,
	0x6e, 0x44, 0x69, 0x6f, 0x78, 0x69, 0x64, 0x65, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x10, 0x02, 0x22, 0x60, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x46, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x47,
	0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x60, 0x0a, 0x14, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x14, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x47,
	0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0x67, 0x0a, 0x18,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x47, 0x6f, 0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x22,
	0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x47, 0x6f, 0x69,
	0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x62, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74,
	0x62, 0x63, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x47, 0x6f,
	0x69, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x2a, 0xe2, 0x10, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x44, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x44, 0x5f, 0x42, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44,
	0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x44, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x44, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x10, 0x06, 0x12, 0x24, 0x0a,
	0x20, 0x49, 0x44, 0x5f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x10, 0x08, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x44, 0x5f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44, 0x5f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x5f,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x10,
	0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x12,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x44, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x44, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x10, 0x14,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x44, 0x5f, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x44, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x10, 0x1a,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x1b, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x44, 0x5f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x10, 0x24, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x10, 0x30,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x44, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x44, 0x5f, 0x47, 0x65,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x10, 0x32, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x44, 0x5f, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x10, 0x33,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66,
	0x52, 0x65, 0x71, 0x10, 0x34, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x10, 0x35, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x44, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x10, 0x36, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x10, 0x37, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x10, 0x38,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x5f, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x10,
	0x39, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x44, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x10, 0x41, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x44, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x10, 0x42, 0x12, 0x1e, 0x0a,
	0x1a, 0x49, 0x44, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x10, 0x43, 0x12, 0x1c, 0x0a,
	0x18, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x10, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x44, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x10, 0x45, 0x12, 0x1c, 0x0a, 0x17,
	0x49, 0x44, 0x5f, 0x42, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x81, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x44,
	0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x82,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x49, 0x44, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10,
	0x83, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x84, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x85, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x49,
	0x44, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x10, 0x86, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x49, 0x44, 0x5f, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x87, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x88, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x49,
	0x44, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x8a, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x49,
	0x44, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x10,
	0x8b, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x8c, 0x01, 0x12, 0x22, 0x0a, 0x1d,
	0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x90, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x10, 0x91, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x49, 0x44, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x92,
	0x01, 0x12, 0x1b, 0x0a, 0x16, 0x49, 0x44, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x93, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x49, 0x44, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x10, 0x94, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x95, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x49, 0x44, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x96, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x49, 0x44, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0x9a, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x49,
	0x44, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb0, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x44, 0x5f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb1,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb2, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x44, 0x5f,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb3, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x49, 0x44, 0x5f, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f,
	0x6e, 0x66, 0x10, 0xb4, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb5, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb6, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x44,
	0x5f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x10, 0xb7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb8, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x49, 0x44, 0x5f, 0x4c,
	0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xb9, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x49,
	0x44, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x10, 0xba, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x44, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xbb, 0x01, 0x12, 0x1e, 0x0a,
	0x19, 0x49, 0x44, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xbc, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x49, 0x44, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xbd, 0x01, 0x12,
	0x1e, 0x0a, 0x19, 0x49, 0x44, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10, 0xbe, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x10,
	0xbf, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x44, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xff, 0x01, 0x2a, 0x77, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43, 0x5f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43,
	0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x43, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x5f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x43, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x2a, 0x67, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x46, 0x53, 0x5f,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x46,
	0x53, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x46, 0x53, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x46, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x11, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x47, 0x53, 0x5f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x47, 0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x47, 0x53, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x47, 0x53, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x47, 0x53, 0x5f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x2a, 0xe7, 0x02, 0x0a, 0x0e, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x57, 0x5f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x57,
	0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x57,
	0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x57, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x57, 0x5f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x57, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x57, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x57, 0x5f, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x57,
	0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x15, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xad, 0x4d, 0x12,
	0x21, 0x0a, 0x1c, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0xae, 0x4d, 0x12, 0x18, 0x0a, 0x13, 0x46, 0x57, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xaf, 0x4d, 0x12, 0x16, 0x0a, 0x11,
	0x46, 0x57, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0xb0, 0x4d, 0x2a, 0x3e, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x0b, 0x2a, 0x4d, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x03, 0x2a, 0x96, 0x02, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x53, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x53, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x53, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x5f, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x5f, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x53, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x53, 0x5f, 0x4e, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x10,
	0x08, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x56, 0x53, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x41, 0x74, 0x54, 0x68, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x5f, 0x4e, 0x6f, 0x74,
	0x41, 0x74, 0x54, 0x68, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x53, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x63, 0x2a, 0xed, 0x01, 0x0a,
	0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4d, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6c,
	0x75, 0x67, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4d, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4d, 0x5f, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4d, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x4d, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4d, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x56, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4d, 0x5f, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x56, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4d, 0x5f, 0x42, 0x6c,
	0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x5f,
	0x4d, 0x41, 0x43, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4d, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4d, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x0a, 0x2a, 0x8e, 0x01, 0x0a,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x4d, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x4d, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x79, 0x45, 0x6c,
	0x65, 0x63, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4d, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4d, 0x5f,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x4d, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42,
	0x79, 0x45, 0x6c, 0x65, 0x63, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4d, 0x5f, 0x41, 0x75,
	0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x05, 0x2a, 0x90, 0x05,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x52, 0x5f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x52, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x52, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x52, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x52, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x52, 0x5f, 0x45, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x52, 0x5f, 0x45, 0x56, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x52, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x10,
	0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x5f, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x10,
	0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x52, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x73,
	0x73, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x52, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x52, 0x5f, 0x42, 0x4d,
	0x53, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x52, 0x5f, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x52, 0x5f, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x5f,
	0x53, 0x6f, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f,
	0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x10, 0x11,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x10,
	0x12, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x52,
	0x5f, 0x4e, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x15, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x16, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x17,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x4f, 0x43, 0x10, 0x18,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x5f, 0x43, 0x50, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x19,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x52, 0x5f, 0x4c, 0x65, 0x61, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x1a,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x66, 0x53, 0x65, 0x6c,
	0x66, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x66, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x52, 0x5f, 0x45, 0x56, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x10, 0x67, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x52, 0x5f, 0x4e, 0x6f, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x10, 0x68,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x52, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x69, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x52, 0x5f, 0x43, 0x43,
	0x31, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x6a, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x52, 0x5f, 0x44, 0x65, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10,
	0x6b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x52, 0x5f, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x6c, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x52,
	0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xe7, 0x07,
	0x2a, 0x9a, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x5f, 0x4c, 0x65, 0x61, 0x64, 0x41, 0x63, 0x69, 0x64,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x54, 0x5f, 0x4e, 0x69, 0x4d, 0x48, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x5f, 0x4c, 0x46, 0x50, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x41, 0x54, 0x5f, 0x4c, 0x4d, 0x4f, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41,
	0x54, 0x5f, 0x4c, 0x43, 0x4f, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x5f, 0x4e,
	0x43, 0x4d, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x10,
	0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x5f, 0x4c, 0x54, 0x4f, 0x10, 0x08, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x41, 0x54, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x09, 0x2a, 0x51, 0x0a,
	0x0f, 0x42, 0x4d, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4d, 0x53, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x4d, 0x53, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4d, 0x53, 0x5f, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x02,
	0x2a, 0x4c, 0x0a, 0x10, 0x42, 0x4d, 0x53, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4d, 0x53, 0x4d, 0x5f, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x4d, 0x5f, 0x4f, 0x76,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53,
	0x4d, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x02, 0x2a, 0x4b,
	0x0a, 0x13, 0x42, 0x4d, 0x53, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4d, 0x53, 0x54, 0x5f, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4d, 0x53, 0x54, 0x5f, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4d, 0x53,
	0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x2a, 0x70, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x48, 0x53, 0x5f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48,
	0x53, 0x5f, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x48, 0x53, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x53, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x45, 0x56, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x53, 0x5f, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x56, 0x53, 0x45, 0x10, 0x04, 0x2a, 0xbb, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x50, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x50, 0x5f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x54,
	0x43, 0x55, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x43, 0x43, 0x4d, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x42, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x50, 0x5f, 0x50, 0x4b, 0x4c, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x50,
	0x4b, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x50, 0x5f, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x4c, 0x43, 0x44, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x50, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10,
	0x09, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x46, 0x61, 0x6e, 0x10, 0x0a, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x50, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x0b, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x50, 0x53, 0x4d, 0x10, 0x0c, 0x2a, 0x79, 0x0a, 0x0c, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x57,
	0x4c, 0x5f, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x57, 0x4c, 0x5f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x4c,
	0x5f, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4c,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4c, 0x5f,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x4c, 0x5f, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x10, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4c, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x65, 0x2a, 0xa2, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x54,
	0x45, 0x5f, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x54, 0x45, 0x5f, 0x65, 0x4d, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54,
	0x45, 0x5f, 0x49, 0x53, 0x4f, 0x31, 0x34, 0x34, 0x34, 0x33, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x31, 0x35, 0x36, 0x39, 0x33, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x54, 0x45, 0x5f, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x5f, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x2a, 0x28, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x05, 0x0a, 0x01, 0x57, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x4b, 0x57, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x42, 0x38, 0x48,
	0x03, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x6f,
	0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_charger_proto_rawDescOnce sync.Once
	file_charger_proto_rawDescData = file_charger_proto_rawDesc
)

func file_charger_proto_rawDescGZIP() []byte {
	file_charger_proto_rawDescOnce.Do(func() {
		file_charger_proto_rawDescData = protoimpl.X.CompressGZIP(file_charger_proto_rawDescData)
	})
	return file_charger_proto_rawDescData
}

var file_charger_proto_enumTypes = make([]protoimpl.EnumInfo, 33)
var file_charger_proto_msgTypes = make([]protoimpl.MessageInfo, 120)
var file_charger_proto_goTypes = []interface{}{
	(MessageID)(0),                           // 0: Goiot.Protocol.Charger.MessageID
	(ErrorCode)(0),                           // 1: Goiot.Protocol.Charger.ErrorCode
	(ConfigurationStatus)(0),                 // 2: Goiot.Protocol.Charger.ConfigurationStatus
	(DiagnosticsStatus)(0),                   // 3: Goiot.Protocol.Charger.DiagnosticsStatus
	(FirmwareStatus)(0),                      // 4: Goiot.Protocol.Charger.FirmwareStatus
	(IdType)(0),                              // 5: Goiot.Protocol.Charger.IdType
	(CardType)(0),                            // 6: Goiot.Protocol.Charger.CardType
	(AuthorizationStatus)(0),                 // 7: Goiot.Protocol.Charger.AuthorizationStatus
	(AuthorizationMode)(0),                   // 8: Goiot.Protocol.Charger.AuthorizationMode
	(ServiceMode)(0),                         // 9: Goiot.Protocol.Charger.ServiceMode
	(StopReason)(0),                          // 10: Goiot.Protocol.Charger.StopReason
	(BatteryType)(0),                         // 11: Goiot.Protocol.Charger.BatteryType
	(BMSChargingType)(0),                     // 12: Goiot.Protocol.Charger.BMSChargingType
	(BMSMeasureStatus)(0),                    // 13: Goiot.Protocol.Charger.BMSMeasureStatus
	(BMSTelesignalStatus)(0),                 // 14: Goiot.Protocol.Charger.BMSTelesignalStatus
	(ChargerStatus)(0),                       // 15: Goiot.Protocol.Charger.ChargerStatus
	(Components)(0),                          // 16: Goiot.Protocol.Charger.Components
	(WarningLevel)(0),                        // 17: Goiot.Protocol.Charger.WarningLevel
	(IdTokenEnumType)(0),                     // 18: Goiot.Protocol.Charger.IdTokenEnumType
	(ChargingRateUnit)(0),                    // 19: Goiot.Protocol.Charger.ChargingRateUnit
	(GetChargingProfilesStatus)(0),           // 20: Goiot.Protocol.Charger.GetChargingProfilesStatus
	(UpdateFirmwareConf_Status)(0),           // 21: Goiot.Protocol.Charger.UpdateFirmwareConf.Status
	(GetBaseReportReq_ReportBaseEnumType)(0), // 22: Goiot.Protocol.Charger.GetBaseReportReq.ReportBaseEnumType
	(GetLogReq_LogType)(0),                   // 23: Goiot.Protocol.Charger.GetLogReq.LogType
	(GetLogConf_LogStatusEnumType)(0),        // 24: Goiot.Protocol.Charger.GetLogConf.LogStatusEnumType
	(LogStatusNotificationReq_UploadLogStatusEnumType)(0), // 25: Goiot.Protocol.Charger.LogStatusNotificationReq.UploadLogStatusEnumType
	(SendLocalAuthorizationListReq_UpdateEnumType)(0),     // 26: Goiot.Protocol.Charger.SendLocalAuthorizationListReq.UpdateEnumType
	(ReserveNowConf_Status)(0),                            // 27: Goiot.Protocol.Charger.ReserveNowConf.Status
	(CancelReservationConf_Status)(0),                     // 28: Goiot.Protocol.Charger.CancelReservationConf.Status
	(ChargingProfile_Purpose)(0),                          // 29: Goiot.Protocol.Charger.ChargingProfile.Purpose
	(ChargingProfile_Status)(0),                           // 30: Goiot.Protocol.Charger.ChargingProfile.Status
	(SalesTariff_ConsumptionCost_Cost_Kind)(0),            // 31: Goiot.Protocol.Charger.SalesTariff.ConsumptionCost.Cost.Kind
	(ClearChargingProfile_Status)(0),                      // 32: Goiot.Protocol.Charger.ClearChargingProfile.Status
	(*APDU)(nil),                                          // 33: Goiot.Protocol.Charger.APDU
	(*MessageError)(nil),                                  // 34: Goiot.Protocol.Charger.MessageError
	(*BootNotificationReq)(nil),                           // 35: Goiot.Protocol.Charger.BootNotificationReq
	(*BootNotificationConf)(nil),                          // 36: Goiot.Protocol.Charger.BootNotificationConf
	(*KeyValue)(nil),                                      // 37: Goiot.Protocol.Charger.KeyValue
	(*ChangeConfigurationReq)(nil),                        // 38: Goiot.Protocol.Charger.ChangeConfigurationReq
	(*ChangeConfigurationConf)(nil),                       // 39: Goiot.Protocol.Charger.ChangeConfigurationConf
	(*GetConfigurationReq)(nil),                           // 40: Goiot.Protocol.Charger.GetConfigurationReq
	(*GetConfigurationConf)(nil),                          // 41: Goiot.Protocol.Charger.GetConfigurationConf
	(*RemoteControlReq)(nil),                              // 42: Goiot.Protocol.Charger.RemoteControlReq
	(*RemoteControlConf)(nil),                             // 43: Goiot.Protocol.Charger.RemoteControlConf
	(*UpdateFirmwareReq)(nil),                             // 44: Goiot.Protocol.Charger.UpdateFirmwareReq
	(*UpdateFirmwareConf)(nil),                            // 45: Goiot.Protocol.Charger.UpdateFirmwareConf
	(*FirmwareStatusNotificationReq)(nil),                 // 46: Goiot.Protocol.Charger.FirmwareStatusNotificationReq
	(*FirmwareStatusNotificationConf)(nil),                // 47: Goiot.Protocol.Charger.FirmwareStatusNotificationConf
	(*GetDiagnosticsReq)(nil),                             // 48: Goiot.Protocol.Charger.GetDiagnosticsReq
	(*GetDiagnosticsConf)(nil),                            // 49: Goiot.Protocol.Charger.GetDiagnosticsConf
	(*DiagnosticsStatusNotificationReq)(nil),              // 50: Goiot.Protocol.Charger.DiagnosticsStatusNotificationReq
	(*DeviceRegistrationReq)(nil),                         // 51: Goiot.Protocol.Charger.DeviceRegistrationReq
	(*DeviceRegistrationConf)(nil),                        // 52: Goiot.Protocol.Charger.DeviceRegistrationConf
	(*TriggerMessageReq)(nil),                             // 53: Goiot.Protocol.Charger.TriggerMessageReq
	(*TariffTime)(nil),                                    // 54: Goiot.Protocol.Charger.TariffTime
	(*TariffCharge)(nil),                                  // 55: Goiot.Protocol.Charger.TariffCharge
	(*TariffParking)(nil),                                 // 56: Goiot.Protocol.Charger.TariffParking
	(*CostBill)(nil),                                      // 57: Goiot.Protocol.Charger.CostBill
	(*Cost)(nil),                                          // 58: Goiot.Protocol.Charger.Cost
	(*TariffChannel)(nil),                                 // 59: Goiot.Protocol.Charger.TariffChannel
	(*SetTariffReq)(nil),                                  // 60: Goiot.Protocol.Charger.SetTariffReq
	(*SetTariffConf)(nil),                                 // 61: Goiot.Protocol.Charger.SetTariffConf
	(*IdToken)(nil),                                       // 62: Goiot.Protocol.Charger.IdToken
	(*AuthorizeReq)(nil),                                  // 63: Goiot.Protocol.Charger.AuthorizeReq
	(*AuthorizeConf)(nil),                                 // 64: Goiot.Protocol.Charger.AuthorizeConf
	(*UpdateIdCardCacheReq)(nil),                          // 65: Goiot.Protocol.Charger.UpdateIdCardCacheReq
	(*HeartbeatReq)(nil),                                  // 66: Goiot.Protocol.Charger.HeartbeatReq
	(*HeartbeatResp)(nil),                                 // 67: Goiot.Protocol.Charger.HeartbeatResp
	(*RemoteStartTransactionReq)(nil),                     // 68: Goiot.Protocol.Charger.RemoteStartTransactionReq
	(*RemoteStartTransactionConf)(nil),                    // 69: Goiot.Protocol.Charger.RemoteStartTransactionConf
	(*RemoteStopTransactionReq)(nil),                      // 70: Goiot.Protocol.Charger.RemoteStopTransactionReq
	(*RemoteStopTransactionConf)(nil),                     // 71: Goiot.Protocol.Charger.RemoteStopTransactionConf
	(*StartTransactionReq)(nil),                           // 72: Goiot.Protocol.Charger.StartTransactionReq
	(*StartTransactionConf)(nil),                          // 73: Goiot.Protocol.Charger.StartTransactionConf
	(*StopTransactionReq)(nil),                            // 74: Goiot.Protocol.Charger.StopTransactionReq
	(*StopTransactionConf)(nil),                           // 75: Goiot.Protocol.Charger.StopTransactionConf
	(*BMSHandshakeInfo)(nil),                              // 76: Goiot.Protocol.Charger.BMSHandshakeInfo
	(*BMSConfigInfo)(nil),                                 // 77: Goiot.Protocol.Charger.BMSConfigInfo
	(*BMSChargingInfo)(nil),                               // 78: Goiot.Protocol.Charger.BMSChargingInfo
	(*BMSChargedInfo)(nil),                                // 79: Goiot.Protocol.Charger.BMSChargedInfo
	(*Cell)(nil),                                          // 80: Goiot.Protocol.Charger.Cell
	(*ChargingInfoReq)(nil),                               // 81: Goiot.Protocol.Charger.ChargingInfoReq
	(*TransactionReq)(nil),                                // 82: Goiot.Protocol.Charger.TransactionReq
	(*TransactionConf)(nil),                               // 83: Goiot.Protocol.Charger.TransactionConf
	(*SampledValue)(nil),                                  // 84: Goiot.Protocol.Charger.SampledValue
	(*TelemetryReq)(nil),                                  // 85: Goiot.Protocol.Charger.TelemetryReq
	(*WarningReq)(nil),                                    // 86: Goiot.Protocol.Charger.WarningReq
	(*WarningConf)(nil),                                   // 87: Goiot.Protocol.Charger.WarningConf
	(*GetTransactionsReq)(nil),                            // 88: Goiot.Protocol.Charger.GetTransactionsReq
	(*GetTransactionsConf)(nil),                           // 89: Goiot.Protocol.Charger.GetTransactionsConf
	(*GetWarningReq)(nil),                                 // 90: Goiot.Protocol.Charger.GetWarningReq
	(*GetWarningConf)(nil),                                // 91: Goiot.Protocol.Charger.GetWarningConf
	(*GetBaseReportConf)(nil),                             // 92: Goiot.Protocol.Charger.GetBaseReportConf
	(*GetBaseReportReq)(nil),                              // 93: Goiot.Protocol.Charger.GetBaseReportReq
	(*NotifyReportReq)(nil),                               // 94: Goiot.Protocol.Charger.NotifyReportReq
	(*ReportDataType)(nil),                                // 95: Goiot.Protocol.Charger.ReportDataType
	(*ComponentType)(nil),                                 // 96: Goiot.Protocol.Charger.ComponentType
	(*VariableType)(nil),                                  // 97: Goiot.Protocol.Charger.VariableType
	(*VariableAttributeType)(nil),                         // 98: Goiot.Protocol.Charger.VariableAttributeType
	(*NotifyReportConf)(nil),                              // 99: Goiot.Protocol.Charger.NotifyReportConf
	(*SetVariablesReq)(nil),                               // 100: Goiot.Protocol.Charger.SetVariablesReq
	(*SetVariablesConf)(nil),                              // 101: Goiot.Protocol.Charger.SetVariablesConf
	(*GetLogReq)(nil),                                     // 102: Goiot.Protocol.Charger.GetLogReq
	(*GetLogConf)(nil),                                    // 103: Goiot.Protocol.Charger.GetLogConf
	(*LogStatusNotificationReq)(nil),                      // 104: Goiot.Protocol.Charger.LogStatusNotificationReq
	(*LogStatusNotificationConf)(nil),                     // 105: Goiot.Protocol.Charger.LogStatusNotificationConf
	(*GetLocalListVersionReq)(nil),                        // 106: Goiot.Protocol.Charger.GetLocalListVersionReq
	(*GetLocalListVersionConf)(nil),                       // 107: Goiot.Protocol.Charger.GetLocalListVersionConf
	(*IdTokenInfoType)(nil),                               // 108: Goiot.Protocol.Charger.IdTokenInfoType
	(*IdTokenType)(nil),                                   // 109: Goiot.Protocol.Charger.IdTokenType
	(*AuthorizationData)(nil),                             // 110: Goiot.Protocol.Charger.AuthorizationData
	(*SendLocalAuthorizationListReq)(nil),                 // 111: Goiot.Protocol.Charger.SendLocalAuthorizationListReq
	(*SendLocalAuthorizationListConf)(nil),                // 112: Goiot.Protocol.Charger.SendLocalAuthorizationListConf
	(*ReserveNowReq)(nil),                                 // 113: Goiot.Protocol.Charger.ReserveNowReq
	(*ReserveNowConf)(nil),                                // 114: Goiot.Protocol.Charger.ReserveNowConf
	(*CancelReservationReq)(nil),                          // 115: Goiot.Protocol.Charger.CancelReservationReq
	(*CancelReservationConf)(nil),                         // 116: Goiot.Protocol.Charger.CancelReservationConf
	(*DataTransferReq)(nil),                               // 117: Goiot.Protocol.Charger.DataTransferReq
	(*RemoteDiagnosisReq)(nil),                            // 118: Goiot.Protocol.Charger.RemoteDiagnosisReq
	(*RemoteDiagnosisResp)(nil),                           // 119: Goiot.Protocol.Charger.RemoteDiagnosisResp
	(*ReserveStopTransactionReq)(nil),                     // 120: Goiot.Protocol.Charger.ReserveStopTransactionReq
	(*Token)(nil),                                         // 121: Goiot.Protocol.Charger.Token
	(*DataTransferConf)(nil),                              // 122: Goiot.Protocol.Charger.DataTransferConf
	(*CancelReserveStopTransactionReq)(nil),               // 123: Goiot.Protocol.Charger.CancelReserveStopTransactionReq
	(*StatusNotificationReq)(nil),                         // 124: Goiot.Protocol.Charger.StatusNotificationReq
	(*GetReportReq)(nil),                                  // 125: Goiot.Protocol.Charger.GetReportReq
	(*GetReportConf)(nil),                                 // 126: Goiot.Protocol.Charger.GetReportConf
	(*GetVariablesReq)(nil),                               // 127: Goiot.Protocol.Charger.GetVariablesReq
	(*GetVariablesData)(nil),                              // 128: Goiot.Protocol.Charger.GetVariablesData
	(*GetVariablesConf)(nil),                              // 129: Goiot.Protocol.Charger.GetVariablesConf
	(*GetVariablesResult)(nil),                            // 130: Goiot.Protocol.Charger.GetVariablesResult
	(*SetChargingProfileReq)(nil),                         // 131: Goiot.Protocol.Charger.SetChargingProfileReq
	(*ChargingProfile)(nil),                               // 132: Goiot.Protocol.Charger.ChargingProfile
	(*ChargingSchedule)(nil),                              // 133: Goiot.Protocol.Charger.ChargingSchedule
	(*SalesTariff)(nil),                                   // 134: Goiot.Protocol.Charger.SalesTariff
	(*SetChargingProfileConf)(nil),                        // 135: Goiot.Protocol.Charger.SetChargingProfileConf
	(*ClearChargingProfileReq)(nil),                       // 136: Goiot.Protocol.Charger.ClearChargingProfileReq
	(*ClearChargingProfile)(nil),                          // 137: Goiot.Protocol.Charger.ClearChargingProfile
	(*ClearChargingProfileConf)(nil),                      // 138: Goiot.Protocol.Charger.ClearChargingProfileConf
	(*GetChargingProfilesReq)(nil),                        // 139: Goiot.Protocol.Charger.GetChargingProfilesReq
	(*GetChargingProfilesConf)(nil),                       // 140: Goiot.Protocol.Charger.GetChargingProfilesConf
	(*ChargingProfilesCriterion)(nil),                     // 141: Goiot.Protocol.Charger.ChargingProfilesCriterion
	(*ReportChargingProfilesReq)(nil),                     // 142: Goiot.Protocol.Charger.ReportChargingProfilesReq
	(*ReportChargingProfilesConf)(nil),                    // 143: Goiot.Protocol.Charger.ReportChargingProfilesConf
	nil,                                                   // 144: Goiot.Protocol.Charger.TariffChannel.ElecEntry
	nil,                                                   // 145: Goiot.Protocol.Charger.TariffChannel.ServiceEntry
	nil,                                                   // 146: Goiot.Protocol.Charger.SetTariffReq.ChannelsEntry
	(*SetVariablesReq_SetVariableData)(nil),               // 147: Goiot.Protocol.Charger.SetVariablesReq.SetVariableData
	(*GetLogReq_LogParametersType)(nil),                   // 148: Goiot.Protocol.Charger.GetLogReq.LogParametersType
	(*ChargingSchedule_PeriodType)(nil),                   // 149: Goiot.Protocol.Charger.ChargingSchedule.PeriodType
	(*SalesTariff_Entry)(nil),                             // 150: Goiot.Protocol.Charger.SalesTariff.Entry
	(*SalesTariff_ConsumptionCost)(nil),                   // 151: Goiot.Protocol.Charger.SalesTariff.ConsumptionCost
	(*SalesTariff_ConsumptionCost_Cost)(nil),              // 152: Goiot.Protocol.Charger.SalesTariff.ConsumptionCost.Cost
}
var file_charger_proto_depIdxs = []int32{
	0,   // 0: Goiot.Protocol.Charger.APDU.messageId:type_name -> Goiot.Protocol.Charger.MessageID
	1,   // 1: Goiot.Protocol.Charger.MessageError.error:type_name -> Goiot.Protocol.Charger.ErrorCode
	37,  // 2: Goiot.Protocol.Charger.ChangeConfigurationReq.configurationKey:type_name -> Goiot.Protocol.Charger.KeyValue
	2,   // 3: Goiot.Protocol.Charger.ChangeConfigurationConf.status:type_name -> Goiot.Protocol.Charger.ConfigurationStatus
	37,  // 4: Goiot.Protocol.Charger.GetConfigurationReq.keys:type_name -> Goiot.Protocol.Charger.KeyValue
	37,  // 5: Goiot.Protocol.Charger.GetConfigurationConf.values:type_name -> Goiot.Protocol.Charger.KeyValue
	21,  // 6: Goiot.Protocol.Charger.UpdateFirmwareConf.status:type_name -> Goiot.Protocol.Charger.UpdateFirmwareConf.Status
	4,   // 7: Goiot.Protocol.Charger.FirmwareStatusNotificationReq.status:type_name -> Goiot.Protocol.Charger.FirmwareStatus
	3,   // 8: Goiot.Protocol.Charger.DiagnosticsStatusNotificationReq.status:type_name -> Goiot.Protocol.Charger.DiagnosticsStatus
	0,   // 9: Goiot.Protocol.Charger.TriggerMessageReq.request:type_name -> Goiot.Protocol.Charger.MessageID
	57,  // 10: Goiot.Protocol.Charger.Cost.bills:type_name -> Goiot.Protocol.Charger.CostBill
	144, // 11: Goiot.Protocol.Charger.TariffChannel.elec:type_name -> Goiot.Protocol.Charger.TariffChannel.ElecEntry
	145, // 12: Goiot.Protocol.Charger.TariffChannel.service:type_name -> Goiot.Protocol.Charger.TariffChannel.ServiceEntry
	55,  // 13: Goiot.Protocol.Charger.SetTariffReq.chargetariffs:type_name -> Goiot.Protocol.Charger.TariffCharge
	54,  // 14: Goiot.Protocol.Charger.SetTariffReq.timetariffs:type_name -> Goiot.Protocol.Charger.TariffTime
	56,  // 15: Goiot.Protocol.Charger.SetTariffReq.parkingtariffs:type_name -> Goiot.Protocol.Charger.TariffParking
	146, // 16: Goiot.Protocol.Charger.SetTariffReq.channels:type_name -> Goiot.Protocol.Charger.SetTariffReq.ChannelsEntry
	5,   // 17: Goiot.Protocol.Charger.IdToken.id_type:type_name -> Goiot.Protocol.Charger.IdType
	7,   // 18: Goiot.Protocol.Charger.IdToken.status:type_name -> Goiot.Protocol.Charger.AuthorizationStatus
	6,   // 19: Goiot.Protocol.Charger.IdToken.type:type_name -> Goiot.Protocol.Charger.CardType
	62,  // 20: Goiot.Protocol.Charger.AuthorizeReq.IdData:type_name -> Goiot.Protocol.Charger.IdToken
	8,   // 21: Goiot.Protocol.Charger.AuthorizeReq.authorization_mode:type_name -> Goiot.Protocol.Charger.AuthorizationMode
	62,  // 22: Goiot.Protocol.Charger.AuthorizeConf.idinfo:type_name -> Goiot.Protocol.Charger.IdToken
	60,  // 23: Goiot.Protocol.Charger.AuthorizeConf.priceScheme:type_name -> Goiot.Protocol.Charger.SetTariffReq
	62,  // 24: Goiot.Protocol.Charger.UpdateIdCardCacheReq.cardinfo:type_name -> Goiot.Protocol.Charger.IdToken
	62,  // 25: Goiot.Protocol.Charger.RemoteStartTransactionReq.IdData:type_name -> Goiot.Protocol.Charger.IdToken
	9,   // 26: Goiot.Protocol.Charger.RemoteStartTransactionReq.serviceMode:type_name -> Goiot.Protocol.Charger.ServiceMode
	60,  // 27: Goiot.Protocol.Charger.RemoteStartTransactionReq.priceScheme:type_name -> Goiot.Protocol.Charger.SetTariffReq
	132, // 28: Goiot.Protocol.Charger.RemoteStartTransactionReq.chargingProfile:type_name -> Goiot.Protocol.Charger.ChargingProfile
	10,  // 29: Goiot.Protocol.Charger.RemoteStartTransactionConf.reason:type_name -> Goiot.Protocol.Charger.StopReason
	10,  // 30: Goiot.Protocol.Charger.RemoteStopTransactionReq.reason:type_name -> Goiot.Protocol.Charger.StopReason
	62,  // 31: Goiot.Protocol.Charger.StartTransactionReq.IdData:type_name -> Goiot.Protocol.Charger.IdToken
	8,   // 32: Goiot.Protocol.Charger.StartTransactionReq.mode:type_name -> Goiot.Protocol.Charger.AuthorizationMode
	9,   // 33: Goiot.Protocol.Charger.StartTransactionReq.serviceMode:type_name -> Goiot.Protocol.Charger.ServiceMode
	15,  // 34: Goiot.Protocol.Charger.StartTransactionReq.connectorChargingState:type_name -> Goiot.Protocol.Charger.ChargerStatus
	62,  // 35: Goiot.Protocol.Charger.StartTransactionConf.idInfo:type_name -> Goiot.Protocol.Charger.IdToken
	62,  // 36: Goiot.Protocol.Charger.StopTransactionReq.IdData:type_name -> Goiot.Protocol.Charger.IdToken
	10,  // 37: Goiot.Protocol.Charger.StopTransactionReq.reason:type_name -> Goiot.Protocol.Charger.StopReason
	58,  // 38: Goiot.Protocol.Charger.StopTransactionReq.cost:type_name -> Goiot.Protocol.Charger.Cost
	11,  // 39: Goiot.Protocol.Charger.BMSHandshakeInfo.batType:type_name -> Goiot.Protocol.Charger.BatteryType
	12,  // 40: Goiot.Protocol.Charger.BMSChargingInfo.chargeMode:type_name -> Goiot.Protocol.Charger.BMSChargingType
	80,  // 41: Goiot.Protocol.Charger.BMSChargingInfo.highestVoltage:type_name -> Goiot.Protocol.Charger.Cell
	80,  // 42: Goiot.Protocol.Charger.BMSChargingInfo.highestTemp:type_name -> Goiot.Protocol.Charger.Cell
	80,  // 43: Goiot.Protocol.Charger.BMSChargingInfo.lowestTemp:type_name -> Goiot.Protocol.Charger.Cell
	13,  // 44: Goiot.Protocol.Charger.BMSChargingInfo.cellVoltageStatus:type_name -> Goiot.Protocol.Charger.BMSMeasureStatus
	13,  // 45: Goiot.Protocol.Charger.BMSChargingInfo.socStatus:type_name -> Goiot.Protocol.Charger.BMSMeasureStatus
	13,  // 46: Goiot.Protocol.Charger.BMSChargingInfo.currentStatus:type_name -> Goiot.Protocol.Charger.BMSMeasureStatus
	13,  // 47: Goiot.Protocol.Charger.BMSChargingInfo.temperatureStatus:type_name -> Goiot.Protocol.Charger.BMSMeasureStatus
	14,  // 48: Goiot.Protocol.Charger.BMSChargingInfo.insulationStatus:type_name -> Goiot.Protocol.Charger.BMSTelesignalStatus
	14,  // 49: Goiot.Protocol.Charger.BMSChargingInfo.contactorStatus:type_name -> Goiot.Protocol.Charger.BMSTelesignalStatus
	80,  // 50: Goiot.Protocol.Charger.BMSChargingInfo.cellVoltage:type_name -> Goiot.Protocol.Charger.Cell
	80,  // 51: Goiot.Protocol.Charger.BMSChargingInfo.cellTemperature:type_name -> Goiot.Protocol.Charger.Cell
	11,  // 52: Goiot.Protocol.Charger.BMSChargingInfo.batType:type_name -> Goiot.Protocol.Charger.BatteryType
	58,  // 53: Goiot.Protocol.Charger.ChargingInfoReq.cost:type_name -> Goiot.Protocol.Charger.Cost
	15,  // 54: Goiot.Protocol.Charger.ChargingInfoReq.status:type_name -> Goiot.Protocol.Charger.ChargerStatus
	62,  // 55: Goiot.Protocol.Charger.TransactionReq.IdData:type_name -> Goiot.Protocol.Charger.IdToken
	8,   // 56: Goiot.Protocol.Charger.TransactionReq.mode:type_name -> Goiot.Protocol.Charger.AuthorizationMode
	9,   // 57: Goiot.Protocol.Charger.TransactionReq.service:type_name -> Goiot.Protocol.Charger.ServiceMode
	10,  // 58: Goiot.Protocol.Charger.TransactionReq.reason:type_name -> Goiot.Protocol.Charger.StopReason
	58,  // 59: Goiot.Protocol.Charger.TransactionReq.cost:type_name -> Goiot.Protocol.Charger.Cost
	16,  // 60: Goiot.Protocol.Charger.TelemetryReq.component:type_name -> Goiot.Protocol.Charger.Components
	84,  // 61: Goiot.Protocol.Charger.TelemetryReq.values:type_name -> Goiot.Protocol.Charger.SampledValue
	17,  // 62: Goiot.Protocol.Charger.WarningReq.level:type_name -> Goiot.Protocol.Charger.WarningLevel
	16,  // 63: Goiot.Protocol.Charger.WarningReq.component:type_name -> Goiot.Protocol.Charger.Components
	17,  // 64: Goiot.Protocol.Charger.GetWarningReq.level:type_name -> Goiot.Protocol.Charger.WarningLevel
	22,  // 65: Goiot.Protocol.Charger.GetBaseReportReq.type:type_name -> Goiot.Protocol.Charger.GetBaseReportReq.ReportBaseEnumType
	95,  // 66: Goiot.Protocol.Charger.NotifyReportReq.reportData:type_name -> Goiot.Protocol.Charger.ReportDataType
	96,  // 67: Goiot.Protocol.Charger.ReportDataType.component:type_name -> Goiot.Protocol.Charger.ComponentType
	97,  // 68: Goiot.Protocol.Charger.ReportDataType.variable:type_name -> Goiot.Protocol.Charger.VariableType
	98,  // 69: Goiot.Protocol.Charger.ReportDataType.variableAttribute:type_name -> Goiot.Protocol.Charger.VariableAttributeType
	147, // 70: Goiot.Protocol.Charger.SetVariablesReq.setVariableData:type_name -> Goiot.Protocol.Charger.SetVariablesReq.SetVariableData
	23,  // 71: Goiot.Protocol.Charger.GetLogReq.logType:type_name -> Goiot.Protocol.Charger.GetLogReq.LogType
	148, // 72: Goiot.Protocol.Charger.GetLogReq.log:type_name -> Goiot.Protocol.Charger.GetLogReq.LogParametersType
	24,  // 73: Goiot.Protocol.Charger.GetLogConf.status:type_name -> Goiot.Protocol.Charger.GetLogConf.LogStatusEnumType
	25,  // 74: Goiot.Protocol.Charger.LogStatusNotificationReq.status:type_name -> Goiot.Protocol.Charger.LogStatusNotificationReq.UploadLogStatusEnumType
	7,   // 75: Goiot.Protocol.Charger.IdTokenInfoType.status:type_name -> Goiot.Protocol.Charger.AuthorizationStatus
	18,  // 76: Goiot.Protocol.Charger.IdTokenType.type:type_name -> Goiot.Protocol.Charger.IdTokenEnumType
	108, // 77: Goiot.Protocol.Charger.AuthorizationData.idTokenInfo:type_name -> Goiot.Protocol.Charger.IdTokenInfoType
	109, // 78: Goiot.Protocol.Charger.AuthorizationData.idToken:type_name -> Goiot.Protocol.Charger.IdTokenType
	26,  // 79: Goiot.Protocol.Charger.SendLocalAuthorizationListReq.update_type:type_name -> Goiot.Protocol.Charger.SendLocalAuthorizationListReq.UpdateEnumType
	110, // 80: Goiot.Protocol.Charger.SendLocalAuthorizationListReq.local_authorization_list:type_name -> Goiot.Protocol.Charger.AuthorizationData
	109, // 81: Goiot.Protocol.Charger.ReserveNowReq.idToken:type_name -> Goiot.Protocol.Charger.IdTokenType
	27,  // 82: Goiot.Protocol.Charger.ReserveNowConf.status:type_name -> Goiot.Protocol.Charger.ReserveNowConf.Status
	28,  // 83: Goiot.Protocol.Charger.CancelReservationConf.status:type_name -> Goiot.Protocol.Charger.CancelReservationConf.Status
	118, // 84: Goiot.Protocol.Charger.DataTransferReq.remote_diagnosis_req:type_name -> Goiot.Protocol.Charger.RemoteDiagnosisReq
	120, // 85: Goiot.Protocol.Charger.DataTransferReq.reserve_stop_transaction_req:type_name -> Goiot.Protocol.Charger.ReserveStopTransactionReq
	123, // 86: Goiot.Protocol.Charger.DataTransferReq.cancel_reserve_stop_transaction_req:type_name -> Goiot.Protocol.Charger.CancelReserveStopTransactionReq
	121, // 87: Goiot.Protocol.Charger.ReserveStopTransactionReq.idToken:type_name -> Goiot.Protocol.Charger.Token
	119, // 88: Goiot.Protocol.Charger.DataTransferConf.remote_diagnosis_resp:type_name -> Goiot.Protocol.Charger.RemoteDiagnosisResp
	96,  // 89: Goiot.Protocol.Charger.GetReportReq.component:type_name -> Goiot.Protocol.Charger.ComponentType
	128, // 90: Goiot.Protocol.Charger.GetVariablesReq.getVariablesData:type_name -> Goiot.Protocol.Charger.GetVariablesData
	96,  // 91: Goiot.Protocol.Charger.GetVariablesData.component:type_name -> Goiot.Protocol.Charger.ComponentType
	130, // 92: Goiot.Protocol.Charger.GetVariablesConf.getVariablesResult:type_name -> Goiot.Protocol.Charger.GetVariablesResult
	96,  // 93: Goiot.Protocol.Charger.GetVariablesResult.component:type_name -> Goiot.Protocol.Charger.ComponentType
	97,  // 94: Goiot.Protocol.Charger.GetVariablesResult.variable:type_name -> Goiot.Protocol.Charger.VariableType
	132, // 95: Goiot.Protocol.Charger.SetChargingProfileReq.chargingProfile:type_name -> Goiot.Protocol.Charger.ChargingProfile
	133, // 96: Goiot.Protocol.Charger.ChargingProfile.chargingSchedule:type_name -> Goiot.Protocol.Charger.ChargingSchedule
	19,  // 97: Goiot.Protocol.Charger.ChargingSchedule.chargingRateUnit:type_name -> Goiot.Protocol.Charger.ChargingRateUnit
	149, // 98: Goiot.Protocol.Charger.ChargingSchedule.chargingSchedulePeriod:type_name -> Goiot.Protocol.Charger.ChargingSchedule.PeriodType
	150, // 99: Goiot.Protocol.Charger.SalesTariff.entry:type_name -> Goiot.Protocol.Charger.SalesTariff.Entry
	30,  // 100: Goiot.Protocol.Charger.SetChargingProfileConf.status:type_name -> Goiot.Protocol.Charger.ChargingProfile.Status
	137, // 101: Goiot.Protocol.Charger.ClearChargingProfileReq.clearChargingProfile:type_name -> Goiot.Protocol.Charger.ClearChargingProfile
	29,  // 102: Goiot.Protocol.Charger.ClearChargingProfile.purpose:type_name -> Goiot.Protocol.Charger.ChargingProfile.Purpose
	32,  // 103: Goiot.Protocol.Charger.ClearChargingProfileConf.status:type_name -> Goiot.Protocol.Charger.ClearChargingProfile.Status
	141, // 104: Goiot.Protocol.Charger.GetChargingProfilesReq.criterion:type_name -> Goiot.Protocol.Charger.ChargingProfilesCriterion
	20,  // 105: Goiot.Protocol.Charger.GetChargingProfilesConf.status:type_name -> Goiot.Protocol.Charger.GetChargingProfilesStatus
	132, // 106: Goiot.Protocol.Charger.ReportChargingProfilesReq.chargingProfile:type_name -> Goiot.Protocol.Charger.ChargingProfile
	59,  // 107: Goiot.Protocol.Charger.SetTariffReq.ChannelsEntry.value:type_name -> Goiot.Protocol.Charger.TariffChannel
	96,  // 108: Goiot.Protocol.Charger.SetVariablesReq.SetVariableData.component:type_name -> Goiot.Protocol.Charger.ComponentType
	97,  // 109: Goiot.Protocol.Charger.SetVariablesReq.SetVariableData.variable:type_name -> Goiot.Protocol.Charger.VariableType
	151, // 110: Goiot.Protocol.Charger.SalesTariff.Entry.consumptionCost:type_name -> Goiot.Protocol.Charger.SalesTariff.ConsumptionCost
	152, // 111: Goiot.Protocol.Charger.SalesTariff.ConsumptionCost.cost:type_name -> Goiot.Protocol.Charger.SalesTariff.ConsumptionCost.Cost
	31,  // 112: Goiot.Protocol.Charger.SalesTariff.ConsumptionCost.Cost.kind:type_name -> Goiot.Protocol.Charger.SalesTariff.ConsumptionCost.Cost.Kind
	113, // [113:113] is the sub-list for method output_type
	113, // [113:113] is the sub-list for method input_type
	113, // [113:113] is the sub-list for extension type_name
	113, // [113:113] is the sub-list for extension extendee
	0,   // [0:113] is the sub-list for field type_name
}

func init() { file_charger_proto_init() }
func file_charger_proto_init() {
	if File_charger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_charger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APDU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootNotificationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConfigurationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeConfigurationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigurationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigurationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteControlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteControlConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFirmwareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFirmwareConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareStatusNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareStatusNotificationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticsConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticsStatusNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegistrationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRegistrationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffParking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CostBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTariffReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTariffConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIdCardCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStartTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStartTransactionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStopTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteStopTransactionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransactionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTransactionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSHandshakeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSChargingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSChargedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampledValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWarningReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWarningConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseReportConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableAttributeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyReportConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVariablesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVariablesConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStatusNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStatusNotificationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalListVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalListVersionConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdTokenInfoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdTokenType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLocalAuthorizationListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLocalAuthorizationListConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveNowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveNowConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReservationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReservationConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDiagnosisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDiagnosisResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveStopTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTransferConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReserveStopTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotificationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVariablesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVariablesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVariablesConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVariablesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChargingProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesTariff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChargingProfileConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearChargingProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearChargingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearChargingProfileConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChargingProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChargingProfilesConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingProfilesCriterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportChargingProfilesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportChargingProfilesConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVariablesReq_SetVariableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogReq_LogParametersType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingSchedule_PeriodType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesTariff_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesTariff_ConsumptionCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_charger_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesTariff_ConsumptionCost_Cost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_charger_proto_rawDesc,
			NumEnums:      33,
			NumMessages:   120,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_charger_proto_goTypes,
		DependencyIndexes: file_charger_proto_depIdxs,
		EnumInfos:         file_charger_proto_enumTypes,
		MessageInfos:      file_charger_proto_msgTypes,
	}.Build()
	File_charger_proto = out.File
	file_charger_proto_rawDesc = nil
	file_charger_proto_goTypes = nil
	file_charger_proto_depIdxs = nil
}
