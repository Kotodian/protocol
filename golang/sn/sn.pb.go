// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: sn.proto

package sn

import (
	context "context"
	common "github.com/Kotodian/protocol/golang/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SNState int32

const (
	SNState_SNS_UNKNOWN         SNState = 0
	SNState_SNS_WAIT_ACTIVATION SNState = 1 // 等待激活
	SNState_SNS_ACTIVATED       SNState = 2 // 已激活
	SNState_SNS_EXPIRED         SNState = 3 // 回收
)

// Enum value maps for SNState.
var (
	SNState_name = map[int32]string{
		0: "SNS_UNKNOWN",
		1: "SNS_WAIT_ACTIVATION",
		2: "SNS_ACTIVATED",
		3: "SNS_EXPIRED",
	}
	SNState_value = map[string]int32{
		"SNS_UNKNOWN":         0,
		"SNS_WAIT_ACTIVATION": 1,
		"SNS_ACTIVATED":       2,
		"SNS_EXPIRED":         3,
	}
)

func (x SNState) Enum() *SNState {
	p := new(SNState)
	*p = x
	return p
}

func (x SNState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SNState) Descriptor() protoreflect.EnumDescriptor {
	return file_sn_proto_enumTypes[0].Descriptor()
}

func (SNState) Type() protoreflect.EnumType {
	return &file_sn_proto_enumTypes[0]
}

func (x SNState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SNState.Descriptor instead.
func (SNState) EnumDescriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{0}
}

type ApplyMode int32

const (
	ApplyMode_AM_UNKNOWN ApplyMode = 0
	ApplyMode_AM_AUTOGEN ApplyMode = 1 // 平台生成SN
	ApplyMode_AM_UD      ApplyMode = 2 // 用户自定义SN
)

// Enum value maps for ApplyMode.
var (
	ApplyMode_name = map[int32]string{
		0: "AM_UNKNOWN",
		1: "AM_AUTOGEN",
		2: "AM_UD",
	}
	ApplyMode_value = map[string]int32{
		"AM_UNKNOWN": 0,
		"AM_AUTOGEN": 1,
		"AM_UD":      2,
	}
)

func (x ApplyMode) Enum() *ApplyMode {
	p := new(ApplyMode)
	*p = x
	return p
}

func (x ApplyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sn_proto_enumTypes[1].Descriptor()
}

func (ApplyMode) Type() protoreflect.EnumType {
	return &file_sn_proto_enumTypes[1]
}

func (x ApplyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplyMode.Descriptor instead.
func (ApplyMode) EnumDescriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{1}
}

type SyncAndActivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn         string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`                                    // sn
	OperatorId uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商ID
	EvseId     uint64 `protobuf:"varint,3,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"`             // 激活SN的设备ID
}

func (x *SyncAndActivateReq) Reset() {
	*x = SyncAndActivateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAndActivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAndActivateReq) ProtoMessage() {}

func (x *SyncAndActivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAndActivateReq.ProtoReflect.Descriptor instead.
func (*SyncAndActivateReq) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{0}
}

func (x *SyncAndActivateReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *SyncAndActivateReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *SyncAndActivateReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

type ApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyId     uint64    `protobuf:"varint,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`                         // 申请ID
	OperatorId  uint64    `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                // 运营商ID
	ApplyMode   ApplyMode `protobuf:"varint,3,opt,name=apply_mode,json=applyMode,proto3,enum=sn.ApplyMode" json:"apply_mode,omitempty"` // 申请模式
	ApplyNumber int32     `protobuf:"varint,4,opt,name=apply_number,json=applyNumber,proto3" json:"apply_number,omitempty"`             // 申请编号数量
	SnLength    int32     `protobuf:"varint,5,opt,name=sn_length,json=snLength,proto3" json:"sn_length,omitempty"`                      // 编号长度(自动生成时使用)
	UdSns       []string  `protobuf:"bytes,6,rep,name=ud_sns,json=udSns,proto3" json:"ud_sns,omitempty"`                                // 自定义SN(用户自定义SN时使用)
}

func (x *ApplyReq) Reset() {
	*x = ApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyReq) ProtoMessage() {}

func (x *ApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyReq.ProtoReflect.Descriptor instead.
func (*ApplyReq) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyReq) GetApplyId() uint64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *ApplyReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *ApplyReq) GetApplyMode() ApplyMode {
	if x != nil {
		return x.ApplyMode
	}
	return ApplyMode_AM_UNKNOWN
}

func (x *ApplyReq) GetApplyNumber() int32 {
	if x != nil {
		return x.ApplyNumber
	}
	return 0
}

func (x *ApplyReq) GetSnLength() int32 {
	if x != nil {
		return x.SnLength
	}
	return 0
}

func (x *ApplyReq) GetUdSns() []string {
	if x != nil {
		return x.UdSns
	}
	return nil
}

type ApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplyResp) Reset() {
	*x = ApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResp) ProtoMessage() {}

func (x *ApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResp.ProtoReflect.Descriptor instead.
func (*ApplyResp) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{2}
}

type ListByApplyIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq       *common.PageReq        `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	SearchFilters []*common.SearchFilter `protobuf:"bytes,2,rep,name=search_filters,json=searchFilters,proto3" json:"search_filters,omitempty"`
	ApplyId       uint64                 `protobuf:"varint,3,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"` // 申请ID
}

func (x *ListByApplyIDReq) Reset() {
	*x = ListByApplyIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListByApplyIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListByApplyIDReq) ProtoMessage() {}

func (x *ListByApplyIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListByApplyIDReq.ProtoReflect.Descriptor instead.
func (*ListByApplyIDReq) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{3}
}

func (x *ListByApplyIDReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *ListByApplyIDReq) GetSearchFilters() []*common.SearchFilter {
	if x != nil {
		return x.SearchFilters
	}
	return nil
}

func (x *ListByApplyIDReq) GetApplyId() uint64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

type ListByOperatorIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagereq       *common.PageReq        `protobuf:"bytes,1,opt,name=pagereq,proto3" json:"pagereq,omitempty"`
	SearchFilters []*common.SearchFilter `protobuf:"bytes,2,rep,name=search_filters,json=searchFilters,proto3" json:"search_filters,omitempty"`
	OperatorId    uint64                 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 申请ID
}

func (x *ListByOperatorIDReq) Reset() {
	*x = ListByOperatorIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListByOperatorIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListByOperatorIDReq) ProtoMessage() {}

func (x *ListByOperatorIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListByOperatorIDReq.ProtoReflect.Descriptor instead.
func (*ListByOperatorIDReq) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{4}
}

func (x *ListByOperatorIDReq) GetPagereq() *common.PageReq {
	if x != nil {
		return x.Pagereq
	}
	return nil
}

func (x *ListByOperatorIDReq) GetSearchFilters() []*common.SearchFilter {
	if x != nil {
		return x.SearchFilters
	}
	return nil
}

func (x *ListByOperatorIDReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type SNInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageresp *common.PageResp `protobuf:"bytes,1,opt,name=pageresp,proto3" json:"pageresp,omitempty"`
	SnInfos  []*SNInfo        `protobuf:"bytes,2,rep,name=sn_infos,json=snInfos,proto3" json:"sn_infos,omitempty"`
}

func (x *SNInfoList) Reset() {
	*x = SNInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNInfoList) ProtoMessage() {}

func (x *SNInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNInfoList.ProtoReflect.Descriptor instead.
func (*SNInfoList) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{5}
}

func (x *SNInfoList) GetPageresp() *common.PageResp {
	if x != nil {
		return x.Pageresp
	}
	return nil
}

func (x *SNInfoList) GetSnInfos() []*SNInfo {
	if x != nil {
		return x.SnInfos
	}
	return nil
}

type InfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn         string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`                                    // sn
	OperatorId uint64 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"` // 运营商ID
}

func (x *InfoReq) Reset() {
	*x = InfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoReq) ProtoMessage() {}

func (x *InfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoReq.ProtoReflect.Descriptor instead.
func (*InfoReq) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{6}
}

func (x *InfoReq) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *InfoReq) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

type ActivateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EvseId uint64 `protobuf:"varint,3,opt,name=evse_id,json=evseId,proto3" json:"evse_id,omitempty"` // 激活SN的设备ID
}

func (x *ActivateReq) Reset() {
	*x = ActivateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateReq) ProtoMessage() {}

func (x *ActivateReq) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateReq.ProtoReflect.Descriptor instead.
func (*ActivateReq) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{7}
}

func (x *ActivateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActivateReq) GetEvseId() uint64 {
	if x != nil {
		return x.EvseId
	}
	return 0
}

type SNInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sn              string    `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`                                                      // sn
	State           SNState   `protobuf:"varint,3,opt,name=state,proto3,enum=sn.SNState" json:"state,omitempty"`                               // 状态
	ApplyId         uint64    `protobuf:"varint,4,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`                            // 申请ID
	OperatorId      uint64    `protobuf:"varint,5,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`                   // 运营商ID
	ApplyMode       ApplyMode `protobuf:"varint,6,opt,name=apply_mode,json=applyMode,proto3,enum=sn.ApplyMode" json:"apply_mode,omitempty"`    // 申请模式
	CreatedAt       uint64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                      // 申请时间
	ExpiredAt       uint64    `protobuf:"varint,8,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`                      // 过期回收时间
	ActivatedAt     uint64    `protobuf:"varint,9,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`                // 激活时间
	ActivatedEvseId uint64    `protobuf:"varint,10,opt,name=activated_evse_id,json=activatedEvseId,proto3" json:"activated_evse_id,omitempty"` // 激活SN的设备ID
}

func (x *SNInfo) Reset() {
	*x = SNInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNInfo) ProtoMessage() {}

func (x *SNInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNInfo.ProtoReflect.Descriptor instead.
func (*SNInfo) Descriptor() ([]byte, []int) {
	return file_sn_proto_rawDescGZIP(), []int{8}
}

func (x *SNInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SNInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *SNInfo) GetState() SNState {
	if x != nil {
		return x.State
	}
	return SNState_SNS_UNKNOWN
}

func (x *SNInfo) GetApplyId() uint64 {
	if x != nil {
		return x.ApplyId
	}
	return 0
}

func (x *SNInfo) GetOperatorId() uint64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *SNInfo) GetApplyMode() ApplyMode {
	if x != nil {
		return x.ApplyMode
	}
	return ApplyMode_AM_UNKNOWN
}

func (x *SNInfo) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SNInfo) GetExpiredAt() uint64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *SNInfo) GetActivatedAt() uint64 {
	if x != nil {
		return x.ActivatedAt
	}
	return 0
}

func (x *SNInfo) GetActivatedEvseId() uint64 {
	if x != nil {
		return x.ActivatedEvseId
	}
	return 0
}

var File_sn_proto protoreflect.FileDescriptor

var file_sn_proto_rawDesc = []byte{
	0x0a, 0x08, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x73, 0x6e, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x12,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a,
	0x08, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x6e, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x64, 0x5f, 0x73, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x64, 0x53, 0x6e, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x22,
	0x9e, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x61, 0x0a, 0x0a, 0x53, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x08,
	0x73, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x73, 0x6e, 0x2e, 0x53, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x3a, 0x0a, 0x07, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0x36, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x65, 0x76, 0x73, 0x65, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x06, 0x53, 0x4e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x73, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x73, 0x6e, 0x2e, 0x53, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x73, 0x65, 0x49, 0x64, 0x2a, 0x57, 0x0a, 0x07,
	0x53, 0x4e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4e, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4e, 0x53, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x36, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x47, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4d, 0x5f, 0x55, 0x44, 0x10, 0x02, 0x32, 0xa6, 0x02,
	0x0a, 0x09, 0x53, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x0c, 0x2e, 0x73, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x73, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x35, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x44, 0x12, 0x14, 0x2e, 0x73, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x73, 0x6e, 0x2e, 0x53, 0x4e,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x73,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x73, 0x6e, 0x2e, 0x53, 0x4e, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0b, 0x2e,
	0x73, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x73, 0x6e, 0x2e,
	0x53, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x2e, 0x73, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x73, 0x6e, 0x2e, 0x53, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x35, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x2e, 0x73, 0x6e, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x73, 0x6e, 0x2e,
	0x53, 0x4e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x2a, 0x48, 0x03, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x6f, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x73, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sn_proto_rawDescOnce sync.Once
	file_sn_proto_rawDescData = file_sn_proto_rawDesc
)

func file_sn_proto_rawDescGZIP() []byte {
	file_sn_proto_rawDescOnce.Do(func() {
		file_sn_proto_rawDescData = protoimpl.X.CompressGZIP(file_sn_proto_rawDescData)
	})
	return file_sn_proto_rawDescData
}

var file_sn_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_sn_proto_goTypes = []interface{}{
	(SNState)(0),                // 0: sn.SNState
	(ApplyMode)(0),              // 1: sn.ApplyMode
	(*SyncAndActivateReq)(nil),  // 2: sn.SyncAndActivateReq
	(*ApplyReq)(nil),            // 3: sn.ApplyReq
	(*ApplyResp)(nil),           // 4: sn.ApplyResp
	(*ListByApplyIDReq)(nil),    // 5: sn.ListByApplyIDReq
	(*ListByOperatorIDReq)(nil), // 6: sn.ListByOperatorIDReq
	(*SNInfoList)(nil),          // 7: sn.SNInfoList
	(*InfoReq)(nil),             // 8: sn.InfoReq
	(*ActivateReq)(nil),         // 9: sn.ActivateReq
	(*SNInfo)(nil),              // 10: sn.SNInfo
	(*common.PageReq)(nil),      // 11: common.PageReq
	(*common.SearchFilter)(nil), // 12: common.SearchFilter
	(*common.PageResp)(nil),     // 13: common.PageResp
}
var file_sn_proto_depIdxs = []int32{
	1,  // 0: sn.ApplyReq.apply_mode:type_name -> sn.ApplyMode
	11, // 1: sn.ListByApplyIDReq.pagereq:type_name -> common.PageReq
	12, // 2: sn.ListByApplyIDReq.search_filters:type_name -> common.SearchFilter
	11, // 3: sn.ListByOperatorIDReq.pagereq:type_name -> common.PageReq
	12, // 4: sn.ListByOperatorIDReq.search_filters:type_name -> common.SearchFilter
	13, // 5: sn.SNInfoList.pageresp:type_name -> common.PageResp
	10, // 6: sn.SNInfoList.sn_infos:type_name -> sn.SNInfo
	0,  // 7: sn.SNInfo.state:type_name -> sn.SNState
	1,  // 8: sn.SNInfo.apply_mode:type_name -> sn.ApplyMode
	3,  // 9: sn.SNService.Apply:input_type -> sn.ApplyReq
	5,  // 10: sn.SNService.ListByApplyID:input_type -> sn.ListByApplyIDReq
	6,  // 11: sn.SNService.ListByOperatorID:input_type -> sn.ListByOperatorIDReq
	8,  // 12: sn.SNService.Info:input_type -> sn.InfoReq
	9,  // 13: sn.SNService.Activate:input_type -> sn.ActivateReq
	2,  // 14: sn.SNService.SyncAndActivate:input_type -> sn.SyncAndActivateReq
	4,  // 15: sn.SNService.Apply:output_type -> sn.ApplyResp
	7,  // 16: sn.SNService.ListByApplyID:output_type -> sn.SNInfoList
	7,  // 17: sn.SNService.ListByOperatorID:output_type -> sn.SNInfoList
	10, // 18: sn.SNService.Info:output_type -> sn.SNInfo
	10, // 19: sn.SNService.Activate:output_type -> sn.SNInfo
	10, // 20: sn.SNService.SyncAndActivate:output_type -> sn.SNInfo
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_sn_proto_init() }
func file_sn_proto_init() {
	if File_sn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAndActivateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListByApplyIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListByOperatorIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sn_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sn_proto_goTypes,
		DependencyIndexes: file_sn_proto_depIdxs,
		EnumInfos:         file_sn_proto_enumTypes,
		MessageInfos:      file_sn_proto_msgTypes,
	}.Build()
	File_sn_proto = out.File
	file_sn_proto_rawDesc = nil
	file_sn_proto_goTypes = nil
	file_sn_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SNServiceClient is the client API for SNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SNServiceClient interface {
	// 申请sn
	Apply(ctx context.Context, in *ApplyReq, opts ...grpc.CallOption) (*ApplyResp, error)
	// 申请列表
	ListByApplyID(ctx context.Context, in *ListByApplyIDReq, opts ...grpc.CallOption) (*SNInfoList, error)
	ListByOperatorID(ctx context.Context, in *ListByOperatorIDReq, opts ...grpc.CallOption) (*SNInfoList, error)
	// 获取信息
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*SNInfo, error)
	// 激活SN
	Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*SNInfo, error)
	// 同步并激活sn信息，
	SyncAndActivate(ctx context.Context, in *SyncAndActivateReq, opts ...grpc.CallOption) (*SNInfo, error)
}

type sNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSNServiceClient(cc grpc.ClientConnInterface) SNServiceClient {
	return &sNServiceClient{cc}
}

func (c *sNServiceClient) Apply(ctx context.Context, in *ApplyReq, opts ...grpc.CallOption) (*ApplyResp, error) {
	out := new(ApplyResp)
	err := c.cc.Invoke(ctx, "/sn.SNService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) ListByApplyID(ctx context.Context, in *ListByApplyIDReq, opts ...grpc.CallOption) (*SNInfoList, error) {
	out := new(SNInfoList)
	err := c.cc.Invoke(ctx, "/sn.SNService/ListByApplyID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) ListByOperatorID(ctx context.Context, in *ListByOperatorIDReq, opts ...grpc.CallOption) (*SNInfoList, error) {
	out := new(SNInfoList)
	err := c.cc.Invoke(ctx, "/sn.SNService/ListByOperatorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*SNInfo, error) {
	out := new(SNInfo)
	err := c.cc.Invoke(ctx, "/sn.SNService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) Activate(ctx context.Context, in *ActivateReq, opts ...grpc.CallOption) (*SNInfo, error) {
	out := new(SNInfo)
	err := c.cc.Invoke(ctx, "/sn.SNService/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) SyncAndActivate(ctx context.Context, in *SyncAndActivateReq, opts ...grpc.CallOption) (*SNInfo, error) {
	out := new(SNInfo)
	err := c.cc.Invoke(ctx, "/sn.SNService/SyncAndActivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SNServiceServer is the server API for SNService service.
type SNServiceServer interface {
	// 申请sn
	Apply(context.Context, *ApplyReq) (*ApplyResp, error)
	// 申请列表
	ListByApplyID(context.Context, *ListByApplyIDReq) (*SNInfoList, error)
	ListByOperatorID(context.Context, *ListByOperatorIDReq) (*SNInfoList, error)
	// 获取信息
	Info(context.Context, *InfoReq) (*SNInfo, error)
	// 激活SN
	Activate(context.Context, *ActivateReq) (*SNInfo, error)
	// 同步并激活sn信息，
	SyncAndActivate(context.Context, *SyncAndActivateReq) (*SNInfo, error)
}

// UnimplementedSNServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSNServiceServer struct {
}

func (*UnimplementedSNServiceServer) Apply(context.Context, *ApplyReq) (*ApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedSNServiceServer) ListByApplyID(context.Context, *ListByApplyIDReq) (*SNInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByApplyID not implemented")
}
func (*UnimplementedSNServiceServer) ListByOperatorID(context.Context, *ListByOperatorIDReq) (*SNInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByOperatorID not implemented")
}
func (*UnimplementedSNServiceServer) Info(context.Context, *InfoReq) (*SNInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedSNServiceServer) Activate(context.Context, *ActivateReq) (*SNInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (*UnimplementedSNServiceServer) SyncAndActivate(context.Context, *SyncAndActivateReq) (*SNInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAndActivate not implemented")
}

func RegisterSNServiceServer(s *grpc.Server, srv SNServiceServer) {
	s.RegisterService(&_SNService_serviceDesc, srv)
}

func _SNService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sn.SNService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).Apply(ctx, req.(*ApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_ListByApplyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByApplyIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).ListByApplyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sn.SNService/ListByApplyID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).ListByApplyID(ctx, req.(*ListByApplyIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_ListByOperatorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByOperatorIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).ListByOperatorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sn.SNService/ListByOperatorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).ListByOperatorID(ctx, req.(*ListByOperatorIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sn.SNService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sn.SNService/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).Activate(ctx, req.(*ActivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_SyncAndActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAndActivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).SyncAndActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sn.SNService/SyncAndActivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).SyncAndActivate(ctx, req.(*SyncAndActivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SNService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sn.SNService",
	HandlerType: (*SNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _SNService_Apply_Handler,
		},
		{
			MethodName: "ListByApplyID",
			Handler:    _SNService_ListByApplyID_Handler,
		},
		{
			MethodName: "ListByOperatorID",
			Handler:    _SNService_ListByOperatorID_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _SNService_Info_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _SNService_Activate_Handler,
		},
		{
			MethodName: "SyncAndActivate",
			Handler:    _SNService_SyncAndActivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sn.proto",
}
