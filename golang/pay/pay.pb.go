// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: pay.proto

package pay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PayMode 支付平台
type PayMode int32

const (
	PayMode_Unknow       PayMode = 0    //未知来源
	PayMode_Wechat       PayMode = 1    //微信
	PayMode_Alipay       PayMode = 2    //支付宝
	PayMode_Group        PayMode = 3    //集团支付
	PayMode_Balance      PayMode = 4    //余额支付
	PayMode_WechatApp    PayMode = 5    //微信App
	PayMode_AlipayApp    PayMode = 6    //支付宝App
	PayMode_ThirdWechat  PayMode = 7    //第三方微信
	PayMode_ThirdAlipay  PayMode = 8    //第三方支付宝
	PayMode_ThirdBalance PayMode = 9    //第三方余额
	PayMode_WechatMin    PayMode = 10   //微信小程序
	PayMode_AlipayMin    PayMode = 11   //支付宝小程序
	PayMode_WechatPC     PayMode = 12   //微信PC支付
	PayMode_CmbPay       PayMode = 13   //招行支付
	PayMode_Free         PayMode = 9999 //免费
)

// Enum value maps for PayMode.
var (
	PayMode_name = map[int32]string{
		0:    "Unknow",
		1:    "Wechat",
		2:    "Alipay",
		3:    "Group",
		4:    "Balance",
		5:    "WechatApp",
		6:    "AlipayApp",
		7:    "ThirdWechat",
		8:    "ThirdAlipay",
		9:    "ThirdBalance",
		10:   "WechatMin",
		11:   "AlipayMin",
		12:   "WechatPC",
		13:   "CmbPay",
		9999: "Free",
	}
	PayMode_value = map[string]int32{
		"Unknow":       0,
		"Wechat":       1,
		"Alipay":       2,
		"Group":        3,
		"Balance":      4,
		"WechatApp":    5,
		"AlipayApp":    6,
		"ThirdWechat":  7,
		"ThirdAlipay":  8,
		"ThirdBalance": 9,
		"WechatMin":    10,
		"AlipayMin":    11,
		"WechatPC":     12,
		"CmbPay":       13,
		"Free":         9999,
	}
)

func (x PayMode) Enum() *PayMode {
	p := new(PayMode)
	*p = x
	return p
}

func (x PayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pay_proto_enumTypes[0].Descriptor()
}

func (PayMode) Type() protoreflect.EnumType {
	return &file_pay_proto_enumTypes[0]
}

func (x PayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayMode.Descriptor instead.
func (PayMode) EnumDescriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{0}
}

// BizType 业务类型
type BizType int32

const (
	BizType_OrderCharge     BizType = 0 //充电
	BizType_CarRecharge     BizType = 1 //卡充值
	BizType_OrderPayback    BizType = 2 //订单补缴
	BizType_OrderRefund     BizType = 3 //退款
	BizType_BalanceRecharge BizType = 4 //余额充值
	BizType_SmsRecharge     BizType = 5 //短信充值
)

// Enum value maps for BizType.
var (
	BizType_name = map[int32]string{
		0: "OrderCharge",
		1: "CarRecharge",
		2: "OrderPayback",
		3: "OrderRefund",
		4: "BalanceRecharge",
		5: "SmsRecharge",
	}
	BizType_value = map[string]int32{
		"OrderCharge":     0,
		"CarRecharge":     1,
		"OrderPayback":    2,
		"OrderRefund":     3,
		"BalanceRecharge": 4,
		"SmsRecharge":     5,
	}
)

func (x BizType) Enum() *BizType {
	p := new(BizType)
	*p = x
	return p
}

func (x BizType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BizType) Descriptor() protoreflect.EnumDescriptor {
	return file_pay_proto_enumTypes[1].Descriptor()
}

func (BizType) Type() protoreflect.EnumType {
	return &file_pay_proto_enumTypes[1]
}

func (x BizType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BizType.Descriptor instead.
func (BizType) EnumDescriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{1}
}

// 交易状态
type TradeStatus int32

const (
	TradeStatus_Waiting TradeStatus = 0 //待支付
	TradeStatus_Success TradeStatus = 1 //支付成功
	TradeStatus_Failure TradeStatus = 2 //支付失败
	TradeStatus_Paying  TradeStatus = 3 //支付中
	TradeStatus_Closed  TradeStatus = 4 //支付结束
	TradeStatus_Timeout TradeStatus = 5 //支付超时
)

// Enum value maps for TradeStatus.
var (
	TradeStatus_name = map[int32]string{
		0: "Waiting",
		1: "Success",
		2: "Failure",
		3: "Paying",
		4: "Closed",
		5: "Timeout",
	}
	TradeStatus_value = map[string]int32{
		"Waiting": 0,
		"Success": 1,
		"Failure": 2,
		"Paying":  3,
		"Closed":  4,
		"Timeout": 5,
	}
)

func (x TradeStatus) Enum() *TradeStatus {
	p := new(TradeStatus)
	*p = x
	return p
}

func (x TradeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pay_proto_enumTypes[2].Descriptor()
}

func (TradeStatus) Type() protoreflect.EnumType {
	return &file_pay_proto_enumTypes[2]
}

func (x TradeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeStatus.Descriptor instead.
func (TradeStatus) EnumDescriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{2}
}

// 退款状态
type RefundStatus int32

const (
	RefundStatus_RefundIng     RefundStatus = 0 //退款中
	RefundStatus_RefundSuccess RefundStatus = 1 //退款成功
	RefundStatus_RefundFailure RefundStatus = 2 //退款失败
)

// Enum value maps for RefundStatus.
var (
	RefundStatus_name = map[int32]string{
		0: "RefundIng",
		1: "RefundSuccess",
		2: "RefundFailure",
	}
	RefundStatus_value = map[string]int32{
		"RefundIng":     0,
		"RefundSuccess": 1,
		"RefundFailure": 2,
	}
)

func (x RefundStatus) Enum() *RefundStatus {
	p := new(RefundStatus)
	*p = x
	return p
}

func (x RefundStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefundStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pay_proto_enumTypes[3].Descriptor()
}

func (RefundStatus) Type() protoreflect.EnumType {
	return &file_pay_proto_enumTypes[3]
}

func (x RefundStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefundStatus.Descriptor instead.
func (RefundStatus) EnumDescriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{3}
}

type TradeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       int32  `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`             //支付金额
	PlatformType int32  `protobuf:"varint,2,opt,name=PlatformType,proto3" json:"PlatformType,omitempty"` //来源平台
	Subject      string `protobuf:"bytes,3,opt,name=Subject,proto3" json:"Subject,omitempty"`            //支付订单描述
	OutUserID    string `protobuf:"bytes,4,opt,name=OutUserID,proto3" json:"OutUserID,omitempty"`        //支付平台识别用户ID 微信:openID 支付宝:aliUserID
	OutTradeNo   string `protobuf:"bytes,5,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`      //订单号
	AppID        string `protobuf:"bytes,6,opt,name=AppID,proto3" json:"AppID,omitempty"`                //应用ID
	IP           string `protobuf:"bytes,7,opt,name=IP,proto3" json:"IP,omitempty"`                      //订单来源IP
	TradeType    string `protobuf:"bytes,8,opt,name=TradeType,proto3" json:"TradeType,omitempty"`        //支付类型,跟平台有关；微信:jsapi,nativeapi;支付宝又不一样
	NotifiyURL   string `protobuf:"bytes,9,opt,name=NotifiyURL,proto3" json:"NotifiyURL,omitempty"`      //回调通知接口
	Extra        string `protobuf:"bytes,10,opt,name=Extra,proto3" json:"Extra,omitempty"`               //透传字段
	PayMode      int32  `protobuf:"varint,11,opt,name=PayMode,proto3" json:"PayMode,omitempty"`          //支付方式
	BizType      int32  `protobuf:"varint,12,opt,name=BizType,proto3" json:"BizType,omitempty"`          //业务类型
	ReturnURL    string `protobuf:"bytes,13,opt,name=ReturnURL,proto3" json:"ReturnURL,omitempty"`       //返回页面路径
	TradeTime    int32  `protobuf:"varint,14,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`      //交易时间
}

func (x *TradeReq) Reset() {
	*x = TradeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeReq) ProtoMessage() {}

func (x *TradeReq) ProtoReflect() protoreflect.Message {
	mi := &file_pay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeReq.ProtoReflect.Descriptor instead.
func (*TradeReq) Descriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{0}
}

func (x *TradeReq) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TradeReq) GetPlatformType() int32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *TradeReq) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *TradeReq) GetOutUserID() string {
	if x != nil {
		return x.OutUserID
	}
	return ""
}

func (x *TradeReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *TradeReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *TradeReq) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *TradeReq) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *TradeReq) GetNotifiyURL() string {
	if x != nil {
		return x.NotifiyURL
	}
	return ""
}

func (x *TradeReq) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *TradeReq) GetPayMode() int32 {
	if x != nil {
		return x.PayMode
	}
	return 0
}

func (x *TradeReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *TradeReq) GetReturnURL() string {
	if x != nil {
		return x.ReturnURL
	}
	return ""
}

func (x *TradeReq) GetTradeTime() int32 {
	if x != nil {
		return x.TradeTime
	}
	return 0
}

type TradeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeID  string    `protobuf:"bytes,1,opt,name=TradeID,proto3" json:"TradeID,omitempty"`   //平台订单号
	Status   int32     `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`    //订单状态
	PayInfo  []byte    `protobuf:"bytes,3,opt,name=PayInfo,proto3" json:"PayInfo,omitempty"`   //支付信息
	TradeReq *TradeReq `protobuf:"bytes,4,opt,name=TradeReq,proto3" json:"TradeReq,omitempty"` //原路返回请求
	Balance  int64     `protobuf:"varint,5,opt,name=Balance,proto3" json:"Balance,omitempty"`  //付后余额
}

func (x *TradeResp) Reset() {
	*x = TradeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeResp) ProtoMessage() {}

func (x *TradeResp) ProtoReflect() protoreflect.Message {
	mi := &file_pay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeResp.ProtoReflect.Descriptor instead.
func (*TradeResp) Descriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{1}
}

func (x *TradeResp) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *TradeResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TradeResp) GetPayInfo() []byte {
	if x != nil {
		return x.PayInfo
	}
	return nil
}

func (x *TradeResp) GetTradeReq() *TradeReq {
	if x != nil {
		return x.TradeReq
	}
	return nil
}

func (x *TradeResp) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type TradeStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string `protobuf:"bytes,1,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"` //第三方
	AppID      string `protobuf:"bytes,2,opt,name=AppID,proto3" json:"AppID,omitempty"`           //第三方应用标识
}

func (x *TradeStatusReq) Reset() {
	*x = TradeStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatusReq) ProtoMessage() {}

func (x *TradeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_pay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatusReq.ProtoReflect.Descriptor instead.
func (*TradeStatusReq) Descriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{2}
}

func (x *TradeStatusReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *TradeStatusReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type TradeStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string      `protobuf:"bytes,1,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`               //第三方交易号
	Status     TradeStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=pay.TradeStatus" json:"Status,omitempty"` //交易状态
}

func (x *TradeStatusResp) Reset() {
	*x = TradeStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStatusResp) ProtoMessage() {}

func (x *TradeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_pay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStatusResp.ProtoReflect.Descriptor instead.
func (*TradeStatusResp) Descriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{3}
}

func (x *TradeStatusResp) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *TradeStatusResp) GetStatus() TradeStatus {
	if x != nil {
		return x.Status
	}
	return TradeStatus_Waiting
}

type RefundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo   string `protobuf:"bytes,1,opt,name=OutTradeNo,proto3" json:"OutTradeNo,omitempty"`      //第三方交易号,
	OutRefundNo  string `protobuf:"bytes,2,opt,name=OutRefundNo,proto3" json:"OutRefundNo,omitempty"`    //第三方退款标识符,
	AppID        string `protobuf:"bytes,3,opt,name=AppID,proto3" json:"AppID,omitempty"`                //应用ID,
	TotalFee     int32  `protobuf:"varint,4,opt,name=TotalFee,proto3" json:"TotalFee,omitempty"`         //订单总额；分为单位,
	RefundFee    int32  `protobuf:"varint,5,opt,name=RefundFee,proto3" json:"RefundFee,omitempty"`       //退款额度；分为单位,
	PlatformType int32  `protobuf:"varint,6,opt,name=PlatformType,proto3" json:"PlatformType,omitempty"` //平台类型：支付宝，微信等
	PayMode      int32  `protobuf:"varint,7,opt,name=PayMode,proto3" json:"PayMode,omitempty"`           //支付方式
	IP           string `protobuf:"bytes,8,opt,name=IP,proto3" json:"IP,omitempty"`                      //用户IP地址
	BizType      int32  `protobuf:"varint,9,opt,name=BizType,proto3" json:"BizType,omitempty"`           //业务类型
	TradeTime    int32  `protobuf:"varint,10,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`      //交易时间
	Extra        string `protobuf:"bytes,11,opt,name=Extra,proto3" json:"Extra,omitempty"`               //预留字段
}

func (x *RefundReq) Reset() {
	*x = RefundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundReq) ProtoMessage() {}

func (x *RefundReq) ProtoReflect() protoreflect.Message {
	mi := &file_pay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundReq.ProtoReflect.Descriptor instead.
func (*RefundReq) Descriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{4}
}

func (x *RefundReq) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *RefundReq) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

func (x *RefundReq) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *RefundReq) GetTotalFee() int32 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *RefundReq) GetRefundFee() int32 {
	if x != nil {
		return x.RefundFee
	}
	return 0
}

func (x *RefundReq) GetPlatformType() int32 {
	if x != nil {
		return x.PlatformType
	}
	return 0
}

func (x *RefundReq) GetPayMode() int32 {
	if x != nil {
		return x.PayMode
	}
	return 0
}

func (x *RefundReq) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *RefundReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *RefundReq) GetTradeTime() int32 {
	if x != nil {
		return x.TradeTime
	}
	return 0
}

func (x *RefundReq) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type RefundResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefundID  int32      `protobuf:"varint,1,opt,name=RefundID,proto3" json:"RefundID,omitempty"`  //第三方退款标识
	Status    int32      `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`      //退款状态
	Response  string     `protobuf:"bytes,3,opt,name=Response,proto3" json:"Response,omitempty"`   //退款信息
	RefundReq *RefundReq `protobuf:"bytes,4,opt,name=RefundReq,proto3" json:"RefundReq,omitempty"` //原路返回请求
	Balance   int64      `protobuf:"varint,5,opt,name=Balance,proto3" json:"Balance,omitempty"`    //付后余额
}

func (x *RefundResp) Reset() {
	*x = RefundResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundResp) ProtoMessage() {}

func (x *RefundResp) ProtoReflect() protoreflect.Message {
	mi := &file_pay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundResp.ProtoReflect.Descriptor instead.
func (*RefundResp) Descriptor() ([]byte, []int) {
	return file_pay_proto_rawDescGZIP(), []int{5}
}

func (x *RefundResp) GetRefundID() int32 {
	if x != nil {
		return x.RefundID
	}
	return 0
}

func (x *RefundResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RefundResp) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *RefundResp) GetRefundReq() *RefundReq {
	if x != nil {
		return x.RefundReq
	}
	return nil
}

func (x *RefundResp) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

var File_pay_proto protoreflect.FileDescriptor

var file_pay_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x61, 0x79,
	0x22, 0x88, 0x03, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x79,
	0x55, 0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x22, 0x5b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xb9, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x50, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa4, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x52, 0x09, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x2a, 0xda, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x41, 0x70, 0x70, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6c, 0x69,
	0x70, 0x61, 0x79, 0x41, 0x70, 0x70, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x41, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x43, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6d, 0x62, 0x50,
	0x61, 0x79, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x04, 0x46, 0x72, 0x65, 0x65, 0x10, 0x8f, 0x4e, 0x2a,
	0x74, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x61, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x10, 0x05, 0x2a, 0x59, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x05,
	0x2a, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x67, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x10, 0x02, 0x32, 0x94, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0d, 0x2e,
	0x70, 0x61, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x70,
	0x61, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2b, 0x48, 0x03,
	0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x6f, 0x74,
	0x6f, 0x64, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pay_proto_rawDescOnce sync.Once
	file_pay_proto_rawDescData = file_pay_proto_rawDesc
)

func file_pay_proto_rawDescGZIP() []byte {
	file_pay_proto_rawDescOnce.Do(func() {
		file_pay_proto_rawDescData = protoimpl.X.CompressGZIP(file_pay_proto_rawDescData)
	})
	return file_pay_proto_rawDescData
}

var file_pay_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pay_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pay_proto_goTypes = []interface{}{
	(PayMode)(0),            // 0: pay.PayMode
	(BizType)(0),            // 1: pay.BizType
	(TradeStatus)(0),        // 2: pay.TradeStatus
	(RefundStatus)(0),       // 3: pay.RefundStatus
	(*TradeReq)(nil),        // 4: pay.TradeReq
	(*TradeResp)(nil),       // 5: pay.TradeResp
	(*TradeStatusReq)(nil),  // 6: pay.TradeStatusReq
	(*TradeStatusResp)(nil), // 7: pay.TradeStatusResp
	(*RefundReq)(nil),       // 8: pay.RefundReq
	(*RefundResp)(nil),      // 9: pay.RefundResp
}
var file_pay_proto_depIdxs = []int32{
	4, // 0: pay.TradeResp.TradeReq:type_name -> pay.TradeReq
	2, // 1: pay.TradeStatusResp.Status:type_name -> pay.TradeStatus
	8, // 2: pay.RefundResp.RefundReq:type_name -> pay.RefundReq
	4, // 3: pay.PayService.Trade:input_type -> pay.TradeReq
	8, // 4: pay.PayService.Refund:input_type -> pay.RefundReq
	6, // 5: pay.PayService.Status:input_type -> pay.TradeStatusReq
	5, // 6: pay.PayService.Trade:output_type -> pay.TradeResp
	9, // 7: pay.PayService.Refund:output_type -> pay.RefundResp
	7, // 8: pay.PayService.Status:output_type -> pay.TradeStatusResp
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pay_proto_init() }
func file_pay_proto_init() {
	if File_pay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pay_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pay_proto_goTypes,
		DependencyIndexes: file_pay_proto_depIdxs,
		EnumInfos:         file_pay_proto_enumTypes,
		MessageInfos:      file_pay_proto_msgTypes,
	}.Build()
	File_pay_proto = out.File
	file_pay_proto_rawDesc = nil
	file_pay_proto_goTypes = nil
	file_pay_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PayServiceClient is the client API for PayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PayServiceClient interface {
	// 交易时触发
	Trade(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*TradeResp, error)
	// 退款时触发
	Refund(ctx context.Context, in *RefundReq, opts ...grpc.CallOption) (*RefundResp, error)
	// 交易状态查询
	Status(ctx context.Context, in *TradeStatusReq, opts ...grpc.CallOption) (*TradeStatusResp, error)
}

type payServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayServiceClient(cc grpc.ClientConnInterface) PayServiceClient {
	return &payServiceClient{cc}
}

func (c *payServiceClient) Trade(ctx context.Context, in *TradeReq, opts ...grpc.CallOption) (*TradeResp, error) {
	out := new(TradeResp)
	err := c.cc.Invoke(ctx, "/pay.PayService/Trade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) Refund(ctx context.Context, in *RefundReq, opts ...grpc.CallOption) (*RefundResp, error) {
	out := new(RefundResp)
	err := c.cc.Invoke(ctx, "/pay.PayService/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) Status(ctx context.Context, in *TradeStatusReq, opts ...grpc.CallOption) (*TradeStatusResp, error) {
	out := new(TradeStatusResp)
	err := c.cc.Invoke(ctx, "/pay.PayService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServiceServer is the server API for PayService service.
type PayServiceServer interface {
	// 交易时触发
	Trade(context.Context, *TradeReq) (*TradeResp, error)
	// 退款时触发
	Refund(context.Context, *RefundReq) (*RefundResp, error)
	// 交易状态查询
	Status(context.Context, *TradeStatusReq) (*TradeStatusResp, error)
}

// UnimplementedPayServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPayServiceServer struct {
}

func (*UnimplementedPayServiceServer) Trade(context.Context, *TradeReq) (*TradeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (*UnimplementedPayServiceServer) Refund(context.Context, *RefundReq) (*RefundResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (*UnimplementedPayServiceServer) Status(context.Context, *TradeStatusReq) (*TradeStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterPayServiceServer(s *grpc.Server, srv PayServiceServer) {
	s.RegisterService(&_PayService_serviceDesc, srv)
}

func _PayService_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayService/Trade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Trade(ctx, req.(*TradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayService/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Refund(ctx, req.(*RefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.PayService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Status(ctx, req.(*TradeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pay.PayService",
	HandlerType: (*PayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trade",
			Handler:    _PayService_Trade_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _PayService_Refund_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PayService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
